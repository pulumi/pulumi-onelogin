// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Creates an Authentication Server Resource.
 *
 * This resource allows you to create and configure an Authentication Server.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as onelogin from "@pulumi/onelogin";
 *
 * const example = new onelogin.AuthServer("example", {
 *     configuration: {
 *         accessTokenExpirationMinutes: 10,
 *         audiences: ["https://example.com/contacts"],
 *         refreshTokenExpirationMinutes: 30,
 *         resourceIdentifier: "https://example.com/contacts",
 *     },
 *     description: "This is an api",
 * });
 * ```
 *
 * ## Import
 *
 * An Auth Server can be imported via the OneLogin Auth Server ID.
 *
 * ```sh
 *  $ pulumi import onelogin:index/authServer:AuthServer example <auth_server_id>
 * ```
 */
export class AuthServer extends pulumi.CustomResource {
    /**
     * Get an existing AuthServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuthServerState, opts?: pulumi.CustomResourceOptions): AuthServer {
        return new AuthServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'onelogin:index/authServer:AuthServer';

    /**
     * Returns true if the given object is an instance of AuthServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AuthServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AuthServer.__pulumiType;
    }

    /**
     * Configuration parameters
     */
    public readonly configuration!: pulumi.Output<outputs.AuthServerConfiguration>;
    /**
     * A brief description about the resource.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The resource's name.
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a AuthServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AuthServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuthServerArgs | AuthServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AuthServerState | undefined;
            resourceInputs["configuration"] = state ? state.configuration : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as AuthServerArgs | undefined;
            if ((!args || args.configuration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configuration'");
            }
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            resourceInputs["configuration"] = args ? args.configuration : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AuthServer.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AuthServer resources.
 */
export interface AuthServerState {
    /**
     * Configuration parameters
     */
    configuration?: pulumi.Input<inputs.AuthServerConfiguration>;
    /**
     * A brief description about the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * The resource's name.
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AuthServer resource.
 */
export interface AuthServerArgs {
    /**
     * Configuration parameters
     */
    configuration: pulumi.Input<inputs.AuthServerConfiguration>;
    /**
     * A brief description about the resource.
     */
    description: pulumi.Input<string>;
    /**
     * The resource's name.
     */
    name?: pulumi.Input<string>;
}
