// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Manage Privilege resources.
 *
 * This resource allows you to create and configure Privilege.
 *
 * ## Example Usage
 * ### Strict Ordering
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as onelogin from "@pulumi/onelogin";
 *
 * const superAdmin = new onelogin.Privilege("super_admin", {
 *     description: "description",
 *     privileges: [{
 *         statements: [
 *             {
 *                 actions: ["apps:List"],
 *                 effect: "Allow",
 *                 scopes: ["*"],
 *             },
 *             {
 *                 actions: [
 *                     "users:List",
 *                     "users:Update",
 *                 ],
 *                 effect: "Allow",
 *                 scopes: [
 *                     "users/123",
 *                     "users/345",
 *                 ],
 *             },
 *         ],
 *     }],
 *     roleIds: [
 *         987,
 *         654,
 *     ],
 *     userIds: [
 *         123,
 *         345,
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * A privilege can be imported using the OneLogin Privilege ID.
 *
 * ```sh
 *  $ pulumi import onelogin:index/privilege:Privilege super_admin <privilege id>
 * ```
 */
export class Privilege extends pulumi.CustomResource {
    /**
     * Get an existing Privilege resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PrivilegeState, opts?: pulumi.CustomResourceOptions): Privilege {
        return new Privilege(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'onelogin:index/privilege:Privilege';

    /**
     * Returns true if the given object is an instance of Privilege.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Privilege {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Privilege.__pulumiType;
    }

    /**
     * Description for the Privilege.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The name of the privilege.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A list of statements that describe what the privilege grants access to.
     */
    public readonly privileges!: pulumi.Output<outputs.PrivilegePrivilege[]>;
    /**
     * A list of role IDs for whom the role applies.
     */
    public readonly roleIds!: pulumi.Output<number[] | undefined>;
    /**
     * A list of user IDs for whom the privilege applies.
     */
    public readonly userIds!: pulumi.Output<number[] | undefined>;

    /**
     * Create a Privilege resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PrivilegeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PrivilegeArgs | PrivilegeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PrivilegeState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["privileges"] = state ? state.privileges : undefined;
            resourceInputs["roleIds"] = state ? state.roleIds : undefined;
            resourceInputs["userIds"] = state ? state.userIds : undefined;
        } else {
            const args = argsOrState as PrivilegeArgs | undefined;
            if ((!args || args.privileges === undefined) && !opts.urn) {
                throw new Error("Missing required property 'privileges'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["privileges"] = args ? args.privileges : undefined;
            resourceInputs["roleIds"] = args ? args.roleIds : undefined;
            resourceInputs["userIds"] = args ? args.userIds : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Privilege.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Privilege resources.
 */
export interface PrivilegeState {
    /**
     * Description for the Privilege.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the privilege.
     */
    name?: pulumi.Input<string>;
    /**
     * A list of statements that describe what the privilege grants access to.
     */
    privileges?: pulumi.Input<pulumi.Input<inputs.PrivilegePrivilege>[]>;
    /**
     * A list of role IDs for whom the role applies.
     */
    roleIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * A list of user IDs for whom the privilege applies.
     */
    userIds?: pulumi.Input<pulumi.Input<number>[]>;
}

/**
 * The set of arguments for constructing a Privilege resource.
 */
export interface PrivilegeArgs {
    /**
     * Description for the Privilege.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the privilege.
     */
    name?: pulumi.Input<string>;
    /**
     * A list of statements that describe what the privilege grants access to.
     */
    privileges: pulumi.Input<pulumi.Input<inputs.PrivilegePrivilege>[]>;
    /**
     * A list of role IDs for whom the role applies.
     */
    roleIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * A list of user IDs for whom the privilege applies.
     */
    userIds?: pulumi.Input<pulumi.Input<number>[]>;
}
