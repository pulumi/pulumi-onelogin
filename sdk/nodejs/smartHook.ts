// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Manage SmartHook resources.
 *
 * This resource allows you to create and configure SmartHooks.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as onelogin from "@pulumi/onelogin";
 *
 * const basicTest = new onelogin.SmartHook("basic_test", {
 *     disabled: false,
 *     envVars: ["API_KEY"],
 *     function: "CQlmdW5jdGlvbiBteUZ1bmMoKSB7CgkJCWxldCBhID0gMTsKCQkJbGV0IGIgPSAxOwoJCQlsZXQgYyA9IGEgKyBiOwoJCSAgY29uc29sZS5sb2coIkRpbmcgRG9uZyIsIGEsIGIsIGMpOwoJCX0K",
 *     options: [{
 *         locationEnabled: false,
 *         riskEnabled: false,
 *     }],
 *     packages: {
 *         mysql: "^2.18.1",
 *     },
 *     retries: 0,
 *     timeout: 2,
 *     type: "pre-authentication",
 * });
 * ```
 *
 * ## Import
 *
 * A SmartHook can be imported via the OneLogin SmartHook.
 *
 * ```sh
 *  $ pulumi import onelogin:index/smartHook:SmartHook example <smarthook_id>
 * ```
 */
export class SmartHook extends pulumi.CustomResource {
    /**
     * Get an existing SmartHook resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SmartHookState, opts?: pulumi.CustomResourceOptions): SmartHook {
        return new SmartHook(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'onelogin:index/smartHook:SmartHook';

    /**
     * Returns true if the given object is an instance of SmartHook.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SmartHook {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SmartHook.__pulumiType;
    }

    public readonly conditions!: pulumi.Output<outputs.SmartHookCondition[] | undefined>;
    public readonly contextVersion!: pulumi.Output<string>;
    /**
     * Timestamp for smarthook's last update
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Indicates if function is available for execution or not. Default true
     */
    public readonly disabled!: pulumi.Output<boolean>;
    /**
     * An array of predefined environment variables to be supplied to the function at runtime.
     */
    public readonly envVars!: pulumi.Output<string[]>;
    /**
     * A base64 encoded blob, or Heredoc string containing the javascript function code.
     */
    public readonly function!: pulumi.Output<string>;
    /**
     * A list of options for the hook
     */
    public readonly options!: pulumi.Output<outputs.SmartHookOption[] | undefined>;
    /**
     * A list of public npm packages than will be installed as part of the function build process. These packages names must be on our allowlist. See Node Modules section of this doc. Packages can be any version and support the semantic versioning syntax used by NPM.
     */
    public readonly packages!: pulumi.Output<{[key: string]: string}>;
    /**
     * Number of retries if execution fails. Default 0, Max 4
     */
    public readonly retries!: pulumi.Output<number>;
    public readonly runtime!: pulumi.Output<string>;
    /**
     * The smarthook's status.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The number of milliseconds to allow before timeout. Default 1000, Max 10000
     */
    public readonly timeout!: pulumi.Output<number>;
    /**
     * The name of the hook. Must be one of: `user-migration` `pre-authentication` `pre-user-create` `post-user-create` `pre-user-update` `post-user-update`
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Timestamp for smarthook's last update
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a SmartHook resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SmartHookArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SmartHookArgs | SmartHookState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SmartHookState | undefined;
            resourceInputs["conditions"] = state ? state.conditions : undefined;
            resourceInputs["contextVersion"] = state ? state.contextVersion : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["envVars"] = state ? state.envVars : undefined;
            resourceInputs["function"] = state ? state.function : undefined;
            resourceInputs["options"] = state ? state.options : undefined;
            resourceInputs["packages"] = state ? state.packages : undefined;
            resourceInputs["retries"] = state ? state.retries : undefined;
            resourceInputs["runtime"] = state ? state.runtime : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as SmartHookArgs | undefined;
            if ((!args || args.disabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'disabled'");
            }
            if ((!args || args.envVars === undefined) && !opts.urn) {
                throw new Error("Missing required property 'envVars'");
            }
            if ((!args || args.function === undefined) && !opts.urn) {
                throw new Error("Missing required property 'function'");
            }
            if ((!args || args.packages === undefined) && !opts.urn) {
                throw new Error("Missing required property 'packages'");
            }
            if ((!args || args.retries === undefined) && !opts.urn) {
                throw new Error("Missing required property 'retries'");
            }
            if ((!args || args.runtime === undefined) && !opts.urn) {
                throw new Error("Missing required property 'runtime'");
            }
            if ((!args || args.timeout === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timeout'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["conditions"] = args ? args.conditions : undefined;
            resourceInputs["contextVersion"] = args ? args.contextVersion : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["envVars"] = args ? args.envVars : undefined;
            resourceInputs["function"] = args ? args.function : undefined;
            resourceInputs["options"] = args ? args.options : undefined;
            resourceInputs["packages"] = args ? args.packages : undefined;
            resourceInputs["retries"] = args ? args.retries : undefined;
            resourceInputs["runtime"] = args ? args.runtime : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SmartHook.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SmartHook resources.
 */
export interface SmartHookState {
    conditions?: pulumi.Input<pulumi.Input<inputs.SmartHookCondition>[]>;
    contextVersion?: pulumi.Input<string>;
    /**
     * Timestamp for smarthook's last update
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Indicates if function is available for execution or not. Default true
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * An array of predefined environment variables to be supplied to the function at runtime.
     */
    envVars?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A base64 encoded blob, or Heredoc string containing the javascript function code.
     */
    function?: pulumi.Input<string>;
    /**
     * A list of options for the hook
     */
    options?: pulumi.Input<pulumi.Input<inputs.SmartHookOption>[]>;
    /**
     * A list of public npm packages than will be installed as part of the function build process. These packages names must be on our allowlist. See Node Modules section of this doc. Packages can be any version and support the semantic versioning syntax used by NPM.
     */
    packages?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Number of retries if execution fails. Default 0, Max 4
     */
    retries?: pulumi.Input<number>;
    runtime?: pulumi.Input<string>;
    /**
     * The smarthook's status.
     */
    status?: pulumi.Input<string>;
    /**
     * The number of milliseconds to allow before timeout. Default 1000, Max 10000
     */
    timeout?: pulumi.Input<number>;
    /**
     * The name of the hook. Must be one of: `user-migration` `pre-authentication` `pre-user-create` `post-user-create` `pre-user-update` `post-user-update`
     */
    type?: pulumi.Input<string>;
    /**
     * Timestamp for smarthook's last update
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SmartHook resource.
 */
export interface SmartHookArgs {
    conditions?: pulumi.Input<pulumi.Input<inputs.SmartHookCondition>[]>;
    contextVersion?: pulumi.Input<string>;
    /**
     * Indicates if function is available for execution or not. Default true
     */
    disabled: pulumi.Input<boolean>;
    /**
     * An array of predefined environment variables to be supplied to the function at runtime.
     */
    envVars: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A base64 encoded blob, or Heredoc string containing the javascript function code.
     */
    function: pulumi.Input<string>;
    /**
     * A list of options for the hook
     */
    options?: pulumi.Input<pulumi.Input<inputs.SmartHookOption>[]>;
    /**
     * A list of public npm packages than will be installed as part of the function build process. These packages names must be on our allowlist. See Node Modules section of this doc. Packages can be any version and support the semantic versioning syntax used by NPM.
     */
    packages: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Number of retries if execution fails. Default 0, Max 4
     */
    retries: pulumi.Input<number>;
    runtime: pulumi.Input<string>;
    /**
     * The number of milliseconds to allow before timeout. Default 1000, Max 10000
     */
    timeout: pulumi.Input<number>;
    /**
     * The name of the hook. Must be one of: `user-migration` `pre-authentication` `pre-user-create` `post-user-create` `pre-user-update` `post-user-update`
     */
    type: pulumi.Input<string>;
}
