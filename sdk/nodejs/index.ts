// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AppArgs, AppState } from "./app";
export type App = import("./app").App;
export const App: typeof import("./app").App = null as any;
utilities.lazyLoad(exports, ["App"], () => require("./app"));

export { AuthServersArgs, AuthServersState } from "./authServers";
export type AuthServers = import("./authServers").AuthServers;
export const AuthServers: typeof import("./authServers").AuthServers = null as any;
utilities.lazyLoad(exports, ["AuthServers"], () => require("./authServers"));

export { GetAppsArgs, GetAppsResult, GetAppsOutputArgs } from "./getApps";
export const getApps: typeof import("./getApps").getApps = null as any;
export const getAppsOutput: typeof import("./getApps").getAppsOutput = null as any;
utilities.lazyLoad(exports, ["getApps","getAppsOutput"], () => require("./getApps"));

export { GetAuthServersArgs, GetAuthServersResult, GetAuthServersOutputArgs } from "./getAuthServers";
export const getAuthServers: typeof import("./getAuthServers").getAuthServers = null as any;
export const getAuthServersOutput: typeof import("./getAuthServers").getAuthServersOutput = null as any;
utilities.lazyLoad(exports, ["getAuthServers","getAuthServersOutput"], () => require("./getAuthServers"));

export { GetAuthServersClaimsArgs, GetAuthServersClaimsResult, GetAuthServersClaimsOutputArgs } from "./getAuthServersClaims";
export const getAuthServersClaims: typeof import("./getAuthServersClaims").getAuthServersClaims = null as any;
export const getAuthServersClaimsOutput: typeof import("./getAuthServersClaims").getAuthServersClaimsOutput = null as any;
utilities.lazyLoad(exports, ["getAuthServersClaims","getAuthServersClaimsOutput"], () => require("./getAuthServersClaims"));

export { GetAuthServersInstanceArgs, GetAuthServersInstanceResult, GetAuthServersInstanceOutputArgs } from "./getAuthServersInstance";
export const getAuthServersInstance: typeof import("./getAuthServersInstance").getAuthServersInstance = null as any;
export const getAuthServersInstanceOutput: typeof import("./getAuthServersInstance").getAuthServersInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getAuthServersInstance","getAuthServersInstanceOutput"], () => require("./getAuthServersInstance"));

export { GetAuthServersScopesArgs, GetAuthServersScopesResult, GetAuthServersScopesOutputArgs } from "./getAuthServersScopes";
export const getAuthServersScopes: typeof import("./getAuthServersScopes").getAuthServersScopes = null as any;
export const getAuthServersScopesOutput: typeof import("./getAuthServersScopes").getAuthServersScopesOutput = null as any;
utilities.lazyLoad(exports, ["getAuthServersScopes","getAuthServersScopesOutput"], () => require("./getAuthServersScopes"));

export { GetMappingsArgs, GetMappingsResult, GetMappingsOutputArgs } from "./getMappings";
export const getMappings: typeof import("./getMappings").getMappings = null as any;
export const getMappingsOutput: typeof import("./getMappings").getMappingsOutput = null as any;
utilities.lazyLoad(exports, ["getMappings","getMappingsOutput"], () => require("./getMappings"));

export { GetPrivilegesArgs, GetPrivilegesResult, GetPrivilegesOutputArgs } from "./getPrivileges";
export const getPrivileges: typeof import("./getPrivileges").getPrivileges = null as any;
export const getPrivilegesOutput: typeof import("./getPrivileges").getPrivilegesOutput = null as any;
utilities.lazyLoad(exports, ["getPrivileges","getPrivilegesOutput"], () => require("./getPrivileges"));

export { GetPrivilegesInstanceArgs, GetPrivilegesInstanceResult, GetPrivilegesInstanceOutputArgs } from "./getPrivilegesInstance";
export const getPrivilegesInstance: typeof import("./getPrivilegesInstance").getPrivilegesInstance = null as any;
export const getPrivilegesInstanceOutput: typeof import("./getPrivilegesInstance").getPrivilegesInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getPrivilegesInstance","getPrivilegesInstanceOutput"], () => require("./getPrivilegesInstance"));

export { GetRiskRulesArgs, GetRiskRulesResult, GetRiskRulesOutputArgs } from "./getRiskRules";
export const getRiskRules: typeof import("./getRiskRules").getRiskRules = null as any;
export const getRiskRulesOutput: typeof import("./getRiskRules").getRiskRulesOutput = null as any;
utilities.lazyLoad(exports, ["getRiskRules","getRiskRulesOutput"], () => require("./getRiskRules"));

export { GetRiskRulesInstanceArgs, GetRiskRulesInstanceResult, GetRiskRulesInstanceOutputArgs } from "./getRiskRulesInstance";
export const getRiskRulesInstance: typeof import("./getRiskRulesInstance").getRiskRulesInstance = null as any;
export const getRiskRulesInstanceOutput: typeof import("./getRiskRulesInstance").getRiskRulesInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getRiskRulesInstance","getRiskRulesInstanceOutput"], () => require("./getRiskRulesInstance"));

export { PrivilegesArgs, PrivilegesState } from "./privileges";
export type Privileges = import("./privileges").Privileges;
export const Privileges: typeof import("./privileges").Privileges = null as any;
utilities.lazyLoad(exports, ["Privileges"], () => require("./privileges"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RiskRulesArgs, RiskRulesState } from "./riskRules";
export type RiskRules = import("./riskRules").RiskRules;
export const RiskRules: typeof import("./riskRules").RiskRules = null as any;
utilities.lazyLoad(exports, ["RiskRules"], () => require("./riskRules"));

export { RoleArgs, RoleState } from "./role";
export type Role = import("./role").Role;
export const Role: typeof import("./role").Role = null as any;
utilities.lazyLoad(exports, ["Role"], () => require("./role"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));


// Export sub-modules:
import * as apps from "./apps";
import * as config from "./config";
import * as roles from "./roles";
import * as types from "./types";
import * as users from "./users";

export {
    apps,
    config,
    roles,
    types,
    users,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "onelogin:index/app:App":
                return new App(name, <any>undefined, { urn })
            case "onelogin:index/authServers:AuthServers":
                return new AuthServers(name, <any>undefined, { urn })
            case "onelogin:index/privileges:Privileges":
                return new Privileges(name, <any>undefined, { urn })
            case "onelogin:index/riskRules:RiskRules":
                return new RiskRules(name, <any>undefined, { urn })
            case "onelogin:index/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "onelogin:index/user:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("onelogin", "index/app", _module)
pulumi.runtime.registerResourceModule("onelogin", "index/authServers", _module)
pulumi.runtime.registerResourceModule("onelogin", "index/privileges", _module)
pulumi.runtime.registerResourceModule("onelogin", "index/riskRules", _module)
pulumi.runtime.registerResourceModule("onelogin", "index/role", _module)
pulumi.runtime.registerResourceModule("onelogin", "index/user", _module)
pulumi.runtime.registerResourcePackage("onelogin", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:onelogin") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
