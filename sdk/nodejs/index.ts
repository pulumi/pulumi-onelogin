// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AppArgs, AppState } from "./app";
export type App = import("./app").App;
export const App: typeof import("./app").App = null as any;
utilities.lazyLoad(exports, ["App"], () => require("./app"));

export { GetAppsArgs, GetAppsResult, GetAppsOutputArgs } from "./getApps";
export const getApps: typeof import("./getApps").getApps = null as any;
export const getAppsOutput: typeof import("./getApps").getAppsOutput = null as any;
utilities.lazyLoad(exports, ["getApps","getAppsOutput"], () => require("./getApps"));

export { GetBrandsArgs, GetBrandsResult, GetBrandsOutputArgs } from "./getBrands";
export const getBrands: typeof import("./getBrands").getBrands = null as any;
export const getBrandsOutput: typeof import("./getBrands").getBrandsOutput = null as any;
utilities.lazyLoad(exports, ["getBrands","getBrandsOutput"], () => require("./getBrands"));

export { GetBrandsAppsArgs, GetBrandsAppsResult, GetBrandsAppsOutputArgs } from "./getBrandsApps";
export const getBrandsApps: typeof import("./getBrandsApps").getBrandsApps = null as any;
export const getBrandsAppsOutput: typeof import("./getBrandsApps").getBrandsAppsOutput = null as any;
utilities.lazyLoad(exports, ["getBrandsApps","getBrandsAppsOutput"], () => require("./getBrandsApps"));

export { GetBrandsTemplatesArgs, GetBrandsTemplatesResult, GetBrandsTemplatesOutputArgs } from "./getBrandsTemplates";
export const getBrandsTemplates: typeof import("./getBrandsTemplates").getBrandsTemplates = null as any;
export const getBrandsTemplatesOutput: typeof import("./getBrandsTemplates").getBrandsTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getBrandsTemplates","getBrandsTemplatesOutput"], () => require("./getBrandsTemplates"));

export { GetMappingsArgs, GetMappingsResult, GetMappingsOutputArgs } from "./getMappings";
export const getMappings: typeof import("./getMappings").getMappings = null as any;
export const getMappingsOutput: typeof import("./getMappings").getMappingsOutput = null as any;
utilities.lazyLoad(exports, ["getMappings","getMappingsOutput"], () => require("./getMappings"));

export { GetPrivilegesArgs, GetPrivilegesResult, GetPrivilegesOutputArgs } from "./getPrivileges";
export const getPrivileges: typeof import("./getPrivileges").getPrivileges = null as any;
export const getPrivilegesOutput: typeof import("./getPrivileges").getPrivilegesOutput = null as any;
utilities.lazyLoad(exports, ["getPrivileges","getPrivilegesOutput"], () => require("./getPrivileges"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RuleArgs, RuleState } from "./rule";
export type Rule = import("./rule").Rule;
export const Rule: typeof import("./rule").Rule = null as any;
utilities.lazyLoad(exports, ["Rule"], () => require("./rule"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));


// Export sub-modules:
import * as api from "./api";
import * as apps from "./apps";
import * as config from "./config";
import * as roles from "./roles";
import * as rules from "./rules";
import * as types from "./types";
import * as users from "./users";

export {
    api,
    apps,
    config,
    roles,
    rules,
    types,
    users,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "onelogin:index/app:App":
                return new App(name, <any>undefined, { urn })
            case "onelogin:index/rule:Rule":
                return new Rule(name, <any>undefined, { urn })
            case "onelogin:index/user:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("onelogin", "index/app", _module)
pulumi.runtime.registerResourceModule("onelogin", "index/rule", _module)
pulumi.runtime.registerResourceModule("onelogin", "index/user", _module)
pulumi.runtime.registerResourcePackage("onelogin", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:onelogin") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
