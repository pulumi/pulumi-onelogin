// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AppConfiguration {
    accessTokenExpirationMinutes?: number;
    loginUrl?: string;
    oidcApiVersion: string;
    oidcApplicationType?: number;
    oidcEncryptionKey?: string;
    postLogoutRedirectUri?: string;
    redirectUri?: string;
    refreshTokenExpirationMinutes?: number;
    tokenEndpointAuthMethod?: number;
}

export interface AppEnforcementPoint {
    caseSensitive?: boolean;
    conditions?: string;
    contextRoot?: string;
    landingPage?: string;
    permissions?: string;
    requireSitewideAuthentication?: boolean;
    resources?: outputs.AppEnforcementPointResource[];
    sessionExpiryFixed?: outputs.AppEnforcementPointSessionExpiryFixed;
    sessionExpiryInactivity?: outputs.AppEnforcementPointSessionExpiryInactivity;
    target?: string;
    token: string;
    useTargetHostHeader?: boolean;
    vhost?: string;
}

export interface AppEnforcementPointResource {
    conditions?: string;
    isPathRegex?: boolean;
    path?: string;
    permission?: string;
    requireAuth?: boolean;
}

export interface AppEnforcementPointSessionExpiryFixed {
    unit?: number;
    value?: number;
}

export interface AppEnforcementPointSessionExpiryInactivity {
    unit?: number;
    value?: number;
}

export interface AppParameters {
    groups?: outputs.AppParametersGroups;
}

export interface AppParametersGroups {
    attributesTransformations?: string;
    defaultValues?: string;
    id?: number;
    label?: string;
    provisionedEntitlements?: boolean;
    skipIfBlank?: boolean;
    userAttributeMacros?: string;
    userAttributeMappings?: string;
    values?: string;
}

export interface AppProvisioning {
    enabled?: boolean;
    status: string;
}

export interface AppSso {
    acsUrl: string;
    certificate: outputs.AppSsoCertificate;
    clientId: string;
    clientSecret: string;
    issuer: string;
    metadataUrl: string;
}

export interface AppSsoCertificate {
    id?: number;
    name?: string;
    value?: string;
}

export interface AuthServersConfiguration {
    accessTokenExpirationMinutes?: number;
    audiences: string[];
    refreshTokenExpirationMinutes?: number;
    resourceIdentifier: string;
}

export interface GetAppsConfiguration {
    accessTokenExpirationMinutes: number;
    loginUrl: string;
    oidcApiVersion: string;
    oidcApplicationType: number;
    oidcEncryptionKey: string;
    postLogoutRedirectUri: string;
    redirectUri: string;
    refreshTokenExpirationMinutes: number;
    tokenEndpointAuthMethod: number;
}

export interface GetAppsEnforcementPoint {
    caseSensitive: boolean;
    conditions: string;
    contextRoot: string;
    landingPage: string;
    permissions: string;
    requireSitewideAuthentication: boolean;
    resources: outputs.GetAppsEnforcementPointResource[];
    sessionExpiryFixed: outputs.GetAppsEnforcementPointSessionExpiryFixed;
    sessionExpiryInactivity: outputs.GetAppsEnforcementPointSessionExpiryInactivity;
    target: string;
    token: string;
    useTargetHostHeader: boolean;
    vhost: string;
}

export interface GetAppsEnforcementPointResource {
    conditions: string;
    isPathRegex: boolean;
    path: string;
    permission: string;
    requireAuth: boolean;
}

export interface GetAppsEnforcementPointSessionExpiryFixed {
    unit: number;
    value: number;
}

export interface GetAppsEnforcementPointSessionExpiryInactivity {
    unit: number;
    value: number;
}

export interface GetAppsFilter {
    name: string;
    values: string[];
}

export interface GetAppsParameters {
    groups: outputs.GetAppsParametersGroups;
}

export interface GetAppsParametersGroups {
    attributesTransformations: string;
    defaultValues: string;
    id: number;
    label: string;
    provisionedEntitlements: boolean;
    skipIfBlank: boolean;
    userAttributeMacros: string;
    userAttributeMappings: string;
    values: string;
}

export interface GetAppsProvisioning {
    enabled: boolean;
    status: string;
}

export interface GetAppsSso {
    acsUrl: string;
    certificate: outputs.GetAppsSsoCertificate;
    clientId: string;
    clientSecret: string;
    issuer: string;
    metadataUrl: string;
}

export interface GetAppsSsoCertificate {
    id: number;
    name: string;
    value: string;
}

export interface GetAuthServersClaimsFilter {
    name: string;
    values: string[];
}

export interface GetAuthServersConfiguration {
    accessTokenExpirationMinutes: number;
    audiences: string[];
    refreshTokenExpirationMinutes: number;
    resourceIdentifier: string;
}

export interface GetAuthServersFilter {
    name: string;
    values: string[];
}

export interface GetAuthServersInstanceConfiguration {
    accessTokenExpirationMinutes: number;
    audiences: string[];
    refreshTokenExpirationMinutes: number;
    resourceIdentifier: string;
}

export interface GetAuthServersScopesFilter {
    name: string;
    values: string[];
}

export interface GetMappingsAction {
    action: string;
    values: string[];
}

export interface GetMappingsCondition {
    operator: string;
    source: string;
    value: string;
}

export interface GetMappingsFilter {
    name: string;
    values: string[];
}

export interface GetPrivilegesFilter {
    name: string;
    values: string[];
}

export interface GetPrivilegesInstancePrivilege {
    statements: outputs.GetPrivilegesInstancePrivilegeStatement[];
    version: string;
}

export interface GetPrivilegesInstancePrivilegeStatement {
    actions: string[];
    effect: string;
    scopes: string[];
}

export interface GetPrivilegesPrivilege {
    statements: outputs.GetPrivilegesPrivilegeStatement[];
    version: string;
}

export interface GetPrivilegesPrivilegeStatement {
    actions: string[];
    effect: string;
    scopes: string[];
}

export interface GetRiskRulesFilter {
    name: string;
    values: string[];
}

export interface GetRiskRulesInstanceSource {
    id: string;
    name: string;
}

export interface GetRiskRulesSource {
    id: string;
    name: string;
}

export interface PrivilegesPrivilege {
    statements?: outputs.PrivilegesPrivilegeStatement[];
    version?: string;
}

export interface PrivilegesPrivilegeStatement {
    actions: string[];
    effect: string;
    scopes: string[];
}

export interface RiskRulesSource {
    id?: string;
    name?: string;
}

export namespace apps {
    export interface GetActionsFilter {
        name: string;
        values: string[];
    }

    export interface GetActionsValuesFilter {
        name: string;
        values: string[];
    }

    export interface GetConditionsFilter {
        name: string;
        values: string[];
    }

    export interface GetConditionsOperatorsFilter {
        name: string;
        values: string[];
    }

    export interface GetInstanceConfiguration {
        accessTokenExpirationMinutes: number;
        loginUrl: string;
        oidcApiVersion: string;
        oidcApplicationType: number;
        oidcEncryptionKey: string;
        postLogoutRedirectUri: string;
        redirectUri: string;
        refreshTokenExpirationMinutes: number;
        tokenEndpointAuthMethod: number;
    }

    export interface GetInstanceEnforcementPoint {
        caseSensitive: boolean;
        conditions: string;
        contextRoot: string;
        landingPage: string;
        permissions: string;
        requireSitewideAuthentication: boolean;
        resources: outputs.apps.GetInstanceEnforcementPointResource[];
        sessionExpiryFixed: outputs.apps.GetInstanceEnforcementPointSessionExpiryFixed;
        sessionExpiryInactivity: outputs.apps.GetInstanceEnforcementPointSessionExpiryInactivity;
        target: string;
        token: string;
        useTargetHostHeader: boolean;
        vhost: string;
    }

    export interface GetInstanceEnforcementPointResource {
        conditions: string;
        isPathRegex: boolean;
        path: string;
        permission: string;
        requireAuth: boolean;
    }

    export interface GetInstanceEnforcementPointSessionExpiryFixed {
        unit: number;
        value: number;
    }

    export interface GetInstanceEnforcementPointSessionExpiryInactivity {
        unit: number;
        value: number;
    }

    export interface GetInstanceParameters {
        groups: outputs.apps.GetInstanceParametersGroups;
    }

    export interface GetInstanceParametersGroups {
        attributesTransformations: string;
        defaultValues: string;
        id: number;
        label: string;
        provisionedEntitlements: boolean;
        skipIfBlank: boolean;
        userAttributeMacros: string;
        userAttributeMappings: string;
        values: string;
    }

    export interface GetInstanceProvisioning {
        enabled: boolean;
        status: string;
    }

    export interface GetInstanceSso {
        acsUrl: string;
        certificate: outputs.apps.GetInstanceSsoCertificate;
        clientId: string;
        clientSecret: string;
        issuer: string;
        metadataUrl: string;
    }

    export interface GetInstanceSsoCertificate {
        id: number;
        name: string;
        value: string;
    }

    export interface GetRulesAction {
        action: string;
        values: string[];
    }

    export interface GetRulesCondition {
        operator: string;
        source: string;
        value: string;
    }

    export interface GetRulesFilter {
        name: string;
        values: string[];
    }

    export interface GetRulesInstanceAction {
        action: string;
        values: string[];
    }

    export interface GetRulesInstanceCondition {
        operator: string;
        source: string;
        value: string;
    }

    export interface GetUsersFilter {
        name: string;
        values: string[];
    }

    export interface RulesAction {
        action?: string;
        values?: string[];
    }

    export interface RulesCondition {
        operator?: string;
        source?: string;
        value?: string;
    }

}

export namespace config {
    export interface Endpoints {
        apps?: string;
        appsRules?: string;
        authServers?: string;
        privileges?: string;
        riskRules?: string;
        roles?: string;
        users?: string;
        usersV1?: string;
    }

}

export namespace roles {
    export interface GetAdminsFilter {
        name: string;
        values: string[];
    }

    export interface GetAppsFilter {
        name: string;
        values: string[];
    }

    export interface GetRolesFilter {
        name: string;
        values: string[];
    }

    export interface GetUsersFilter {
        name: string;
        values: string[];
    }

}

export namespace users {
    export interface GetAppsFilter {
        name: string;
        values: string[];
    }

    export interface GetDevicesFilter {
        name: string;
        values: string[];
    }

    export interface GetUsersFilter {
        name: string;
        values: string[];
    }

    export interface GetV1AppsFilter {
        name: string;
        values: string[];
    }

    export interface GetV1Filter {
        name: string;
        values: string[];
    }

}
