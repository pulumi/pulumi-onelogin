// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class App extends pulumi.CustomResource {
    /**
     * Get an existing App resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppState, opts?: pulumi.CustomResourceOptions): App {
        return new App(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'onelogin:index/app:App';

    /**
     * Returns true if the given object is an instance of App.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is App {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === App.__pulumiType;
    }

    /**
     * Indicates whether or not administrators can access the app as a user that they have assumed control over.
     */
    public readonly allowAssumedSignin!: pulumi.Output<boolean | undefined>;
    /**
     * An ID indicating the type of app.
     */
    public readonly authMethod!: pulumi.Output<number | undefined>;
    /**
     * The custom login page branding to use for this app. Applies to app initiated logins via OIDC or SAML.
     */
    public readonly brandId!: pulumi.Output<number | undefined>;
    /**
     * ID of the apps underlying connector.
     */
    public readonly connectorId!: pulumi.Output<number | undefined>;
    /**
     * The date the app was created.
     */
    public readonly createdAt!: pulumi.Output<string | undefined>;
    /**
     * Freeform description of the app.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * A link to the apps icon url.
     */
    public readonly iconUrl!: pulumi.Output<string | undefined>;
    /**
     * App name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Freeform notes about the app.
     */
    public readonly notes!: pulumi.Output<string | undefined>;
    /**
     * The security policy assigned to the app.
     */
    public readonly policyId!: pulumi.Output<number | undefined>;
    public readonly provisioning!: pulumi.Output<outputs.AppProvisioning | undefined>;
    /**
     * A list of OneLogin Role IDs of the user
     */
    public readonly roleIds!: pulumi.Output<number[] | undefined>;
    /**
     * ID of the OneLogin portal tab that the app is assigned to.
     */
    public readonly tabId!: pulumi.Output<number | undefined>;
    /**
     * The date the app was last updated.
     */
    public readonly updatedAt!: pulumi.Output<string | undefined>;
    /**
     * Indicates if the app is visible in the OneLogin portal.
     */
    public readonly visible!: pulumi.Output<boolean | undefined>;

    /**
     * Create a App resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AppArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppArgs | AppState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppState | undefined;
            resourceInputs["allowAssumedSignin"] = state ? state.allowAssumedSignin : undefined;
            resourceInputs["authMethod"] = state ? state.authMethod : undefined;
            resourceInputs["brandId"] = state ? state.brandId : undefined;
            resourceInputs["connectorId"] = state ? state.connectorId : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["iconUrl"] = state ? state.iconUrl : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notes"] = state ? state.notes : undefined;
            resourceInputs["policyId"] = state ? state.policyId : undefined;
            resourceInputs["provisioning"] = state ? state.provisioning : undefined;
            resourceInputs["roleIds"] = state ? state.roleIds : undefined;
            resourceInputs["tabId"] = state ? state.tabId : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["visible"] = state ? state.visible : undefined;
        } else {
            const args = argsOrState as AppArgs | undefined;
            resourceInputs["allowAssumedSignin"] = args ? args.allowAssumedSignin : undefined;
            resourceInputs["authMethod"] = args ? args.authMethod : undefined;
            resourceInputs["brandId"] = args ? args.brandId : undefined;
            resourceInputs["connectorId"] = args ? args.connectorId : undefined;
            resourceInputs["createdAt"] = args ? args.createdAt : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["iconUrl"] = args ? args.iconUrl : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notes"] = args ? args.notes : undefined;
            resourceInputs["policyId"] = args ? args.policyId : undefined;
            resourceInputs["provisioning"] = args ? args.provisioning : undefined;
            resourceInputs["roleIds"] = args ? args.roleIds : undefined;
            resourceInputs["tabId"] = args ? args.tabId : undefined;
            resourceInputs["updatedAt"] = args ? args.updatedAt : undefined;
            resourceInputs["visible"] = args ? args.visible : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(App.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering App resources.
 */
export interface AppState {
    /**
     * Indicates whether or not administrators can access the app as a user that they have assumed control over.
     */
    allowAssumedSignin?: pulumi.Input<boolean>;
    /**
     * An ID indicating the type of app.
     */
    authMethod?: pulumi.Input<number>;
    /**
     * The custom login page branding to use for this app. Applies to app initiated logins via OIDC or SAML.
     */
    brandId?: pulumi.Input<number>;
    /**
     * ID of the apps underlying connector.
     */
    connectorId?: pulumi.Input<number>;
    /**
     * The date the app was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Freeform description of the app.
     */
    description?: pulumi.Input<string>;
    /**
     * A link to the apps icon url.
     */
    iconUrl?: pulumi.Input<string>;
    /**
     * App name.
     */
    name?: pulumi.Input<string>;
    /**
     * Freeform notes about the app.
     */
    notes?: pulumi.Input<string>;
    /**
     * The security policy assigned to the app.
     */
    policyId?: pulumi.Input<number>;
    provisioning?: pulumi.Input<inputs.AppProvisioning>;
    /**
     * A list of OneLogin Role IDs of the user
     */
    roleIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * ID of the OneLogin portal tab that the app is assigned to.
     */
    tabId?: pulumi.Input<number>;
    /**
     * The date the app was last updated.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * Indicates if the app is visible in the OneLogin portal.
     */
    visible?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a App resource.
 */
export interface AppArgs {
    /**
     * Indicates whether or not administrators can access the app as a user that they have assumed control over.
     */
    allowAssumedSignin?: pulumi.Input<boolean>;
    /**
     * An ID indicating the type of app.
     */
    authMethod?: pulumi.Input<number>;
    /**
     * The custom login page branding to use for this app. Applies to app initiated logins via OIDC or SAML.
     */
    brandId?: pulumi.Input<number>;
    /**
     * ID of the apps underlying connector.
     */
    connectorId?: pulumi.Input<number>;
    /**
     * The date the app was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Freeform description of the app.
     */
    description?: pulumi.Input<string>;
    /**
     * A link to the apps icon url.
     */
    iconUrl?: pulumi.Input<string>;
    /**
     * App name.
     */
    name?: pulumi.Input<string>;
    /**
     * Freeform notes about the app.
     */
    notes?: pulumi.Input<string>;
    /**
     * The security policy assigned to the app.
     */
    policyId?: pulumi.Input<number>;
    provisioning?: pulumi.Input<inputs.AppProvisioning>;
    /**
     * A list of OneLogin Role IDs of the user
     */
    roleIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * ID of the OneLogin portal tab that the app is assigned to.
     */
    tabId?: pulumi.Input<number>;
    /**
     * The date the app was last updated.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * Indicates if the app is visible in the OneLogin portal.
     */
    visible?: pulumi.Input<boolean>;
}
