// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Onelogin
{
    public static class GetUser
    {
        /// <summary>
        /// Returns User resource.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Onelogin = Pulumi.Onelogin;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Onelogin.GetUser.InvokeAsync(new Onelogin.GetUserArgs
        ///         {
        ///             Username = "timmy.tester",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetUserResult> InvokeAsync(GetUserArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetUserResult>("onelogin:index/getUser:getUser", args ?? new GetUserArgs(), options.WithDefaults());

        /// <summary>
        /// Returns User resource.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Onelogin = Pulumi.Onelogin;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Onelogin.GetUser.InvokeAsync(new Onelogin.GetUserArgs
        ///         {
        ///             Username = "timmy.tester",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetUserResult> Invoke(GetUserInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetUserResult>("onelogin:index/getUser:getUser", args ?? new GetUserInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUserArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The user's external_id
        /// </summary>
        [Input("externalId")]
        public int? ExternalId { get; set; }

        /// <summary>
        /// The user's ID.
        /// </summary>
        [Input("userId")]
        public string? UserId { get; set; }

        /// <summary>
        /// The user's username.
        /// </summary>
        [Input("username")]
        public string? Username { get; set; }

        public GetUserArgs()
        {
        }
    }

    public sealed class GetUserInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The user's external_id
        /// </summary>
        [Input("externalId")]
        public Input<int>? ExternalId { get; set; }

        /// <summary>
        /// The user's ID.
        /// </summary>
        [Input("userId")]
        public Input<string>? UserId { get; set; }

        /// <summary>
        /// The user's username.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public GetUserInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetUserResult
    {
        /// <summary>
        /// A comment about the user
        /// </summary>
        public readonly string Comment;
        /// <summary>
        /// The user's company
        /// </summary>
        public readonly string Company;
        public readonly ImmutableDictionary<string, string> CustomAttributes;
        /// <summary>
        /// The user's department
        /// </summary>
        public readonly string Department;
        /// <summary>
        /// The user's directory_id
        /// </summary>
        public readonly int DirectoryId;
        /// <summary>
        /// The user's distinguished name
        /// </summary>
        public readonly string DistinguishedName;
        /// <summary>
        /// The user's email.
        /// </summary>
        public readonly string Email;
        /// <summary>
        /// The user's external_id
        /// </summary>
        public readonly int ExternalId;
        /// <summary>
        /// The user's first name
        /// </summary>
        public readonly string Firstname;
        /// <summary>
        /// The user's group_id
        /// </summary>
        public readonly int GroupId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The user's last name
        /// </summary>
        public readonly string Lastname;
        /// <summary>
        /// The user's manager_ad_id
        /// </summary>
        public readonly int ManagerAdId;
        /// <summary>
        /// The user's manager_user_id
        /// </summary>
        public readonly int ManagerUserId;
        /// <summary>
        /// The user's member_of
        /// </summary>
        public readonly string MemberOf;
        /// <summary>
        /// The user's phone number
        /// </summary>
        public readonly string Phone;
        /// <summary>
        /// The user's samaccount name
        /// </summary>
        public readonly string Samaccountname;
        /// <summary>
        /// The user's state. Must be one of `0: Unapproved` `1: Approved` `2: Rejected` `3: Unlicensed`
        /// </summary>
        public readonly int State;
        /// <summary>
        /// The user's status. Must be one of `0: Unactivated` `1: Active` `2: Suspended` `3: Locked` `4: Password expired` `5: Awaiting password reset` `7: Password Pending` `8: Security questions required`
        /// </summary>
        public readonly int Status;
        /// <summary>
        /// The user's title
        /// </summary>
        public readonly string Title;
        /// <summary>
        /// The user's trusted_idp_id
        /// </summary>
        public readonly int TrustedIdpId;
        public readonly string? UserId;
        public readonly string Username;
        /// <summary>
        /// The user's user principal name
        /// </summary>
        public readonly string Userprincipalname;

        [OutputConstructor]
        private GetUserResult(
            string comment,

            string company,

            ImmutableDictionary<string, string> customAttributes,

            string department,

            int directoryId,

            string distinguishedName,

            string email,

            int externalId,

            string firstname,

            int groupId,

            string id,

            string lastname,

            int managerAdId,

            int managerUserId,

            string memberOf,

            string phone,

            string samaccountname,

            int state,

            int status,

            string title,

            int trustedIdpId,

            string? userId,

            string username,

            string userprincipalname)
        {
            Comment = comment;
            Company = company;
            CustomAttributes = customAttributes;
            Department = department;
            DirectoryId = directoryId;
            DistinguishedName = distinguishedName;
            Email = email;
            ExternalId = externalId;
            Firstname = firstname;
            GroupId = groupId;
            Id = id;
            Lastname = lastname;
            ManagerAdId = managerAdId;
            ManagerUserId = managerUserId;
            MemberOf = memberOf;
            Phone = phone;
            Samaccountname = samaccountname;
            State = state;
            Status = status;
            Title = title;
            TrustedIdpId = trustedIdpId;
            UserId = userId;
            Username = username;
            Userprincipalname = userprincipalname;
        }
    }
}
