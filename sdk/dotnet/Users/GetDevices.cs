// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Onelogin.Users
{
    public static class GetDevices
    {
        public static Task<GetDevicesResult> InvokeAsync(GetDevicesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDevicesResult>("onelogin:users/getDevices:getDevices", args ?? new GetDevicesArgs(), options.WithDefaults());

        public static Output<GetDevicesResult> Invoke(GetDevicesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDevicesResult>("onelogin:users/getDevices:getDevices", args ?? new GetDevicesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDevicesArgs : global::Pulumi.InvokeArgs
    {
        [Input("authFactorName")]
        public string? AuthFactorName { get; set; }

        [Input("default")]
        public bool? Default { get; set; }

        [Input("deviceId")]
        public string? DeviceId { get; set; }

        [Input("filters")]
        private List<Inputs.GetDevicesFilterArgs>? _filters;
        public List<Inputs.GetDevicesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetDevicesFilterArgs>());
            set => _filters = value;
        }

        [Input("typeDisplayName")]
        public string? TypeDisplayName { get; set; }

        [Input("userDisplayName")]
        public string? UserDisplayName { get; set; }

        [Input("usersId", required: true)]
        public string UsersId { get; set; } = null!;

        public GetDevicesArgs()
        {
        }
        public static new GetDevicesArgs Empty => new GetDevicesArgs();
    }

    public sealed class GetDevicesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("authFactorName")]
        public Input<string>? AuthFactorName { get; set; }

        [Input("default")]
        public Input<bool>? Default { get; set; }

        [Input("deviceId")]
        public Input<string>? DeviceId { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetDevicesFilterInputArgs>? _filters;
        public InputList<Inputs.GetDevicesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetDevicesFilterInputArgs>());
            set => _filters = value;
        }

        [Input("typeDisplayName")]
        public Input<string>? TypeDisplayName { get; set; }

        [Input("userDisplayName")]
        public Input<string>? UserDisplayName { get; set; }

        [Input("usersId", required: true)]
        public Input<string> UsersId { get; set; } = null!;

        public GetDevicesInvokeArgs()
        {
        }
        public static new GetDevicesInvokeArgs Empty => new GetDevicesInvokeArgs();
    }


    [OutputType]
    public sealed class GetDevicesResult
    {
        public readonly string AuthFactorName;
        public readonly bool Default;
        public readonly string DeviceId;
        public readonly ImmutableArray<Outputs.GetDevicesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string TypeDisplayName;
        public readonly string UserDisplayName;
        public readonly string UsersId;

        [OutputConstructor]
        private GetDevicesResult(
            string authFactorName,

            bool @default,

            string deviceId,

            ImmutableArray<Outputs.GetDevicesFilterResult> filters,

            string id,

            string typeDisplayName,

            string userDisplayName,

            string usersId)
        {
            AuthFactorName = authFactorName;
            Default = @default;
            DeviceId = deviceId;
            Filters = filters;
            Id = id;
            TypeDisplayName = typeDisplayName;
            UserDisplayName = userDisplayName;
            UsersId = usersId;
        }
    }
}
