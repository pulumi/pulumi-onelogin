// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Onelogin.Outputs
{

    [OutputType]
    public sealed class AppEnforcementPoint
    {
        public readonly bool? CaseSensitive;
        public readonly string? Conditions;
        public readonly string? ContextRoot;
        public readonly string? LandingPage;
        public readonly string? Permissions;
        public readonly bool? RequireSitewideAuthentication;
        public readonly ImmutableArray<Outputs.AppEnforcementPointResource> Resources;
        public readonly Outputs.AppEnforcementPointSessionExpiryFixed? SessionExpiryFixed;
        public readonly Outputs.AppEnforcementPointSessionExpiryInactivity? SessionExpiryInactivity;
        public readonly string? Target;
        public readonly string? Token;
        public readonly bool? UseTargetHostHeader;
        public readonly string? Vhost;

        [OutputConstructor]
        private AppEnforcementPoint(
            bool? caseSensitive,

            string? conditions,

            string? contextRoot,

            string? landingPage,

            string? permissions,

            bool? requireSitewideAuthentication,

            ImmutableArray<Outputs.AppEnforcementPointResource> resources,

            Outputs.AppEnforcementPointSessionExpiryFixed? sessionExpiryFixed,

            Outputs.AppEnforcementPointSessionExpiryInactivity? sessionExpiryInactivity,

            string? target,

            string? token,

            bool? useTargetHostHeader,

            string? vhost)
        {
            CaseSensitive = caseSensitive;
            Conditions = conditions;
            ContextRoot = contextRoot;
            LandingPage = landingPage;
            Permissions = permissions;
            RequireSitewideAuthentication = requireSitewideAuthentication;
            Resources = resources;
            SessionExpiryFixed = sessionExpiryFixed;
            SessionExpiryInactivity = sessionExpiryInactivity;
            Target = target;
            Token = token;
            UseTargetHostHeader = useTargetHostHeader;
            Vhost = vhost;
        }
    }
}
