# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AppRuleArgs', 'AppRule']

@pulumi.input_type
class AppRuleArgs:
    def __init__(__self__, *,
                 app_id: pulumi.Input[str],
                 match: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['AppRuleActionArgs']]]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['AppRuleConditionArgs']]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 position: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a AppRule resource.
        :param pulumi.Input[str] app_id: The id of the App resource to which the rule should belong.
        :param pulumi.Input[str] match: Indicates how conditions should be matched. Must be one of `all` or `any`.
        :param pulumi.Input[Sequence[pulumi.Input['AppRuleActionArgs']]] actions: An array of actions that will be applied to the users that are matched by the conditions.
        :param pulumi.Input[Sequence[pulumi.Input['AppRuleConditionArgs']]] conditions: An array of conditions that the user must meet in order for the rule to be applied.
        :param pulumi.Input[bool] enabled: Indicate if the rule should go into effect.
        :param pulumi.Input[str] name: The Rule's name
        :param pulumi.Input[int] position: Indicates the ordering of the rule. When not supplied the rule will be put at the end of the list on create and managed by the provider. '0' can be supplied to consistently push this rule to the end of the list on every update.
        """
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "match", match)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if position is not None:
            pulumi.set(__self__, "position", position)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> pulumi.Input[str]:
        """
        The id of the App resource to which the rule should belong.
        """
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter
    def match(self) -> pulumi.Input[str]:
        """
        Indicates how conditions should be matched. Must be one of `all` or `any`.
        """
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: pulumi.Input[str]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppRuleActionArgs']]]]:
        """
        An array of actions that will be applied to the users that are matched by the conditions.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppRuleActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppRuleConditionArgs']]]]:
        """
        An array of conditions that the user must meet in order for the rule to be applied.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppRuleConditionArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicate if the rule should go into effect.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The Rule's name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input[int]]:
        """
        Indicates the ordering of the rule. When not supplied the rule will be put at the end of the list on create and managed by the provider. '0' can be supplied to consistently push this rule to the end of the list on every update.
        """
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "position", value)


@pulumi.input_type
class _AppRuleState:
    def __init__(__self__, *,
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['AppRuleActionArgs']]]] = None,
                 app_id: Optional[pulumi.Input[str]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['AppRuleConditionArgs']]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 match: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 position: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering AppRule resources.
        :param pulumi.Input[Sequence[pulumi.Input['AppRuleActionArgs']]] actions: An array of actions that will be applied to the users that are matched by the conditions.
        :param pulumi.Input[str] app_id: The id of the App resource to which the rule should belong.
        :param pulumi.Input[Sequence[pulumi.Input['AppRuleConditionArgs']]] conditions: An array of conditions that the user must meet in order for the rule to be applied.
        :param pulumi.Input[bool] enabled: Indicate if the rule should go into effect.
        :param pulumi.Input[str] match: Indicates how conditions should be matched. Must be one of `all` or `any`.
        :param pulumi.Input[str] name: The Rule's name
        :param pulumi.Input[int] position: Indicates the ordering of the rule. When not supplied the rule will be put at the end of the list on create and managed by the provider. '0' can be supplied to consistently push this rule to the end of the list on every update.
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if position is not None:
            pulumi.set(__self__, "position", position)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppRuleActionArgs']]]]:
        """
        An array of actions that will be applied to the users that are matched by the conditions.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppRuleActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the App resource to which the rule should belong.
        """
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppRuleConditionArgs']]]]:
        """
        An array of conditions that the user must meet in order for the rule to be applied.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppRuleConditionArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicate if the rule should go into effect.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates how conditions should be matched. Must be one of `all` or `any`.
        """
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The Rule's name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input[int]]:
        """
        Indicates the ordering of the rule. When not supplied the rule will be put at the end of the list on create and managed by the provider. '0' can be supplied to consistently push this rule to the end of the list on every update.
        """
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "position", value)


class AppRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AppRuleActionArgs']]]]] = None,
                 app_id: Optional[pulumi.Input[str]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AppRuleConditionArgs']]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 match: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 position: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Manage App Rule resources.

        This resource allows you to create and configure App Rules.

        ## Example Usage
        ### Strict Ordering

        ```python
        import pulumi
        import pulumi_onelogin as onelogin

        check = onelogin.AppRule("check",
            app_id=onelogin_saml_apps["my_saml_app"]["id"],
            position=1,
            enabled=True,
            match="all",
            conditions={
                "operator": "ri",
                "source": "has_role",
                "value": "340475",
            },
            actions={
                "action": "set_amazonusername",
                "expression": ".*",
                "values": ["member_of"],
            })
        ```
        ### Dependency Based Ordering

        ```python
        import pulumi
        import pulumi_onelogin as onelogin

        test = onelogin.AppRule("test",
            app_id=onelogin_saml_apps["my_saml_app"]["id"],
            enabled=True,
            match="all",
            conditions={
                "operator": "ri",
                "source": "has_role",
                "value": "340475",
            },
            actions={
                "action": "set_amazonusername",
                "expression": ".*",
                "values": ["member_of"],
            })
        check = onelogin.AppRule("check",
            app_id=onelogin_saml_apps["my_saml_app"]["id"],
            enabled=True,
            match="all",
            conditions={
                "operator": "ri",
                "source": "has_role",
                "value": "340475",
            },
            actions={
                "action": "set_amazonusername",
                "expression": ".*",
                "values": ["member_of"],
            },
            opts=pulumi.ResourceOptions(depends_on=[test]))
        ```
        ## Important Note Regarding Position

        The position field indicates the order in which rules are applied. They behave like progressive filters and as such, their positioning is strictly enforced. Your options for this field are to either:

        * Accept any ordering - Do not fill out any position field and each rule will be inserted in the order received by the API.

        * Strict Ordering - Enter a position number for each app rule. You'll need to ensure there are no duplicates and no gaps in numbering.

        * Dependency based ordering - Use the `depends_on` field to specify an app rule's predecessor to ensure rules are received by the API in the order in which they should be applied. e.g. `depends_on = [onelogin_app_rules.test]`

        ## Import

        An App Rule cannot be imported at this time.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AppRuleActionArgs']]]] actions: An array of actions that will be applied to the users that are matched by the conditions.
        :param pulumi.Input[str] app_id: The id of the App resource to which the rule should belong.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AppRuleConditionArgs']]]] conditions: An array of conditions that the user must meet in order for the rule to be applied.
        :param pulumi.Input[bool] enabled: Indicate if the rule should go into effect.
        :param pulumi.Input[str] match: Indicates how conditions should be matched. Must be one of `all` or `any`.
        :param pulumi.Input[str] name: The Rule's name
        :param pulumi.Input[int] position: Indicates the ordering of the rule. When not supplied the rule will be put at the end of the list on create and managed by the provider. '0' can be supplied to consistently push this rule to the end of the list on every update.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AppRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manage App Rule resources.

        This resource allows you to create and configure App Rules.

        ## Example Usage
        ### Strict Ordering

        ```python
        import pulumi
        import pulumi_onelogin as onelogin

        check = onelogin.AppRule("check",
            app_id=onelogin_saml_apps["my_saml_app"]["id"],
            position=1,
            enabled=True,
            match="all",
            conditions={
                "operator": "ri",
                "source": "has_role",
                "value": "340475",
            },
            actions={
                "action": "set_amazonusername",
                "expression": ".*",
                "values": ["member_of"],
            })
        ```
        ### Dependency Based Ordering

        ```python
        import pulumi
        import pulumi_onelogin as onelogin

        test = onelogin.AppRule("test",
            app_id=onelogin_saml_apps["my_saml_app"]["id"],
            enabled=True,
            match="all",
            conditions={
                "operator": "ri",
                "source": "has_role",
                "value": "340475",
            },
            actions={
                "action": "set_amazonusername",
                "expression": ".*",
                "values": ["member_of"],
            })
        check = onelogin.AppRule("check",
            app_id=onelogin_saml_apps["my_saml_app"]["id"],
            enabled=True,
            match="all",
            conditions={
                "operator": "ri",
                "source": "has_role",
                "value": "340475",
            },
            actions={
                "action": "set_amazonusername",
                "expression": ".*",
                "values": ["member_of"],
            },
            opts=pulumi.ResourceOptions(depends_on=[test]))
        ```
        ## Important Note Regarding Position

        The position field indicates the order in which rules are applied. They behave like progressive filters and as such, their positioning is strictly enforced. Your options for this field are to either:

        * Accept any ordering - Do not fill out any position field and each rule will be inserted in the order received by the API.

        * Strict Ordering - Enter a position number for each app rule. You'll need to ensure there are no duplicates and no gaps in numbering.

        * Dependency based ordering - Use the `depends_on` field to specify an app rule's predecessor to ensure rules are received by the API in the order in which they should be applied. e.g. `depends_on = [onelogin_app_rules.test]`

        ## Import

        An App Rule cannot be imported at this time.

        :param str resource_name: The name of the resource.
        :param AppRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AppRuleActionArgs']]]]] = None,
                 app_id: Optional[pulumi.Input[str]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AppRuleConditionArgs']]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 match: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 position: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppRuleArgs.__new__(AppRuleArgs)

            __props__.__dict__["actions"] = actions
            if app_id is None and not opts.urn:
                raise TypeError("Missing required property 'app_id'")
            __props__.__dict__["app_id"] = app_id
            __props__.__dict__["conditions"] = conditions
            __props__.__dict__["enabled"] = enabled
            if match is None and not opts.urn:
                raise TypeError("Missing required property 'match'")
            __props__.__dict__["match"] = match
            __props__.__dict__["name"] = name
            __props__.__dict__["position"] = position
        super(AppRule, __self__).__init__(
            'onelogin:index/appRule:AppRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            actions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AppRuleActionArgs']]]]] = None,
            app_id: Optional[pulumi.Input[str]] = None,
            conditions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AppRuleConditionArgs']]]]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            match: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            position: Optional[pulumi.Input[int]] = None) -> 'AppRule':
        """
        Get an existing AppRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AppRuleActionArgs']]]] actions: An array of actions that will be applied to the users that are matched by the conditions.
        :param pulumi.Input[str] app_id: The id of the App resource to which the rule should belong.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AppRuleConditionArgs']]]] conditions: An array of conditions that the user must meet in order for the rule to be applied.
        :param pulumi.Input[bool] enabled: Indicate if the rule should go into effect.
        :param pulumi.Input[str] match: Indicates how conditions should be matched. Must be one of `all` or `any`.
        :param pulumi.Input[str] name: The Rule's name
        :param pulumi.Input[int] position: Indicates the ordering of the rule. When not supplied the rule will be put at the end of the list on create and managed by the provider. '0' can be supplied to consistently push this rule to the end of the list on every update.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AppRuleState.__new__(_AppRuleState)

        __props__.__dict__["actions"] = actions
        __props__.__dict__["app_id"] = app_id
        __props__.__dict__["conditions"] = conditions
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["match"] = match
        __props__.__dict__["name"] = name
        __props__.__dict__["position"] = position
        return AppRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def actions(self) -> pulumi.Output[Optional[Sequence['outputs.AppRuleAction']]]:
        """
        An array of actions that will be applied to the users that are matched by the conditions.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> pulumi.Output[str]:
        """
        The id of the App resource to which the rule should belong.
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter
    def conditions(self) -> pulumi.Output[Optional[Sequence['outputs.AppRuleCondition']]]:
        """
        An array of conditions that the user must meet in order for the rule to be applied.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicate if the rule should go into effect.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def match(self) -> pulumi.Output[str]:
        """
        Indicates how conditions should be matched. Must be one of `all` or `any`.
        """
        return pulumi.get(self, "match")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The Rule's name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def position(self) -> pulumi.Output[int]:
        """
        Indicates the ordering of the rule. When not supplied the rule will be put at the end of the list on create and managed by the provider. '0' can be supplied to consistently push this rule to the end of the list on every update.
        """
        return pulumi.get(self, "position")

