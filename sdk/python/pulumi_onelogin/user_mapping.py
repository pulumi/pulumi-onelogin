# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['UserMappingArgs', 'UserMapping']

@pulumi.input_type
class UserMappingArgs:
    def __init__(__self__, *,
                 match: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['UserMappingActionArgs']]]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['UserMappingConditionArgs']]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 position: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a UserMapping resource.
        :param pulumi.Input[str] match: Indicates how conditions should be matched. Must be one of `all` or `any`.
        :param pulumi.Input[Sequence[pulumi.Input['UserMappingActionArgs']]] actions: The number of minutes until the token expires
        :param pulumi.Input[Sequence[pulumi.Input['UserMappingConditionArgs']]] conditions: An array of conditions that the user must meet in order for the mapping to be applied.
        :param pulumi.Input[bool] enabled: Indicates if a mapping is enabled.
        :param pulumi.Input[str] name: The resource's name.
        :param pulumi.Input[int] position: Indicates the ordering of the mapping. When not supplied the mapping will be put at the end of the list on create and managed by the provider. '0' can be supplied to consistently push this mapping to the end of the list on every update.
        """
        pulumi.set(__self__, "match", match)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if position is not None:
            pulumi.set(__self__, "position", position)

    @property
    @pulumi.getter
    def match(self) -> pulumi.Input[str]:
        """
        Indicates how conditions should be matched. Must be one of `all` or `any`.
        """
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: pulumi.Input[str]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserMappingActionArgs']]]]:
        """
        The number of minutes until the token expires
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserMappingActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserMappingConditionArgs']]]]:
        """
        An array of conditions that the user must meet in order for the mapping to be applied.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserMappingConditionArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if a mapping is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The resource's name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input[int]]:
        """
        Indicates the ordering of the mapping. When not supplied the mapping will be put at the end of the list on create and managed by the provider. '0' can be supplied to consistently push this mapping to the end of the list on every update.
        """
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "position", value)


@pulumi.input_type
class _UserMappingState:
    def __init__(__self__, *,
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['UserMappingActionArgs']]]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['UserMappingConditionArgs']]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 match: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 position: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering UserMapping resources.
        :param pulumi.Input[Sequence[pulumi.Input['UserMappingActionArgs']]] actions: The number of minutes until the token expires
        :param pulumi.Input[Sequence[pulumi.Input['UserMappingConditionArgs']]] conditions: An array of conditions that the user must meet in order for the mapping to be applied.
        :param pulumi.Input[bool] enabled: Indicates if a mapping is enabled.
        :param pulumi.Input[str] match: Indicates how conditions should be matched. Must be one of `all` or `any`.
        :param pulumi.Input[str] name: The resource's name.
        :param pulumi.Input[int] position: Indicates the ordering of the mapping. When not supplied the mapping will be put at the end of the list on create and managed by the provider. '0' can be supplied to consistently push this mapping to the end of the list on every update.
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if position is not None:
            pulumi.set(__self__, "position", position)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserMappingActionArgs']]]]:
        """
        The number of minutes until the token expires
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserMappingActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserMappingConditionArgs']]]]:
        """
        An array of conditions that the user must meet in order for the mapping to be applied.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserMappingConditionArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if a mapping is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates how conditions should be matched. Must be one of `all` or `any`.
        """
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The resource's name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input[int]]:
        """
        Indicates the ordering of the mapping. When not supplied the mapping will be put at the end of the list on create and managed by the provider. '0' can be supplied to consistently push this mapping to the end of the list on every update.
        """
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "position", value)


class UserMapping(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserMappingActionArgs']]]]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserMappingConditionArgs']]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 match: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 position: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Manage User Mappings resources.

        This resource allows you to create and configure User Mappings.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_onelogin as onelogin

        example = onelogin.UserMapping("example",
            actions=[onelogin.UserMappingActionArgs(
                action="set_status",
                values=["1"],
            )],
            conditions=[onelogin.UserMappingConditionArgs(
                operator=">",
                source="last_login",
                value="90",
            )],
            enabled=True,
            match="all",
            position=1)
        ```

        ## Import

        A User Mapping can be imported via the OneLogin User Mapping.

        ```sh
         $ pulumi import onelogin:index/userMapping:UserMapping example <user_mapping_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserMappingActionArgs']]]] actions: The number of minutes until the token expires
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserMappingConditionArgs']]]] conditions: An array of conditions that the user must meet in order for the mapping to be applied.
        :param pulumi.Input[bool] enabled: Indicates if a mapping is enabled.
        :param pulumi.Input[str] match: Indicates how conditions should be matched. Must be one of `all` or `any`.
        :param pulumi.Input[str] name: The resource's name.
        :param pulumi.Input[int] position: Indicates the ordering of the mapping. When not supplied the mapping will be put at the end of the list on create and managed by the provider. '0' can be supplied to consistently push this mapping to the end of the list on every update.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UserMappingArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manage User Mappings resources.

        This resource allows you to create and configure User Mappings.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_onelogin as onelogin

        example = onelogin.UserMapping("example",
            actions=[onelogin.UserMappingActionArgs(
                action="set_status",
                values=["1"],
            )],
            conditions=[onelogin.UserMappingConditionArgs(
                operator=">",
                source="last_login",
                value="90",
            )],
            enabled=True,
            match="all",
            position=1)
        ```

        ## Import

        A User Mapping can be imported via the OneLogin User Mapping.

        ```sh
         $ pulumi import onelogin:index/userMapping:UserMapping example <user_mapping_id>
        ```

        :param str resource_name: The name of the resource.
        :param UserMappingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UserMappingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserMappingActionArgs']]]]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserMappingConditionArgs']]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 match: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 position: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UserMappingArgs.__new__(UserMappingArgs)

            __props__.__dict__["actions"] = actions
            __props__.__dict__["conditions"] = conditions
            __props__.__dict__["enabled"] = enabled
            if match is None and not opts.urn:
                raise TypeError("Missing required property 'match'")
            __props__.__dict__["match"] = match
            __props__.__dict__["name"] = name
            __props__.__dict__["position"] = position
        super(UserMapping, __self__).__init__(
            'onelogin:index/userMapping:UserMapping',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            actions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserMappingActionArgs']]]]] = None,
            conditions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserMappingConditionArgs']]]]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            match: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            position: Optional[pulumi.Input[int]] = None) -> 'UserMapping':
        """
        Get an existing UserMapping resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserMappingActionArgs']]]] actions: The number of minutes until the token expires
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserMappingConditionArgs']]]] conditions: An array of conditions that the user must meet in order for the mapping to be applied.
        :param pulumi.Input[bool] enabled: Indicates if a mapping is enabled.
        :param pulumi.Input[str] match: Indicates how conditions should be matched. Must be one of `all` or `any`.
        :param pulumi.Input[str] name: The resource's name.
        :param pulumi.Input[int] position: Indicates the ordering of the mapping. When not supplied the mapping will be put at the end of the list on create and managed by the provider. '0' can be supplied to consistently push this mapping to the end of the list on every update.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UserMappingState.__new__(_UserMappingState)

        __props__.__dict__["actions"] = actions
        __props__.__dict__["conditions"] = conditions
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["match"] = match
        __props__.__dict__["name"] = name
        __props__.__dict__["position"] = position
        return UserMapping(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def actions(self) -> pulumi.Output[Optional[Sequence['outputs.UserMappingAction']]]:
        """
        The number of minutes until the token expires
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def conditions(self) -> pulumi.Output[Optional[Sequence['outputs.UserMappingCondition']]]:
        """
        An array of conditions that the user must meet in order for the mapping to be applied.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates if a mapping is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def match(self) -> pulumi.Output[str]:
        """
        Indicates how conditions should be matched. Must be one of `all` or `any`.
        """
        return pulumi.get(self, "match")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The resource's name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def position(self) -> pulumi.Output[int]:
        """
        Indicates the ordering of the mapping. When not supplied the mapping will be put at the end of the list on create and managed by the provider. '0' can be supplied to consistently push this mapping to the end of the list on every update.
        """
        return pulumi.get(self, "position")

