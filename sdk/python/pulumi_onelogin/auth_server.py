# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AuthServerArgs', 'AuthServer']

@pulumi.input_type
class AuthServerArgs:
    def __init__(__self__, *,
                 configuration: pulumi.Input['AuthServerConfigurationArgs'],
                 description: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a AuthServer resource.
        :param pulumi.Input['AuthServerConfigurationArgs'] configuration: Configuration parameters
        :param pulumi.Input[str] description: A brief description about the resource.
        :param pulumi.Input[str] name: The resource's name.
        """
        pulumi.set(__self__, "configuration", configuration)
        pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def configuration(self) -> pulumi.Input['AuthServerConfigurationArgs']:
        """
        Configuration parameters
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: pulumi.Input['AuthServerConfigurationArgs']):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Input[str]:
        """
        A brief description about the resource.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The resource's name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _AuthServerState:
    def __init__(__self__, *,
                 configuration: Optional[pulumi.Input['AuthServerConfigurationArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering AuthServer resources.
        :param pulumi.Input['AuthServerConfigurationArgs'] configuration: Configuration parameters
        :param pulumi.Input[str] description: A brief description about the resource.
        :param pulumi.Input[str] name: The resource's name.
        """
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['AuthServerConfigurationArgs']]:
        """
        Configuration parameters
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['AuthServerConfigurationArgs']]):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A brief description about the resource.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The resource's name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


class AuthServer(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 configuration: Optional[pulumi.Input[pulumi.InputType['AuthServerConfigurationArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Creates an Authentication Server Resource.

        This resource allows you to create and configure an Authentication Server.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_onelogin as onelogin

        example = onelogin.AuthServer("example",
            configuration=onelogin.AuthServerConfigurationArgs(
                access_token_expiration_minutes=10,
                audiences=["https://example.com/contacts"],
                refresh_token_expiration_minutes=30,
                resource_identifier="https://example.com/contacts",
            ),
            description="This is an api")
        ```

        ## Import

        An Auth Server can be imported via the OneLogin Auth Server ID.

        ```sh
         $ pulumi import onelogin:index/authServer:AuthServer example <auth_server_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['AuthServerConfigurationArgs']] configuration: Configuration parameters
        :param pulumi.Input[str] description: A brief description about the resource.
        :param pulumi.Input[str] name: The resource's name.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AuthServerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates an Authentication Server Resource.

        This resource allows you to create and configure an Authentication Server.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_onelogin as onelogin

        example = onelogin.AuthServer("example",
            configuration=onelogin.AuthServerConfigurationArgs(
                access_token_expiration_minutes=10,
                audiences=["https://example.com/contacts"],
                refresh_token_expiration_minutes=30,
                resource_identifier="https://example.com/contacts",
            ),
            description="This is an api")
        ```

        ## Import

        An Auth Server can be imported via the OneLogin Auth Server ID.

        ```sh
         $ pulumi import onelogin:index/authServer:AuthServer example <auth_server_id>
        ```

        :param str resource_name: The name of the resource.
        :param AuthServerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AuthServerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 configuration: Optional[pulumi.Input[pulumi.InputType['AuthServerConfigurationArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AuthServerArgs.__new__(AuthServerArgs)

            if configuration is None and not opts.urn:
                raise TypeError("Missing required property 'configuration'")
            __props__.__dict__["configuration"] = configuration
            if description is None and not opts.urn:
                raise TypeError("Missing required property 'description'")
            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
        super(AuthServer, __self__).__init__(
            'onelogin:index/authServer:AuthServer',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            configuration: Optional[pulumi.Input[pulumi.InputType['AuthServerConfigurationArgs']]] = None,
            description: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None) -> 'AuthServer':
        """
        Get an existing AuthServer resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['AuthServerConfigurationArgs']] configuration: Configuration parameters
        :param pulumi.Input[str] description: A brief description about the resource.
        :param pulumi.Input[str] name: The resource's name.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AuthServerState.__new__(_AuthServerState)

        __props__.__dict__["configuration"] = configuration
        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        return AuthServer(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def configuration(self) -> pulumi.Output['outputs.AuthServerConfiguration']:
        """
        Configuration parameters
        """
        return pulumi.get(self, "configuration")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        A brief description about the resource.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The resource's name.
        """
        return pulumi.get(self, "name")

