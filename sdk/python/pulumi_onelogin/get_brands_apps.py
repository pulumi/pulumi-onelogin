# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetBrandsAppsResult',
    'AwaitableGetBrandsAppsResult',
    'get_brands_apps',
    'get_brands_apps_output',
]

@pulumi.output_type
class GetBrandsAppsResult:
    """
    A collection of values returned by getBrandsApps.
    """
    def __init__(__self__, auth_method=None, auth_method_description=None, brands_id=None, connector_id=None, created_at=None, description=None, filters=None, id=None, name=None, updated_at=None, visible=None):
        if auth_method and not isinstance(auth_method, int):
            raise TypeError("Expected argument 'auth_method' to be a int")
        pulumi.set(__self__, "auth_method", auth_method)
        if auth_method_description and not isinstance(auth_method_description, str):
            raise TypeError("Expected argument 'auth_method_description' to be a str")
        pulumi.set(__self__, "auth_method_description", auth_method_description)
        if brands_id and not isinstance(brands_id, str):
            raise TypeError("Expected argument 'brands_id' to be a str")
        pulumi.set(__self__, "brands_id", brands_id)
        if connector_id and not isinstance(connector_id, int):
            raise TypeError("Expected argument 'connector_id' to be a int")
        pulumi.set(__self__, "connector_id", connector_id)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)
        if visible and not isinstance(visible, bool):
            raise TypeError("Expected argument 'visible' to be a bool")
        pulumi.set(__self__, "visible", visible)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> int:
        return pulumi.get(self, "auth_method")

    @property
    @pulumi.getter(name="authMethodDescription")
    def auth_method_description(self) -> str:
        return pulumi.get(self, "auth_method_description")

    @property
    @pulumi.getter(name="brandsId")
    def brands_id(self) -> str:
        return pulumi.get(self, "brands_id")

    @property
    @pulumi.getter(name="connectorId")
    def connector_id(self) -> int:
        return pulumi.get(self, "connector_id")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetBrandsAppsFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter
    def visible(self) -> bool:
        return pulumi.get(self, "visible")


class AwaitableGetBrandsAppsResult(GetBrandsAppsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBrandsAppsResult(
            auth_method=self.auth_method,
            auth_method_description=self.auth_method_description,
            brands_id=self.brands_id,
            connector_id=self.connector_id,
            created_at=self.created_at,
            description=self.description,
            filters=self.filters,
            id=self.id,
            name=self.name,
            updated_at=self.updated_at,
            visible=self.visible)


def get_brands_apps(auth_method: Optional[int] = None,
                    auth_method_description: Optional[str] = None,
                    brands_id: Optional[str] = None,
                    connector_id: Optional[int] = None,
                    created_at: Optional[str] = None,
                    description: Optional[str] = None,
                    filters: Optional[Sequence[pulumi.InputType['GetBrandsAppsFilterArgs']]] = None,
                    name: Optional[str] = None,
                    updated_at: Optional[str] = None,
                    visible: Optional[bool] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBrandsAppsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['authMethod'] = auth_method
    __args__['authMethodDescription'] = auth_method_description
    __args__['brandsId'] = brands_id
    __args__['connectorId'] = connector_id
    __args__['createdAt'] = created_at
    __args__['description'] = description
    __args__['filters'] = filters
    __args__['name'] = name
    __args__['updatedAt'] = updated_at
    __args__['visible'] = visible
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('onelogin:index/getBrandsApps:getBrandsApps', __args__, opts=opts, typ=GetBrandsAppsResult).value

    return AwaitableGetBrandsAppsResult(
        auth_method=__ret__.auth_method,
        auth_method_description=__ret__.auth_method_description,
        brands_id=__ret__.brands_id,
        connector_id=__ret__.connector_id,
        created_at=__ret__.created_at,
        description=__ret__.description,
        filters=__ret__.filters,
        id=__ret__.id,
        name=__ret__.name,
        updated_at=__ret__.updated_at,
        visible=__ret__.visible)


@_utilities.lift_output_func(get_brands_apps)
def get_brands_apps_output(auth_method: Optional[pulumi.Input[Optional[int]]] = None,
                           auth_method_description: Optional[pulumi.Input[Optional[str]]] = None,
                           brands_id: Optional[pulumi.Input[str]] = None,
                           connector_id: Optional[pulumi.Input[Optional[int]]] = None,
                           created_at: Optional[pulumi.Input[Optional[str]]] = None,
                           description: Optional[pulumi.Input[Optional[str]]] = None,
                           filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetBrandsAppsFilterArgs']]]]] = None,
                           name: Optional[pulumi.Input[Optional[str]]] = None,
                           updated_at: Optional[pulumi.Input[Optional[str]]] = None,
                           visible: Optional[pulumi.Input[Optional[bool]]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetBrandsAppsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
