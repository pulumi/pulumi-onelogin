# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'AppConfiguration',
    'AppEnforcementPoint',
    'AppEnforcementPointResource',
    'AppEnforcementPointSessionExpiryFixed',
    'AppEnforcementPointSessionExpiryInactivity',
    'AppParameters',
    'AppParametersGroups',
    'AppProvisioning',
    'AppSso',
    'AppSsoCertificate',
    'AuthServersConfiguration',
    'PrivilegesPrivilege',
    'PrivilegesPrivilegeStatement',
    'RiskRulesSource',
    'GetAppsConfigurationResult',
    'GetAppsEnforcementPointResult',
    'GetAppsEnforcementPointResourceResult',
    'GetAppsEnforcementPointSessionExpiryFixedResult',
    'GetAppsEnforcementPointSessionExpiryInactivityResult',
    'GetAppsFilterResult',
    'GetAppsParametersResult',
    'GetAppsParametersGroupsResult',
    'GetAppsProvisioningResult',
    'GetAppsSsoResult',
    'GetAppsSsoCertificateResult',
    'GetAuthServersClaimsFilterResult',
    'GetAuthServersConfigurationResult',
    'GetAuthServersFilterResult',
    'GetAuthServersInstanceConfigurationResult',
    'GetAuthServersScopesFilterResult',
    'GetMappingsActionResult',
    'GetMappingsConditionResult',
    'GetMappingsFilterResult',
    'GetPrivilegesFilterResult',
    'GetPrivilegesInstancePrivilegeResult',
    'GetPrivilegesInstancePrivilegeStatementResult',
    'GetPrivilegesPrivilegeResult',
    'GetPrivilegesPrivilegeStatementResult',
    'GetRiskRulesFilterResult',
    'GetRiskRulesInstanceSourceResult',
    'GetRiskRulesSourceResult',
]

@pulumi.output_type
class AppConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessTokenExpirationMinutes":
            suggest = "access_token_expiration_minutes"
        elif key == "loginUrl":
            suggest = "login_url"
        elif key == "oidcApiVersion":
            suggest = "oidc_api_version"
        elif key == "oidcApplicationType":
            suggest = "oidc_application_type"
        elif key == "oidcEncryptionKey":
            suggest = "oidc_encryption_key"
        elif key == "postLogoutRedirectUri":
            suggest = "post_logout_redirect_uri"
        elif key == "redirectUri":
            suggest = "redirect_uri"
        elif key == "refreshTokenExpirationMinutes":
            suggest = "refresh_token_expiration_minutes"
        elif key == "tokenEndpointAuthMethod":
            suggest = "token_endpoint_auth_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token_expiration_minutes: Optional[int] = None,
                 login_url: Optional[str] = None,
                 oidc_api_version: Optional[str] = None,
                 oidc_application_type: Optional[int] = None,
                 oidc_encryption_key: Optional[str] = None,
                 post_logout_redirect_uri: Optional[str] = None,
                 redirect_uri: Optional[str] = None,
                 refresh_token_expiration_minutes: Optional[int] = None,
                 token_endpoint_auth_method: Optional[int] = None):
        AppConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_token_expiration_minutes=access_token_expiration_minutes,
            login_url=login_url,
            oidc_api_version=oidc_api_version,
            oidc_application_type=oidc_application_type,
            oidc_encryption_key=oidc_encryption_key,
            post_logout_redirect_uri=post_logout_redirect_uri,
            redirect_uri=redirect_uri,
            refresh_token_expiration_minutes=refresh_token_expiration_minutes,
            token_endpoint_auth_method=token_endpoint_auth_method,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_token_expiration_minutes: Optional[int] = None,
             login_url: Optional[str] = None,
             oidc_api_version: Optional[str] = None,
             oidc_application_type: Optional[int] = None,
             oidc_encryption_key: Optional[str] = None,
             post_logout_redirect_uri: Optional[str] = None,
             redirect_uri: Optional[str] = None,
             refresh_token_expiration_minutes: Optional[int] = None,
             token_endpoint_auth_method: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if access_token_expiration_minutes is not None:
            _setter("access_token_expiration_minutes", access_token_expiration_minutes)
        if login_url is not None:
            _setter("login_url", login_url)
        if oidc_api_version is not None:
            _setter("oidc_api_version", oidc_api_version)
        if oidc_application_type is not None:
            _setter("oidc_application_type", oidc_application_type)
        if oidc_encryption_key is not None:
            _setter("oidc_encryption_key", oidc_encryption_key)
        if post_logout_redirect_uri is not None:
            _setter("post_logout_redirect_uri", post_logout_redirect_uri)
        if redirect_uri is not None:
            _setter("redirect_uri", redirect_uri)
        if refresh_token_expiration_minutes is not None:
            _setter("refresh_token_expiration_minutes", refresh_token_expiration_minutes)
        if token_endpoint_auth_method is not None:
            _setter("token_endpoint_auth_method", token_endpoint_auth_method)

    @property
    @pulumi.getter(name="accessTokenExpirationMinutes")
    def access_token_expiration_minutes(self) -> Optional[int]:
        return pulumi.get(self, "access_token_expiration_minutes")

    @property
    @pulumi.getter(name="loginUrl")
    def login_url(self) -> Optional[str]:
        return pulumi.get(self, "login_url")

    @property
    @pulumi.getter(name="oidcApiVersion")
    def oidc_api_version(self) -> Optional[str]:
        return pulumi.get(self, "oidc_api_version")

    @property
    @pulumi.getter(name="oidcApplicationType")
    def oidc_application_type(self) -> Optional[int]:
        return pulumi.get(self, "oidc_application_type")

    @property
    @pulumi.getter(name="oidcEncryptionKey")
    def oidc_encryption_key(self) -> Optional[str]:
        return pulumi.get(self, "oidc_encryption_key")

    @property
    @pulumi.getter(name="postLogoutRedirectUri")
    def post_logout_redirect_uri(self) -> Optional[str]:
        return pulumi.get(self, "post_logout_redirect_uri")

    @property
    @pulumi.getter(name="redirectUri")
    def redirect_uri(self) -> Optional[str]:
        return pulumi.get(self, "redirect_uri")

    @property
    @pulumi.getter(name="refreshTokenExpirationMinutes")
    def refresh_token_expiration_minutes(self) -> Optional[int]:
        return pulumi.get(self, "refresh_token_expiration_minutes")

    @property
    @pulumi.getter(name="tokenEndpointAuthMethod")
    def token_endpoint_auth_method(self) -> Optional[int]:
        return pulumi.get(self, "token_endpoint_auth_method")


@pulumi.output_type
class AppEnforcementPoint(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caseSensitive":
            suggest = "case_sensitive"
        elif key == "contextRoot":
            suggest = "context_root"
        elif key == "landingPage":
            suggest = "landing_page"
        elif key == "requireSitewideAuthentication":
            suggest = "require_sitewide_authentication"
        elif key == "sessionExpiryFixed":
            suggest = "session_expiry_fixed"
        elif key == "sessionExpiryInactivity":
            suggest = "session_expiry_inactivity"
        elif key == "useTargetHostHeader":
            suggest = "use_target_host_header"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppEnforcementPoint. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppEnforcementPoint.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppEnforcementPoint.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 case_sensitive: Optional[bool] = None,
                 conditions: Optional[str] = None,
                 context_root: Optional[str] = None,
                 landing_page: Optional[str] = None,
                 permissions: Optional[str] = None,
                 require_sitewide_authentication: Optional[bool] = None,
                 resources: Optional[Sequence['outputs.AppEnforcementPointResource']] = None,
                 session_expiry_fixed: Optional['outputs.AppEnforcementPointSessionExpiryFixed'] = None,
                 session_expiry_inactivity: Optional['outputs.AppEnforcementPointSessionExpiryInactivity'] = None,
                 target: Optional[str] = None,
                 token: Optional[str] = None,
                 use_target_host_header: Optional[bool] = None,
                 vhost: Optional[str] = None):
        AppEnforcementPoint._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            case_sensitive=case_sensitive,
            conditions=conditions,
            context_root=context_root,
            landing_page=landing_page,
            permissions=permissions,
            require_sitewide_authentication=require_sitewide_authentication,
            resources=resources,
            session_expiry_fixed=session_expiry_fixed,
            session_expiry_inactivity=session_expiry_inactivity,
            target=target,
            token=token,
            use_target_host_header=use_target_host_header,
            vhost=vhost,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             case_sensitive: Optional[bool] = None,
             conditions: Optional[str] = None,
             context_root: Optional[str] = None,
             landing_page: Optional[str] = None,
             permissions: Optional[str] = None,
             require_sitewide_authentication: Optional[bool] = None,
             resources: Optional[Sequence['outputs.AppEnforcementPointResource']] = None,
             session_expiry_fixed: Optional['outputs.AppEnforcementPointSessionExpiryFixed'] = None,
             session_expiry_inactivity: Optional['outputs.AppEnforcementPointSessionExpiryInactivity'] = None,
             target: Optional[str] = None,
             token: Optional[str] = None,
             use_target_host_header: Optional[bool] = None,
             vhost: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if case_sensitive is not None:
            _setter("case_sensitive", case_sensitive)
        if conditions is not None:
            _setter("conditions", conditions)
        if context_root is not None:
            _setter("context_root", context_root)
        if landing_page is not None:
            _setter("landing_page", landing_page)
        if permissions is not None:
            _setter("permissions", permissions)
        if require_sitewide_authentication is not None:
            _setter("require_sitewide_authentication", require_sitewide_authentication)
        if resources is not None:
            _setter("resources", resources)
        if session_expiry_fixed is not None:
            _setter("session_expiry_fixed", session_expiry_fixed)
        if session_expiry_inactivity is not None:
            _setter("session_expiry_inactivity", session_expiry_inactivity)
        if target is not None:
            _setter("target", target)
        if token is not None:
            _setter("token", token)
        if use_target_host_header is not None:
            _setter("use_target_host_header", use_target_host_header)
        if vhost is not None:
            _setter("vhost", vhost)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "case_sensitive")

    @property
    @pulumi.getter
    def conditions(self) -> Optional[str]:
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="contextRoot")
    def context_root(self) -> Optional[str]:
        return pulumi.get(self, "context_root")

    @property
    @pulumi.getter(name="landingPage")
    def landing_page(self) -> Optional[str]:
        return pulumi.get(self, "landing_page")

    @property
    @pulumi.getter
    def permissions(self) -> Optional[str]:
        return pulumi.get(self, "permissions")

    @property
    @pulumi.getter(name="requireSitewideAuthentication")
    def require_sitewide_authentication(self) -> Optional[bool]:
        return pulumi.get(self, "require_sitewide_authentication")

    @property
    @pulumi.getter
    def resources(self) -> Optional[Sequence['outputs.AppEnforcementPointResource']]:
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="sessionExpiryFixed")
    def session_expiry_fixed(self) -> Optional['outputs.AppEnforcementPointSessionExpiryFixed']:
        return pulumi.get(self, "session_expiry_fixed")

    @property
    @pulumi.getter(name="sessionExpiryInactivity")
    def session_expiry_inactivity(self) -> Optional['outputs.AppEnforcementPointSessionExpiryInactivity']:
        return pulumi.get(self, "session_expiry_inactivity")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        return pulumi.get(self, "target")

    @property
    @pulumi.getter
    def token(self) -> Optional[str]:
        return pulumi.get(self, "token")

    @property
    @pulumi.getter(name="useTargetHostHeader")
    def use_target_host_header(self) -> Optional[bool]:
        return pulumi.get(self, "use_target_host_header")

    @property
    @pulumi.getter
    def vhost(self) -> Optional[str]:
        return pulumi.get(self, "vhost")


@pulumi.output_type
class AppEnforcementPointResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isPathRegex":
            suggest = "is_path_regex"
        elif key == "requireAuth":
            suggest = "require_auth"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppEnforcementPointResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppEnforcementPointResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppEnforcementPointResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 conditions: Optional[str] = None,
                 is_path_regex: Optional[bool] = None,
                 path: Optional[str] = None,
                 permission: Optional[str] = None,
                 require_auth: Optional[bool] = None):
        AppEnforcementPointResource._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            conditions=conditions,
            is_path_regex=is_path_regex,
            path=path,
            permission=permission,
            require_auth=require_auth,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             conditions: Optional[str] = None,
             is_path_regex: Optional[bool] = None,
             path: Optional[str] = None,
             permission: Optional[str] = None,
             require_auth: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if conditions is not None:
            _setter("conditions", conditions)
        if is_path_regex is not None:
            _setter("is_path_regex", is_path_regex)
        if path is not None:
            _setter("path", path)
        if permission is not None:
            _setter("permission", permission)
        if require_auth is not None:
            _setter("require_auth", require_auth)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[str]:
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="isPathRegex")
    def is_path_regex(self) -> Optional[bool]:
        return pulumi.get(self, "is_path_regex")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def permission(self) -> Optional[str]:
        return pulumi.get(self, "permission")

    @property
    @pulumi.getter(name="requireAuth")
    def require_auth(self) -> Optional[bool]:
        return pulumi.get(self, "require_auth")


@pulumi.output_type
class AppEnforcementPointSessionExpiryFixed(dict):
    def __init__(__self__, *,
                 unit: Optional[int] = None,
                 value: Optional[int] = None):
        AppEnforcementPointSessionExpiryFixed._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            unit=unit,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             unit: Optional[int] = None,
             value: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if unit is not None:
            _setter("unit", unit)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[int]:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> Optional[int]:
        return pulumi.get(self, "value")


@pulumi.output_type
class AppEnforcementPointSessionExpiryInactivity(dict):
    def __init__(__self__, *,
                 unit: Optional[int] = None,
                 value: Optional[int] = None):
        AppEnforcementPointSessionExpiryInactivity._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            unit=unit,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             unit: Optional[int] = None,
             value: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if unit is not None:
            _setter("unit", unit)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[int]:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> Optional[int]:
        return pulumi.get(self, "value")


@pulumi.output_type
class AppParameters(dict):
    def __init__(__self__, *,
                 groups: Optional['outputs.AppParametersGroups'] = None):
        AppParameters._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            groups=groups,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             groups: Optional['outputs.AppParametersGroups'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if groups is not None:
            _setter("groups", groups)

    @property
    @pulumi.getter
    def groups(self) -> Optional['outputs.AppParametersGroups']:
        return pulumi.get(self, "groups")


@pulumi.output_type
class AppParametersGroups(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "attributesTransformations":
            suggest = "attributes_transformations"
        elif key == "defaultValues":
            suggest = "default_values"
        elif key == "provisionedEntitlements":
            suggest = "provisioned_entitlements"
        elif key == "skipIfBlank":
            suggest = "skip_if_blank"
        elif key == "userAttributeMacros":
            suggest = "user_attribute_macros"
        elif key == "userAttributeMappings":
            suggest = "user_attribute_mappings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppParametersGroups. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppParametersGroups.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppParametersGroups.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 attributes_transformations: Optional[str] = None,
                 default_values: Optional[str] = None,
                 id: Optional[int] = None,
                 label: Optional[str] = None,
                 provisioned_entitlements: Optional[bool] = None,
                 skip_if_blank: Optional[bool] = None,
                 user_attribute_macros: Optional[str] = None,
                 user_attribute_mappings: Optional[str] = None,
                 values: Optional[str] = None):
        AppParametersGroups._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            attributes_transformations=attributes_transformations,
            default_values=default_values,
            id=id,
            label=label,
            provisioned_entitlements=provisioned_entitlements,
            skip_if_blank=skip_if_blank,
            user_attribute_macros=user_attribute_macros,
            user_attribute_mappings=user_attribute_mappings,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             attributes_transformations: Optional[str] = None,
             default_values: Optional[str] = None,
             id: Optional[int] = None,
             label: Optional[str] = None,
             provisioned_entitlements: Optional[bool] = None,
             skip_if_blank: Optional[bool] = None,
             user_attribute_macros: Optional[str] = None,
             user_attribute_mappings: Optional[str] = None,
             values: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if attributes_transformations is not None:
            _setter("attributes_transformations", attributes_transformations)
        if default_values is not None:
            _setter("default_values", default_values)
        if id is not None:
            _setter("id", id)
        if label is not None:
            _setter("label", label)
        if provisioned_entitlements is not None:
            _setter("provisioned_entitlements", provisioned_entitlements)
        if skip_if_blank is not None:
            _setter("skip_if_blank", skip_if_blank)
        if user_attribute_macros is not None:
            _setter("user_attribute_macros", user_attribute_macros)
        if user_attribute_mappings is not None:
            _setter("user_attribute_mappings", user_attribute_mappings)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter(name="attributesTransformations")
    def attributes_transformations(self) -> Optional[str]:
        return pulumi.get(self, "attributes_transformations")

    @property
    @pulumi.getter(name="defaultValues")
    def default_values(self) -> Optional[str]:
        return pulumi.get(self, "default_values")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="provisionedEntitlements")
    def provisioned_entitlements(self) -> Optional[bool]:
        return pulumi.get(self, "provisioned_entitlements")

    @property
    @pulumi.getter(name="skipIfBlank")
    def skip_if_blank(self) -> Optional[bool]:
        return pulumi.get(self, "skip_if_blank")

    @property
    @pulumi.getter(name="userAttributeMacros")
    def user_attribute_macros(self) -> Optional[str]:
        return pulumi.get(self, "user_attribute_macros")

    @property
    @pulumi.getter(name="userAttributeMappings")
    def user_attribute_mappings(self) -> Optional[str]:
        return pulumi.get(self, "user_attribute_mappings")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class AppProvisioning(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 status: Optional[str] = None):
        AppProvisioning._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            status=status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             status: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if enabled is not None:
            _setter("enabled", enabled)
        if status is not None:
            _setter("status", status)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class AppSso(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "acsUrl":
            suggest = "acs_url"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "metadataUrl":
            suggest = "metadata_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppSso. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppSso.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppSso.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 acs_url: Optional[str] = None,
                 certificate: Optional['outputs.AppSsoCertificate'] = None,
                 client_id: Optional[str] = None,
                 client_secret: Optional[str] = None,
                 issuer: Optional[str] = None,
                 metadata_url: Optional[str] = None):
        AppSso._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            acs_url=acs_url,
            certificate=certificate,
            client_id=client_id,
            client_secret=client_secret,
            issuer=issuer,
            metadata_url=metadata_url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             acs_url: Optional[str] = None,
             certificate: Optional['outputs.AppSsoCertificate'] = None,
             client_id: Optional[str] = None,
             client_secret: Optional[str] = None,
             issuer: Optional[str] = None,
             metadata_url: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if acs_url is not None:
            _setter("acs_url", acs_url)
        if certificate is not None:
            _setter("certificate", certificate)
        if client_id is not None:
            _setter("client_id", client_id)
        if client_secret is not None:
            _setter("client_secret", client_secret)
        if issuer is not None:
            _setter("issuer", issuer)
        if metadata_url is not None:
            _setter("metadata_url", metadata_url)

    @property
    @pulumi.getter(name="acsUrl")
    def acs_url(self) -> Optional[str]:
        return pulumi.get(self, "acs_url")

    @property
    @pulumi.getter
    def certificate(self) -> Optional['outputs.AppSsoCertificate']:
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter
    def issuer(self) -> Optional[str]:
        return pulumi.get(self, "issuer")

    @property
    @pulumi.getter(name="metadataUrl")
    def metadata_url(self) -> Optional[str]:
        return pulumi.get(self, "metadata_url")


@pulumi.output_type
class AppSsoCertificate(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        AppSsoCertificate._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            name=name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[int] = None,
             name: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if id is not None:
            _setter("id", id)
        if name is not None:
            _setter("name", name)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class AuthServersConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceIdentifier":
            suggest = "resource_identifier"
        elif key == "accessTokenExpirationMinutes":
            suggest = "access_token_expiration_minutes"
        elif key == "refreshTokenExpirationMinutes":
            suggest = "refresh_token_expiration_minutes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AuthServersConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AuthServersConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AuthServersConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audiences: Sequence[str],
                 resource_identifier: str,
                 access_token_expiration_minutes: Optional[int] = None,
                 refresh_token_expiration_minutes: Optional[int] = None):
        AuthServersConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            audiences=audiences,
            resource_identifier=resource_identifier,
            access_token_expiration_minutes=access_token_expiration_minutes,
            refresh_token_expiration_minutes=refresh_token_expiration_minutes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             audiences: Sequence[str],
             resource_identifier: str,
             access_token_expiration_minutes: Optional[int] = None,
             refresh_token_expiration_minutes: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("audiences", audiences)
        _setter("resource_identifier", resource_identifier)
        if access_token_expiration_minutes is not None:
            _setter("access_token_expiration_minutes", access_token_expiration_minutes)
        if refresh_token_expiration_minutes is not None:
            _setter("refresh_token_expiration_minutes", refresh_token_expiration_minutes)

    @property
    @pulumi.getter
    def audiences(self) -> Sequence[str]:
        return pulumi.get(self, "audiences")

    @property
    @pulumi.getter(name="resourceIdentifier")
    def resource_identifier(self) -> str:
        return pulumi.get(self, "resource_identifier")

    @property
    @pulumi.getter(name="accessTokenExpirationMinutes")
    def access_token_expiration_minutes(self) -> Optional[int]:
        return pulumi.get(self, "access_token_expiration_minutes")

    @property
    @pulumi.getter(name="refreshTokenExpirationMinutes")
    def refresh_token_expiration_minutes(self) -> Optional[int]:
        return pulumi.get(self, "refresh_token_expiration_minutes")


@pulumi.output_type
class PrivilegesPrivilege(dict):
    def __init__(__self__, *,
                 statements: Optional[Sequence['outputs.PrivilegesPrivilegeStatement']] = None,
                 version: Optional[str] = None):
        PrivilegesPrivilege._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            statements=statements,
            version=version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             statements: Optional[Sequence['outputs.PrivilegesPrivilegeStatement']] = None,
             version: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if statements is not None:
            _setter("statements", statements)
        if version is not None:
            _setter("version", version)

    @property
    @pulumi.getter
    def statements(self) -> Optional[Sequence['outputs.PrivilegesPrivilegeStatement']]:
        return pulumi.get(self, "statements")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class PrivilegesPrivilegeStatement(dict):
    def __init__(__self__, *,
                 actions: Sequence[str],
                 effect: str,
                 scopes: Sequence[str]):
        PrivilegesPrivilegeStatement._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            actions=actions,
            effect=effect,
            scopes=scopes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             actions: Sequence[str],
             effect: str,
             scopes: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("actions", actions)
        _setter("effect", effect)
        _setter("scopes", scopes)

    @property
    @pulumi.getter
    def actions(self) -> Sequence[str]:
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def effect(self) -> str:
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def scopes(self) -> Sequence[str]:
        return pulumi.get(self, "scopes")


@pulumi.output_type
class RiskRulesSource(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        RiskRulesSource._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[str] = None,
             name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if id is not None:
            _setter("id", id)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAppsConfigurationResult(dict):
    def __init__(__self__, *,
                 access_token_expiration_minutes: int,
                 login_url: str,
                 oidc_api_version: str,
                 oidc_application_type: int,
                 oidc_encryption_key: str,
                 post_logout_redirect_uri: str,
                 redirect_uri: str,
                 refresh_token_expiration_minutes: int,
                 token_endpoint_auth_method: int):
        GetAppsConfigurationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_token_expiration_minutes=access_token_expiration_minutes,
            login_url=login_url,
            oidc_api_version=oidc_api_version,
            oidc_application_type=oidc_application_type,
            oidc_encryption_key=oidc_encryption_key,
            post_logout_redirect_uri=post_logout_redirect_uri,
            redirect_uri=redirect_uri,
            refresh_token_expiration_minutes=refresh_token_expiration_minutes,
            token_endpoint_auth_method=token_endpoint_auth_method,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_token_expiration_minutes: int,
             login_url: str,
             oidc_api_version: str,
             oidc_application_type: int,
             oidc_encryption_key: str,
             post_logout_redirect_uri: str,
             redirect_uri: str,
             refresh_token_expiration_minutes: int,
             token_endpoint_auth_method: int,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("access_token_expiration_minutes", access_token_expiration_minutes)
        _setter("login_url", login_url)
        _setter("oidc_api_version", oidc_api_version)
        _setter("oidc_application_type", oidc_application_type)
        _setter("oidc_encryption_key", oidc_encryption_key)
        _setter("post_logout_redirect_uri", post_logout_redirect_uri)
        _setter("redirect_uri", redirect_uri)
        _setter("refresh_token_expiration_minutes", refresh_token_expiration_minutes)
        _setter("token_endpoint_auth_method", token_endpoint_auth_method)

    @property
    @pulumi.getter(name="accessTokenExpirationMinutes")
    def access_token_expiration_minutes(self) -> int:
        return pulumi.get(self, "access_token_expiration_minutes")

    @property
    @pulumi.getter(name="loginUrl")
    def login_url(self) -> str:
        return pulumi.get(self, "login_url")

    @property
    @pulumi.getter(name="oidcApiVersion")
    def oidc_api_version(self) -> str:
        return pulumi.get(self, "oidc_api_version")

    @property
    @pulumi.getter(name="oidcApplicationType")
    def oidc_application_type(self) -> int:
        return pulumi.get(self, "oidc_application_type")

    @property
    @pulumi.getter(name="oidcEncryptionKey")
    def oidc_encryption_key(self) -> str:
        return pulumi.get(self, "oidc_encryption_key")

    @property
    @pulumi.getter(name="postLogoutRedirectUri")
    def post_logout_redirect_uri(self) -> str:
        return pulumi.get(self, "post_logout_redirect_uri")

    @property
    @pulumi.getter(name="redirectUri")
    def redirect_uri(self) -> str:
        return pulumi.get(self, "redirect_uri")

    @property
    @pulumi.getter(name="refreshTokenExpirationMinutes")
    def refresh_token_expiration_minutes(self) -> int:
        return pulumi.get(self, "refresh_token_expiration_minutes")

    @property
    @pulumi.getter(name="tokenEndpointAuthMethod")
    def token_endpoint_auth_method(self) -> int:
        return pulumi.get(self, "token_endpoint_auth_method")


@pulumi.output_type
class GetAppsEnforcementPointResult(dict):
    def __init__(__self__, *,
                 case_sensitive: bool,
                 conditions: str,
                 context_root: str,
                 landing_page: str,
                 permissions: str,
                 require_sitewide_authentication: bool,
                 resources: Sequence['outputs.GetAppsEnforcementPointResourceResult'],
                 session_expiry_fixed: 'outputs.GetAppsEnforcementPointSessionExpiryFixedResult',
                 session_expiry_inactivity: 'outputs.GetAppsEnforcementPointSessionExpiryInactivityResult',
                 target: str,
                 token: str,
                 use_target_host_header: bool,
                 vhost: str):
        GetAppsEnforcementPointResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            case_sensitive=case_sensitive,
            conditions=conditions,
            context_root=context_root,
            landing_page=landing_page,
            permissions=permissions,
            require_sitewide_authentication=require_sitewide_authentication,
            resources=resources,
            session_expiry_fixed=session_expiry_fixed,
            session_expiry_inactivity=session_expiry_inactivity,
            target=target,
            token=token,
            use_target_host_header=use_target_host_header,
            vhost=vhost,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             case_sensitive: bool,
             conditions: str,
             context_root: str,
             landing_page: str,
             permissions: str,
             require_sitewide_authentication: bool,
             resources: Sequence['outputs.GetAppsEnforcementPointResourceResult'],
             session_expiry_fixed: 'outputs.GetAppsEnforcementPointSessionExpiryFixedResult',
             session_expiry_inactivity: 'outputs.GetAppsEnforcementPointSessionExpiryInactivityResult',
             target: str,
             token: str,
             use_target_host_header: bool,
             vhost: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("case_sensitive", case_sensitive)
        _setter("conditions", conditions)
        _setter("context_root", context_root)
        _setter("landing_page", landing_page)
        _setter("permissions", permissions)
        _setter("require_sitewide_authentication", require_sitewide_authentication)
        _setter("resources", resources)
        _setter("session_expiry_fixed", session_expiry_fixed)
        _setter("session_expiry_inactivity", session_expiry_inactivity)
        _setter("target", target)
        _setter("token", token)
        _setter("use_target_host_header", use_target_host_header)
        _setter("vhost", vhost)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> bool:
        return pulumi.get(self, "case_sensitive")

    @property
    @pulumi.getter
    def conditions(self) -> str:
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="contextRoot")
    def context_root(self) -> str:
        return pulumi.get(self, "context_root")

    @property
    @pulumi.getter(name="landingPage")
    def landing_page(self) -> str:
        return pulumi.get(self, "landing_page")

    @property
    @pulumi.getter
    def permissions(self) -> str:
        return pulumi.get(self, "permissions")

    @property
    @pulumi.getter(name="requireSitewideAuthentication")
    def require_sitewide_authentication(self) -> bool:
        return pulumi.get(self, "require_sitewide_authentication")

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetAppsEnforcementPointResourceResult']:
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="sessionExpiryFixed")
    def session_expiry_fixed(self) -> 'outputs.GetAppsEnforcementPointSessionExpiryFixedResult':
        return pulumi.get(self, "session_expiry_fixed")

    @property
    @pulumi.getter(name="sessionExpiryInactivity")
    def session_expiry_inactivity(self) -> 'outputs.GetAppsEnforcementPointSessionExpiryInactivityResult':
        return pulumi.get(self, "session_expiry_inactivity")

    @property
    @pulumi.getter
    def target(self) -> str:
        return pulumi.get(self, "target")

    @property
    @pulumi.getter
    def token(self) -> str:
        return pulumi.get(self, "token")

    @property
    @pulumi.getter(name="useTargetHostHeader")
    def use_target_host_header(self) -> bool:
        return pulumi.get(self, "use_target_host_header")

    @property
    @pulumi.getter
    def vhost(self) -> str:
        return pulumi.get(self, "vhost")


@pulumi.output_type
class GetAppsEnforcementPointResourceResult(dict):
    def __init__(__self__, *,
                 conditions: str,
                 is_path_regex: bool,
                 path: str,
                 permission: str,
                 require_auth: bool):
        GetAppsEnforcementPointResourceResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            conditions=conditions,
            is_path_regex=is_path_regex,
            path=path,
            permission=permission,
            require_auth=require_auth,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             conditions: str,
             is_path_regex: bool,
             path: str,
             permission: str,
             require_auth: bool,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("conditions", conditions)
        _setter("is_path_regex", is_path_regex)
        _setter("path", path)
        _setter("permission", permission)
        _setter("require_auth", require_auth)

    @property
    @pulumi.getter
    def conditions(self) -> str:
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="isPathRegex")
    def is_path_regex(self) -> bool:
        return pulumi.get(self, "is_path_regex")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def permission(self) -> str:
        return pulumi.get(self, "permission")

    @property
    @pulumi.getter(name="requireAuth")
    def require_auth(self) -> bool:
        return pulumi.get(self, "require_auth")


@pulumi.output_type
class GetAppsEnforcementPointSessionExpiryFixedResult(dict):
    def __init__(__self__, *,
                 unit: int,
                 value: int):
        GetAppsEnforcementPointSessionExpiryFixedResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            unit=unit,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             unit: int,
             value: int,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("unit", unit)
        _setter("value", value)

    @property
    @pulumi.getter
    def unit(self) -> int:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> int:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAppsEnforcementPointSessionExpiryInactivityResult(dict):
    def __init__(__self__, *,
                 unit: int,
                 value: int):
        GetAppsEnforcementPointSessionExpiryInactivityResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            unit=unit,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             unit: int,
             value: int,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("unit", unit)
        _setter("value", value)

    @property
    @pulumi.getter
    def unit(self) -> int:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> int:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAppsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        GetAppsFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetAppsParametersResult(dict):
    def __init__(__self__, *,
                 groups: 'outputs.GetAppsParametersGroupsResult'):
        GetAppsParametersResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            groups=groups,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             groups: 'outputs.GetAppsParametersGroupsResult',
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("groups", groups)

    @property
    @pulumi.getter
    def groups(self) -> 'outputs.GetAppsParametersGroupsResult':
        return pulumi.get(self, "groups")


@pulumi.output_type
class GetAppsParametersGroupsResult(dict):
    def __init__(__self__, *,
                 attributes_transformations: str,
                 default_values: str,
                 id: int,
                 label: str,
                 provisioned_entitlements: bool,
                 skip_if_blank: bool,
                 user_attribute_macros: str,
                 user_attribute_mappings: str,
                 values: str):
        GetAppsParametersGroupsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            attributes_transformations=attributes_transformations,
            default_values=default_values,
            id=id,
            label=label,
            provisioned_entitlements=provisioned_entitlements,
            skip_if_blank=skip_if_blank,
            user_attribute_macros=user_attribute_macros,
            user_attribute_mappings=user_attribute_mappings,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             attributes_transformations: str,
             default_values: str,
             id: int,
             label: str,
             provisioned_entitlements: bool,
             skip_if_blank: bool,
             user_attribute_macros: str,
             user_attribute_mappings: str,
             values: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("attributes_transformations", attributes_transformations)
        _setter("default_values", default_values)
        _setter("id", id)
        _setter("label", label)
        _setter("provisioned_entitlements", provisioned_entitlements)
        _setter("skip_if_blank", skip_if_blank)
        _setter("user_attribute_macros", user_attribute_macros)
        _setter("user_attribute_mappings", user_attribute_mappings)
        _setter("values", values)

    @property
    @pulumi.getter(name="attributesTransformations")
    def attributes_transformations(self) -> str:
        return pulumi.get(self, "attributes_transformations")

    @property
    @pulumi.getter(name="defaultValues")
    def default_values(self) -> str:
        return pulumi.get(self, "default_values")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> str:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="provisionedEntitlements")
    def provisioned_entitlements(self) -> bool:
        return pulumi.get(self, "provisioned_entitlements")

    @property
    @pulumi.getter(name="skipIfBlank")
    def skip_if_blank(self) -> bool:
        return pulumi.get(self, "skip_if_blank")

    @property
    @pulumi.getter(name="userAttributeMacros")
    def user_attribute_macros(self) -> str:
        return pulumi.get(self, "user_attribute_macros")

    @property
    @pulumi.getter(name="userAttributeMappings")
    def user_attribute_mappings(self) -> str:
        return pulumi.get(self, "user_attribute_mappings")

    @property
    @pulumi.getter
    def values(self) -> str:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetAppsProvisioningResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 status: str):
        GetAppsProvisioningResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            status=status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: bool,
             status: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("enabled", enabled)
        _setter("status", status)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetAppsSsoResult(dict):
    def __init__(__self__, *,
                 acs_url: str,
                 certificate: 'outputs.GetAppsSsoCertificateResult',
                 client_id: str,
                 client_secret: str,
                 issuer: str,
                 metadata_url: str):
        GetAppsSsoResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            acs_url=acs_url,
            certificate=certificate,
            client_id=client_id,
            client_secret=client_secret,
            issuer=issuer,
            metadata_url=metadata_url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             acs_url: str,
             certificate: 'outputs.GetAppsSsoCertificateResult',
             client_id: str,
             client_secret: str,
             issuer: str,
             metadata_url: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("acs_url", acs_url)
        _setter("certificate", certificate)
        _setter("client_id", client_id)
        _setter("client_secret", client_secret)
        _setter("issuer", issuer)
        _setter("metadata_url", metadata_url)

    @property
    @pulumi.getter(name="acsUrl")
    def acs_url(self) -> str:
        return pulumi.get(self, "acs_url")

    @property
    @pulumi.getter
    def certificate(self) -> 'outputs.GetAppsSsoCertificateResult':
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter
    def issuer(self) -> str:
        return pulumi.get(self, "issuer")

    @property
    @pulumi.getter(name="metadataUrl")
    def metadata_url(self) -> str:
        return pulumi.get(self, "metadata_url")


@pulumi.output_type
class GetAppsSsoCertificateResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str,
                 value: str):
        GetAppsSsoCertificateResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            name=name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: int,
             name: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        _setter("name", name)
        _setter("value", value)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAuthServersClaimsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        GetAuthServersClaimsFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetAuthServersConfigurationResult(dict):
    def __init__(__self__, *,
                 access_token_expiration_minutes: int,
                 audiences: Sequence[str],
                 refresh_token_expiration_minutes: int,
                 resource_identifier: str):
        GetAuthServersConfigurationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_token_expiration_minutes=access_token_expiration_minutes,
            audiences=audiences,
            refresh_token_expiration_minutes=refresh_token_expiration_minutes,
            resource_identifier=resource_identifier,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_token_expiration_minutes: int,
             audiences: Sequence[str],
             refresh_token_expiration_minutes: int,
             resource_identifier: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("access_token_expiration_minutes", access_token_expiration_minutes)
        _setter("audiences", audiences)
        _setter("refresh_token_expiration_minutes", refresh_token_expiration_minutes)
        _setter("resource_identifier", resource_identifier)

    @property
    @pulumi.getter(name="accessTokenExpirationMinutes")
    def access_token_expiration_minutes(self) -> int:
        return pulumi.get(self, "access_token_expiration_minutes")

    @property
    @pulumi.getter
    def audiences(self) -> Sequence[str]:
        return pulumi.get(self, "audiences")

    @property
    @pulumi.getter(name="refreshTokenExpirationMinutes")
    def refresh_token_expiration_minutes(self) -> int:
        return pulumi.get(self, "refresh_token_expiration_minutes")

    @property
    @pulumi.getter(name="resourceIdentifier")
    def resource_identifier(self) -> str:
        return pulumi.get(self, "resource_identifier")


@pulumi.output_type
class GetAuthServersFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        GetAuthServersFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetAuthServersInstanceConfigurationResult(dict):
    def __init__(__self__, *,
                 access_token_expiration_minutes: int,
                 audiences: Sequence[str],
                 refresh_token_expiration_minutes: int,
                 resource_identifier: str):
        GetAuthServersInstanceConfigurationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_token_expiration_minutes=access_token_expiration_minutes,
            audiences=audiences,
            refresh_token_expiration_minutes=refresh_token_expiration_minutes,
            resource_identifier=resource_identifier,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_token_expiration_minutes: int,
             audiences: Sequence[str],
             refresh_token_expiration_minutes: int,
             resource_identifier: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("access_token_expiration_minutes", access_token_expiration_minutes)
        _setter("audiences", audiences)
        _setter("refresh_token_expiration_minutes", refresh_token_expiration_minutes)
        _setter("resource_identifier", resource_identifier)

    @property
    @pulumi.getter(name="accessTokenExpirationMinutes")
    def access_token_expiration_minutes(self) -> int:
        return pulumi.get(self, "access_token_expiration_minutes")

    @property
    @pulumi.getter
    def audiences(self) -> Sequence[str]:
        return pulumi.get(self, "audiences")

    @property
    @pulumi.getter(name="refreshTokenExpirationMinutes")
    def refresh_token_expiration_minutes(self) -> int:
        return pulumi.get(self, "refresh_token_expiration_minutes")

    @property
    @pulumi.getter(name="resourceIdentifier")
    def resource_identifier(self) -> str:
        return pulumi.get(self, "resource_identifier")


@pulumi.output_type
class GetAuthServersScopesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        GetAuthServersScopesFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetMappingsActionResult(dict):
    def __init__(__self__, *,
                 action: str,
                 values: Sequence[str]):
        GetMappingsActionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("action", action)
        _setter("values", values)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetMappingsConditionResult(dict):
    def __init__(__self__, *,
                 operator: str,
                 source: str,
                 value: str):
        GetMappingsConditionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            source=source,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: str,
             source: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("operator", operator)
        _setter("source", source)
        _setter("value", value)

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def source(self) -> str:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetMappingsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        GetMappingsFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPrivilegesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        GetPrivilegesFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPrivilegesInstancePrivilegeResult(dict):
    def __init__(__self__, *,
                 statements: Sequence['outputs.GetPrivilegesInstancePrivilegeStatementResult'],
                 version: str):
        GetPrivilegesInstancePrivilegeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            statements=statements,
            version=version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             statements: Sequence['outputs.GetPrivilegesInstancePrivilegeStatementResult'],
             version: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("statements", statements)
        _setter("version", version)

    @property
    @pulumi.getter
    def statements(self) -> Sequence['outputs.GetPrivilegesInstancePrivilegeStatementResult']:
        return pulumi.get(self, "statements")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetPrivilegesInstancePrivilegeStatementResult(dict):
    def __init__(__self__, *,
                 actions: Sequence[str],
                 effect: str,
                 scopes: Sequence[str]):
        GetPrivilegesInstancePrivilegeStatementResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            actions=actions,
            effect=effect,
            scopes=scopes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             actions: Sequence[str],
             effect: str,
             scopes: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("actions", actions)
        _setter("effect", effect)
        _setter("scopes", scopes)

    @property
    @pulumi.getter
    def actions(self) -> Sequence[str]:
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def effect(self) -> str:
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def scopes(self) -> Sequence[str]:
        return pulumi.get(self, "scopes")


@pulumi.output_type
class GetPrivilegesPrivilegeResult(dict):
    def __init__(__self__, *,
                 statements: Sequence['outputs.GetPrivilegesPrivilegeStatementResult'],
                 version: str):
        GetPrivilegesPrivilegeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            statements=statements,
            version=version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             statements: Sequence['outputs.GetPrivilegesPrivilegeStatementResult'],
             version: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("statements", statements)
        _setter("version", version)

    @property
    @pulumi.getter
    def statements(self) -> Sequence['outputs.GetPrivilegesPrivilegeStatementResult']:
        return pulumi.get(self, "statements")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetPrivilegesPrivilegeStatementResult(dict):
    def __init__(__self__, *,
                 actions: Sequence[str],
                 effect: str,
                 scopes: Sequence[str]):
        GetPrivilegesPrivilegeStatementResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            actions=actions,
            effect=effect,
            scopes=scopes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             actions: Sequence[str],
             effect: str,
             scopes: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("actions", actions)
        _setter("effect", effect)
        _setter("scopes", scopes)

    @property
    @pulumi.getter
    def actions(self) -> Sequence[str]:
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def effect(self) -> str:
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def scopes(self) -> Sequence[str]:
        return pulumi.get(self, "scopes")


@pulumi.output_type
class GetRiskRulesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        GetRiskRulesFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetRiskRulesInstanceSourceResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        GetRiskRulesInstanceSourceResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: str,
             name: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        _setter("name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetRiskRulesSourceResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        GetRiskRulesSourceResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: str,
             name: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        _setter("name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


