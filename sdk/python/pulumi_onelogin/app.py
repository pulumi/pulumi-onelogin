# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AppArgs', 'App']

@pulumi.input_type
class AppArgs:
    def __init__(__self__, *,
                 connector_id: pulumi.Input[int],
                 allow_assumed_signin: Optional[pulumi.Input[bool]] = None,
                 auth_method: Optional[pulumi.Input[int]] = None,
                 auth_method_description: Optional[pulumi.Input[str]] = None,
                 brand_id: Optional[pulumi.Input[int]] = None,
                 configuration: Optional[pulumi.Input['AppConfigurationArgs']] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enforcement_point: Optional[pulumi.Input['AppEnforcementPointArgs']] = None,
                 icon_url: Optional[pulumi.Input[str]] = None,
                 login_config: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input['AppParametersArgs']] = None,
                 policy_id: Optional[pulumi.Input[int]] = None,
                 provisioning: Optional[pulumi.Input['AppProvisioningArgs']] = None,
                 role_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 sso: Optional[pulumi.Input['AppSsoArgs']] = None,
                 tab_id: Optional[pulumi.Input[int]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None,
                 visible: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a App resource.
        :param pulumi.Input[int] connector_id: ID of the connector to base the app from.
        :param pulumi.Input[bool] allow_assumed_signin: Indicates whether or not administrators can access the app as a user that they have assumed control over.
        :param pulumi.Input[int] auth_method: An ID indicating the type of app: - 0: Password - 1: OpenId - 2: SAML - 3: API - 4: Google - 6: Forms Based App - 7:
               WSFED - 8: OpenId Connect
        :param pulumi.Input['AppConfigurationArgs'] configuration: Only apply configurations that are applicable to the type of app
        :param pulumi.Input[str] created_at: the date the app was created
        :param pulumi.Input[str] description: Freeform description of the app.
        :param pulumi.Input['AppEnforcementPointArgs'] enforcement_point: For apps that connect to a OneLogin Access Enforcement Point the following enforcement_point object will be included
               with the app payload.
        :param pulumi.Input[str] icon_url: A link to the apps icon url
        :param pulumi.Input[str] name: The name of the app.
        :param pulumi.Input[str] notes: Freeform notes about the app.
        :param pulumi.Input[int] policy_id: The security policy assigned to the app.
        :param pulumi.Input['AppProvisioningArgs'] provisioning: Indicates if provisioning is enabled for this app.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] role_ids: List of Role IDs that are assigned to the app. On App Create or Update the entire array is replaced with the values
               provided.
        :param pulumi.Input['AppSsoArgs'] sso: The attributes included in the sso section are determined by the type of app. All of the attributes of the `sso` object
               are read only.
        :param pulumi.Input[int] tab_id: ID of the OneLogin portal tab that the app is assigned to.
        :param pulumi.Input[str] updated_at: the date the app was last updated
        :param pulumi.Input[bool] visible: Indicates if the app is visible in the OneLogin portal.
        """
        AppArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            connector_id=connector_id,
            allow_assumed_signin=allow_assumed_signin,
            auth_method=auth_method,
            auth_method_description=auth_method_description,
            brand_id=brand_id,
            configuration=configuration,
            created_at=created_at,
            description=description,
            enforcement_point=enforcement_point,
            icon_url=icon_url,
            login_config=login_config,
            name=name,
            notes=notes,
            parameters=parameters,
            policy_id=policy_id,
            provisioning=provisioning,
            role_ids=role_ids,
            sso=sso,
            tab_id=tab_id,
            updated_at=updated_at,
            visible=visible,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             connector_id: pulumi.Input[int],
             allow_assumed_signin: Optional[pulumi.Input[bool]] = None,
             auth_method: Optional[pulumi.Input[int]] = None,
             auth_method_description: Optional[pulumi.Input[str]] = None,
             brand_id: Optional[pulumi.Input[int]] = None,
             configuration: Optional[pulumi.Input['AppConfigurationArgs']] = None,
             created_at: Optional[pulumi.Input[str]] = None,
             description: Optional[pulumi.Input[str]] = None,
             enforcement_point: Optional[pulumi.Input['AppEnforcementPointArgs']] = None,
             icon_url: Optional[pulumi.Input[str]] = None,
             login_config: Optional[pulumi.Input[int]] = None,
             name: Optional[pulumi.Input[str]] = None,
             notes: Optional[pulumi.Input[str]] = None,
             parameters: Optional[pulumi.Input['AppParametersArgs']] = None,
             policy_id: Optional[pulumi.Input[int]] = None,
             provisioning: Optional[pulumi.Input['AppProvisioningArgs']] = None,
             role_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
             sso: Optional[pulumi.Input['AppSsoArgs']] = None,
             tab_id: Optional[pulumi.Input[int]] = None,
             updated_at: Optional[pulumi.Input[str]] = None,
             visible: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("connector_id", connector_id)
        if allow_assumed_signin is not None:
            _setter("allow_assumed_signin", allow_assumed_signin)
        if auth_method is not None:
            _setter("auth_method", auth_method)
        if auth_method_description is not None:
            _setter("auth_method_description", auth_method_description)
        if brand_id is not None:
            _setter("brand_id", brand_id)
        if configuration is not None:
            _setter("configuration", configuration)
        if created_at is not None:
            _setter("created_at", created_at)
        if description is not None:
            _setter("description", description)
        if enforcement_point is not None:
            _setter("enforcement_point", enforcement_point)
        if icon_url is not None:
            _setter("icon_url", icon_url)
        if login_config is not None:
            _setter("login_config", login_config)
        if name is not None:
            _setter("name", name)
        if notes is not None:
            _setter("notes", notes)
        if parameters is not None:
            _setter("parameters", parameters)
        if policy_id is not None:
            _setter("policy_id", policy_id)
        if provisioning is not None:
            _setter("provisioning", provisioning)
        if role_ids is not None:
            _setter("role_ids", role_ids)
        if sso is not None:
            _setter("sso", sso)
        if tab_id is not None:
            _setter("tab_id", tab_id)
        if updated_at is not None:
            _setter("updated_at", updated_at)
        if visible is not None:
            _setter("visible", visible)

    @property
    @pulumi.getter(name="connectorId")
    def connector_id(self) -> pulumi.Input[int]:
        """
        ID of the connector to base the app from.
        """
        return pulumi.get(self, "connector_id")

    @connector_id.setter
    def connector_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "connector_id", value)

    @property
    @pulumi.getter(name="allowAssumedSignin")
    def allow_assumed_signin(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether or not administrators can access the app as a user that they have assumed control over.
        """
        return pulumi.get(self, "allow_assumed_signin")

    @allow_assumed_signin.setter
    def allow_assumed_signin(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_assumed_signin", value)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> Optional[pulumi.Input[int]]:
        """
        An ID indicating the type of app: - 0: Password - 1: OpenId - 2: SAML - 3: API - 4: Google - 6: Forms Based App - 7:
        WSFED - 8: OpenId Connect
        """
        return pulumi.get(self, "auth_method")

    @auth_method.setter
    def auth_method(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_method", value)

    @property
    @pulumi.getter(name="authMethodDescription")
    def auth_method_description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_method_description")

    @auth_method_description.setter
    def auth_method_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_method_description", value)

    @property
    @pulumi.getter(name="brandId")
    def brand_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "brand_id")

    @brand_id.setter
    def brand_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "brand_id", value)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['AppConfigurationArgs']]:
        """
        Only apply configurations that are applicable to the type of app
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['AppConfigurationArgs']]):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        the date the app was created
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Freeform description of the app.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="enforcementPoint")
    def enforcement_point(self) -> Optional[pulumi.Input['AppEnforcementPointArgs']]:
        """
        For apps that connect to a OneLogin Access Enforcement Point the following enforcement_point object will be included
        with the app payload.
        """
        return pulumi.get(self, "enforcement_point")

    @enforcement_point.setter
    def enforcement_point(self, value: Optional[pulumi.Input['AppEnforcementPointArgs']]):
        pulumi.set(self, "enforcement_point", value)

    @property
    @pulumi.getter(name="iconUrl")
    def icon_url(self) -> Optional[pulumi.Input[str]]:
        """
        A link to the apps icon url
        """
        return pulumi.get(self, "icon_url")

    @icon_url.setter
    def icon_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon_url", value)

    @property
    @pulumi.getter(name="loginConfig")
    def login_config(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "login_config")

    @login_config.setter
    def login_config(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "login_config", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the app.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        """
        Freeform notes about the app.
        """
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input['AppParametersArgs']]:
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input['AppParametersArgs']]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[int]]:
        """
        The security policy assigned to the app.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[pulumi.Input['AppProvisioningArgs']]:
        """
        Indicates if provisioning is enabled for this app.
        """
        return pulumi.get(self, "provisioning")

    @provisioning.setter
    def provisioning(self, value: Optional[pulumi.Input['AppProvisioningArgs']]):
        pulumi.set(self, "provisioning", value)

    @property
    @pulumi.getter(name="roleIds")
    def role_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of Role IDs that are assigned to the app. On App Create or Update the entire array is replaced with the values
        provided.
        """
        return pulumi.get(self, "role_ids")

    @role_ids.setter
    def role_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "role_ids", value)

    @property
    @pulumi.getter
    def sso(self) -> Optional[pulumi.Input['AppSsoArgs']]:
        """
        The attributes included in the sso section are determined by the type of app. All of the attributes of the `sso` object
        are read only.
        """
        return pulumi.get(self, "sso")

    @sso.setter
    def sso(self, value: Optional[pulumi.Input['AppSsoArgs']]):
        pulumi.set(self, "sso", value)

    @property
    @pulumi.getter(name="tabId")
    def tab_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the OneLogin portal tab that the app is assigned to.
        """
        return pulumi.get(self, "tab_id")

    @tab_id.setter
    def tab_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tab_id", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        the date the app was last updated
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)

    @property
    @pulumi.getter
    def visible(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if the app is visible in the OneLogin portal.
        """
        return pulumi.get(self, "visible")

    @visible.setter
    def visible(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "visible", value)


@pulumi.input_type
class _AppState:
    def __init__(__self__, *,
                 allow_assumed_signin: Optional[pulumi.Input[bool]] = None,
                 auth_method: Optional[pulumi.Input[int]] = None,
                 auth_method_description: Optional[pulumi.Input[str]] = None,
                 brand_id: Optional[pulumi.Input[int]] = None,
                 configuration: Optional[pulumi.Input['AppConfigurationArgs']] = None,
                 connector_id: Optional[pulumi.Input[int]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enforcement_point: Optional[pulumi.Input['AppEnforcementPointArgs']] = None,
                 icon_url: Optional[pulumi.Input[str]] = None,
                 login_config: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input['AppParametersArgs']] = None,
                 policy_id: Optional[pulumi.Input[int]] = None,
                 provisioning: Optional[pulumi.Input['AppProvisioningArgs']] = None,
                 role_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 sso: Optional[pulumi.Input['AppSsoArgs']] = None,
                 tab_id: Optional[pulumi.Input[int]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None,
                 visible: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering App resources.
        :param pulumi.Input[bool] allow_assumed_signin: Indicates whether or not administrators can access the app as a user that they have assumed control over.
        :param pulumi.Input[int] auth_method: An ID indicating the type of app: - 0: Password - 1: OpenId - 2: SAML - 3: API - 4: Google - 6: Forms Based App - 7:
               WSFED - 8: OpenId Connect
        :param pulumi.Input['AppConfigurationArgs'] configuration: Only apply configurations that are applicable to the type of app
        :param pulumi.Input[int] connector_id: ID of the connector to base the app from.
        :param pulumi.Input[str] created_at: the date the app was created
        :param pulumi.Input[str] description: Freeform description of the app.
        :param pulumi.Input['AppEnforcementPointArgs'] enforcement_point: For apps that connect to a OneLogin Access Enforcement Point the following enforcement_point object will be included
               with the app payload.
        :param pulumi.Input[str] icon_url: A link to the apps icon url
        :param pulumi.Input[str] name: The name of the app.
        :param pulumi.Input[str] notes: Freeform notes about the app.
        :param pulumi.Input[int] policy_id: The security policy assigned to the app.
        :param pulumi.Input['AppProvisioningArgs'] provisioning: Indicates if provisioning is enabled for this app.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] role_ids: List of Role IDs that are assigned to the app. On App Create or Update the entire array is replaced with the values
               provided.
        :param pulumi.Input['AppSsoArgs'] sso: The attributes included in the sso section are determined by the type of app. All of the attributes of the `sso` object
               are read only.
        :param pulumi.Input[int] tab_id: ID of the OneLogin portal tab that the app is assigned to.
        :param pulumi.Input[str] updated_at: the date the app was last updated
        :param pulumi.Input[bool] visible: Indicates if the app is visible in the OneLogin portal.
        """
        _AppState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allow_assumed_signin=allow_assumed_signin,
            auth_method=auth_method,
            auth_method_description=auth_method_description,
            brand_id=brand_id,
            configuration=configuration,
            connector_id=connector_id,
            created_at=created_at,
            description=description,
            enforcement_point=enforcement_point,
            icon_url=icon_url,
            login_config=login_config,
            name=name,
            notes=notes,
            parameters=parameters,
            policy_id=policy_id,
            provisioning=provisioning,
            role_ids=role_ids,
            sso=sso,
            tab_id=tab_id,
            updated_at=updated_at,
            visible=visible,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allow_assumed_signin: Optional[pulumi.Input[bool]] = None,
             auth_method: Optional[pulumi.Input[int]] = None,
             auth_method_description: Optional[pulumi.Input[str]] = None,
             brand_id: Optional[pulumi.Input[int]] = None,
             configuration: Optional[pulumi.Input['AppConfigurationArgs']] = None,
             connector_id: Optional[pulumi.Input[int]] = None,
             created_at: Optional[pulumi.Input[str]] = None,
             description: Optional[pulumi.Input[str]] = None,
             enforcement_point: Optional[pulumi.Input['AppEnforcementPointArgs']] = None,
             icon_url: Optional[pulumi.Input[str]] = None,
             login_config: Optional[pulumi.Input[int]] = None,
             name: Optional[pulumi.Input[str]] = None,
             notes: Optional[pulumi.Input[str]] = None,
             parameters: Optional[pulumi.Input['AppParametersArgs']] = None,
             policy_id: Optional[pulumi.Input[int]] = None,
             provisioning: Optional[pulumi.Input['AppProvisioningArgs']] = None,
             role_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
             sso: Optional[pulumi.Input['AppSsoArgs']] = None,
             tab_id: Optional[pulumi.Input[int]] = None,
             updated_at: Optional[pulumi.Input[str]] = None,
             visible: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if allow_assumed_signin is not None:
            _setter("allow_assumed_signin", allow_assumed_signin)
        if auth_method is not None:
            _setter("auth_method", auth_method)
        if auth_method_description is not None:
            _setter("auth_method_description", auth_method_description)
        if brand_id is not None:
            _setter("brand_id", brand_id)
        if configuration is not None:
            _setter("configuration", configuration)
        if connector_id is not None:
            _setter("connector_id", connector_id)
        if created_at is not None:
            _setter("created_at", created_at)
        if description is not None:
            _setter("description", description)
        if enforcement_point is not None:
            _setter("enforcement_point", enforcement_point)
        if icon_url is not None:
            _setter("icon_url", icon_url)
        if login_config is not None:
            _setter("login_config", login_config)
        if name is not None:
            _setter("name", name)
        if notes is not None:
            _setter("notes", notes)
        if parameters is not None:
            _setter("parameters", parameters)
        if policy_id is not None:
            _setter("policy_id", policy_id)
        if provisioning is not None:
            _setter("provisioning", provisioning)
        if role_ids is not None:
            _setter("role_ids", role_ids)
        if sso is not None:
            _setter("sso", sso)
        if tab_id is not None:
            _setter("tab_id", tab_id)
        if updated_at is not None:
            _setter("updated_at", updated_at)
        if visible is not None:
            _setter("visible", visible)

    @property
    @pulumi.getter(name="allowAssumedSignin")
    def allow_assumed_signin(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether or not administrators can access the app as a user that they have assumed control over.
        """
        return pulumi.get(self, "allow_assumed_signin")

    @allow_assumed_signin.setter
    def allow_assumed_signin(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_assumed_signin", value)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> Optional[pulumi.Input[int]]:
        """
        An ID indicating the type of app: - 0: Password - 1: OpenId - 2: SAML - 3: API - 4: Google - 6: Forms Based App - 7:
        WSFED - 8: OpenId Connect
        """
        return pulumi.get(self, "auth_method")

    @auth_method.setter
    def auth_method(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_method", value)

    @property
    @pulumi.getter(name="authMethodDescription")
    def auth_method_description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_method_description")

    @auth_method_description.setter
    def auth_method_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_method_description", value)

    @property
    @pulumi.getter(name="brandId")
    def brand_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "brand_id")

    @brand_id.setter
    def brand_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "brand_id", value)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['AppConfigurationArgs']]:
        """
        Only apply configurations that are applicable to the type of app
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['AppConfigurationArgs']]):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter(name="connectorId")
    def connector_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the connector to base the app from.
        """
        return pulumi.get(self, "connector_id")

    @connector_id.setter
    def connector_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connector_id", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        the date the app was created
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Freeform description of the app.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="enforcementPoint")
    def enforcement_point(self) -> Optional[pulumi.Input['AppEnforcementPointArgs']]:
        """
        For apps that connect to a OneLogin Access Enforcement Point the following enforcement_point object will be included
        with the app payload.
        """
        return pulumi.get(self, "enforcement_point")

    @enforcement_point.setter
    def enforcement_point(self, value: Optional[pulumi.Input['AppEnforcementPointArgs']]):
        pulumi.set(self, "enforcement_point", value)

    @property
    @pulumi.getter(name="iconUrl")
    def icon_url(self) -> Optional[pulumi.Input[str]]:
        """
        A link to the apps icon url
        """
        return pulumi.get(self, "icon_url")

    @icon_url.setter
    def icon_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon_url", value)

    @property
    @pulumi.getter(name="loginConfig")
    def login_config(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "login_config")

    @login_config.setter
    def login_config(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "login_config", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the app.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        """
        Freeform notes about the app.
        """
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input['AppParametersArgs']]:
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input['AppParametersArgs']]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[int]]:
        """
        The security policy assigned to the app.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[pulumi.Input['AppProvisioningArgs']]:
        """
        Indicates if provisioning is enabled for this app.
        """
        return pulumi.get(self, "provisioning")

    @provisioning.setter
    def provisioning(self, value: Optional[pulumi.Input['AppProvisioningArgs']]):
        pulumi.set(self, "provisioning", value)

    @property
    @pulumi.getter(name="roleIds")
    def role_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of Role IDs that are assigned to the app. On App Create or Update the entire array is replaced with the values
        provided.
        """
        return pulumi.get(self, "role_ids")

    @role_ids.setter
    def role_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "role_ids", value)

    @property
    @pulumi.getter
    def sso(self) -> Optional[pulumi.Input['AppSsoArgs']]:
        """
        The attributes included in the sso section are determined by the type of app. All of the attributes of the `sso` object
        are read only.
        """
        return pulumi.get(self, "sso")

    @sso.setter
    def sso(self, value: Optional[pulumi.Input['AppSsoArgs']]):
        pulumi.set(self, "sso", value)

    @property
    @pulumi.getter(name="tabId")
    def tab_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the OneLogin portal tab that the app is assigned to.
        """
        return pulumi.get(self, "tab_id")

    @tab_id.setter
    def tab_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tab_id", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        the date the app was last updated
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)

    @property
    @pulumi.getter
    def visible(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if the app is visible in the OneLogin portal.
        """
        return pulumi.get(self, "visible")

    @visible.setter
    def visible(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "visible", value)


class App(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_assumed_signin: Optional[pulumi.Input[bool]] = None,
                 auth_method: Optional[pulumi.Input[int]] = None,
                 auth_method_description: Optional[pulumi.Input[str]] = None,
                 brand_id: Optional[pulumi.Input[int]] = None,
                 configuration: Optional[pulumi.Input[pulumi.InputType['AppConfigurationArgs']]] = None,
                 connector_id: Optional[pulumi.Input[int]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enforcement_point: Optional[pulumi.Input[pulumi.InputType['AppEnforcementPointArgs']]] = None,
                 icon_url: Optional[pulumi.Input[str]] = None,
                 login_config: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[pulumi.InputType['AppParametersArgs']]] = None,
                 policy_id: Optional[pulumi.Input[int]] = None,
                 provisioning: Optional[pulumi.Input[pulumi.InputType['AppProvisioningArgs']]] = None,
                 role_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 sso: Optional[pulumi.Input[pulumi.InputType['AppSsoArgs']]] = None,
                 tab_id: Optional[pulumi.Input[int]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None,
                 visible: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Create a App resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] allow_assumed_signin: Indicates whether or not administrators can access the app as a user that they have assumed control over.
        :param pulumi.Input[int] auth_method: An ID indicating the type of app: - 0: Password - 1: OpenId - 2: SAML - 3: API - 4: Google - 6: Forms Based App - 7:
               WSFED - 8: OpenId Connect
        :param pulumi.Input[pulumi.InputType['AppConfigurationArgs']] configuration: Only apply configurations that are applicable to the type of app
        :param pulumi.Input[int] connector_id: ID of the connector to base the app from.
        :param pulumi.Input[str] created_at: the date the app was created
        :param pulumi.Input[str] description: Freeform description of the app.
        :param pulumi.Input[pulumi.InputType['AppEnforcementPointArgs']] enforcement_point: For apps that connect to a OneLogin Access Enforcement Point the following enforcement_point object will be included
               with the app payload.
        :param pulumi.Input[str] icon_url: A link to the apps icon url
        :param pulumi.Input[str] name: The name of the app.
        :param pulumi.Input[str] notes: Freeform notes about the app.
        :param pulumi.Input[int] policy_id: The security policy assigned to the app.
        :param pulumi.Input[pulumi.InputType['AppProvisioningArgs']] provisioning: Indicates if provisioning is enabled for this app.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] role_ids: List of Role IDs that are assigned to the app. On App Create or Update the entire array is replaced with the values
               provided.
        :param pulumi.Input[pulumi.InputType['AppSsoArgs']] sso: The attributes included in the sso section are determined by the type of app. All of the attributes of the `sso` object
               are read only.
        :param pulumi.Input[int] tab_id: ID of the OneLogin portal tab that the app is assigned to.
        :param pulumi.Input[str] updated_at: the date the app was last updated
        :param pulumi.Input[bool] visible: Indicates if the app is visible in the OneLogin portal.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AppArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a App resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AppArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            AppArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_assumed_signin: Optional[pulumi.Input[bool]] = None,
                 auth_method: Optional[pulumi.Input[int]] = None,
                 auth_method_description: Optional[pulumi.Input[str]] = None,
                 brand_id: Optional[pulumi.Input[int]] = None,
                 configuration: Optional[pulumi.Input[pulumi.InputType['AppConfigurationArgs']]] = None,
                 connector_id: Optional[pulumi.Input[int]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enforcement_point: Optional[pulumi.Input[pulumi.InputType['AppEnforcementPointArgs']]] = None,
                 icon_url: Optional[pulumi.Input[str]] = None,
                 login_config: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[pulumi.InputType['AppParametersArgs']]] = None,
                 policy_id: Optional[pulumi.Input[int]] = None,
                 provisioning: Optional[pulumi.Input[pulumi.InputType['AppProvisioningArgs']]] = None,
                 role_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 sso: Optional[pulumi.Input[pulumi.InputType['AppSsoArgs']]] = None,
                 tab_id: Optional[pulumi.Input[int]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None,
                 visible: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppArgs.__new__(AppArgs)

            __props__.__dict__["allow_assumed_signin"] = allow_assumed_signin
            __props__.__dict__["auth_method"] = auth_method
            __props__.__dict__["auth_method_description"] = auth_method_description
            __props__.__dict__["brand_id"] = brand_id
            if configuration is not None and not isinstance(configuration, AppConfigurationArgs):
                configuration = configuration or {}
                def _setter(key, value):
                    configuration[key] = value
                AppConfigurationArgs._configure(_setter, **configuration)
            __props__.__dict__["configuration"] = configuration
            if connector_id is None and not opts.urn:
                raise TypeError("Missing required property 'connector_id'")
            __props__.__dict__["connector_id"] = connector_id
            __props__.__dict__["created_at"] = created_at
            __props__.__dict__["description"] = description
            if enforcement_point is not None and not isinstance(enforcement_point, AppEnforcementPointArgs):
                enforcement_point = enforcement_point or {}
                def _setter(key, value):
                    enforcement_point[key] = value
                AppEnforcementPointArgs._configure(_setter, **enforcement_point)
            __props__.__dict__["enforcement_point"] = enforcement_point
            __props__.__dict__["icon_url"] = icon_url
            __props__.__dict__["login_config"] = login_config
            __props__.__dict__["name"] = name
            __props__.__dict__["notes"] = notes
            if parameters is not None and not isinstance(parameters, AppParametersArgs):
                parameters = parameters or {}
                def _setter(key, value):
                    parameters[key] = value
                AppParametersArgs._configure(_setter, **parameters)
            __props__.__dict__["parameters"] = parameters
            __props__.__dict__["policy_id"] = policy_id
            if provisioning is not None and not isinstance(provisioning, AppProvisioningArgs):
                provisioning = provisioning or {}
                def _setter(key, value):
                    provisioning[key] = value
                AppProvisioningArgs._configure(_setter, **provisioning)
            __props__.__dict__["provisioning"] = provisioning
            __props__.__dict__["role_ids"] = role_ids
            if sso is not None and not isinstance(sso, AppSsoArgs):
                sso = sso or {}
                def _setter(key, value):
                    sso[key] = value
                AppSsoArgs._configure(_setter, **sso)
            __props__.__dict__["sso"] = sso
            __props__.__dict__["tab_id"] = tab_id
            __props__.__dict__["updated_at"] = updated_at
            __props__.__dict__["visible"] = visible
        super(App, __self__).__init__(
            'onelogin:index/app:App',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allow_assumed_signin: Optional[pulumi.Input[bool]] = None,
            auth_method: Optional[pulumi.Input[int]] = None,
            auth_method_description: Optional[pulumi.Input[str]] = None,
            brand_id: Optional[pulumi.Input[int]] = None,
            configuration: Optional[pulumi.Input[pulumi.InputType['AppConfigurationArgs']]] = None,
            connector_id: Optional[pulumi.Input[int]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            enforcement_point: Optional[pulumi.Input[pulumi.InputType['AppEnforcementPointArgs']]] = None,
            icon_url: Optional[pulumi.Input[str]] = None,
            login_config: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            notes: Optional[pulumi.Input[str]] = None,
            parameters: Optional[pulumi.Input[pulumi.InputType['AppParametersArgs']]] = None,
            policy_id: Optional[pulumi.Input[int]] = None,
            provisioning: Optional[pulumi.Input[pulumi.InputType['AppProvisioningArgs']]] = None,
            role_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            sso: Optional[pulumi.Input[pulumi.InputType['AppSsoArgs']]] = None,
            tab_id: Optional[pulumi.Input[int]] = None,
            updated_at: Optional[pulumi.Input[str]] = None,
            visible: Optional[pulumi.Input[bool]] = None) -> 'App':
        """
        Get an existing App resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] allow_assumed_signin: Indicates whether or not administrators can access the app as a user that they have assumed control over.
        :param pulumi.Input[int] auth_method: An ID indicating the type of app: - 0: Password - 1: OpenId - 2: SAML - 3: API - 4: Google - 6: Forms Based App - 7:
               WSFED - 8: OpenId Connect
        :param pulumi.Input[pulumi.InputType['AppConfigurationArgs']] configuration: Only apply configurations that are applicable to the type of app
        :param pulumi.Input[int] connector_id: ID of the connector to base the app from.
        :param pulumi.Input[str] created_at: the date the app was created
        :param pulumi.Input[str] description: Freeform description of the app.
        :param pulumi.Input[pulumi.InputType['AppEnforcementPointArgs']] enforcement_point: For apps that connect to a OneLogin Access Enforcement Point the following enforcement_point object will be included
               with the app payload.
        :param pulumi.Input[str] icon_url: A link to the apps icon url
        :param pulumi.Input[str] name: The name of the app.
        :param pulumi.Input[str] notes: Freeform notes about the app.
        :param pulumi.Input[int] policy_id: The security policy assigned to the app.
        :param pulumi.Input[pulumi.InputType['AppProvisioningArgs']] provisioning: Indicates if provisioning is enabled for this app.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] role_ids: List of Role IDs that are assigned to the app. On App Create or Update the entire array is replaced with the values
               provided.
        :param pulumi.Input[pulumi.InputType['AppSsoArgs']] sso: The attributes included in the sso section are determined by the type of app. All of the attributes of the `sso` object
               are read only.
        :param pulumi.Input[int] tab_id: ID of the OneLogin portal tab that the app is assigned to.
        :param pulumi.Input[str] updated_at: the date the app was last updated
        :param pulumi.Input[bool] visible: Indicates if the app is visible in the OneLogin portal.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AppState.__new__(_AppState)

        __props__.__dict__["allow_assumed_signin"] = allow_assumed_signin
        __props__.__dict__["auth_method"] = auth_method
        __props__.__dict__["auth_method_description"] = auth_method_description
        __props__.__dict__["brand_id"] = brand_id
        __props__.__dict__["configuration"] = configuration
        __props__.__dict__["connector_id"] = connector_id
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["enforcement_point"] = enforcement_point
        __props__.__dict__["icon_url"] = icon_url
        __props__.__dict__["login_config"] = login_config
        __props__.__dict__["name"] = name
        __props__.__dict__["notes"] = notes
        __props__.__dict__["parameters"] = parameters
        __props__.__dict__["policy_id"] = policy_id
        __props__.__dict__["provisioning"] = provisioning
        __props__.__dict__["role_ids"] = role_ids
        __props__.__dict__["sso"] = sso
        __props__.__dict__["tab_id"] = tab_id
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["visible"] = visible
        return App(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allowAssumedSignin")
    def allow_assumed_signin(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates whether or not administrators can access the app as a user that they have assumed control over.
        """
        return pulumi.get(self, "allow_assumed_signin")

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> pulumi.Output[Optional[int]]:
        """
        An ID indicating the type of app: - 0: Password - 1: OpenId - 2: SAML - 3: API - 4: Google - 6: Forms Based App - 7:
        WSFED - 8: OpenId Connect
        """
        return pulumi.get(self, "auth_method")

    @property
    @pulumi.getter(name="authMethodDescription")
    def auth_method_description(self) -> pulumi.Output[str]:
        return pulumi.get(self, "auth_method_description")

    @property
    @pulumi.getter(name="brandId")
    def brand_id(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "brand_id")

    @property
    @pulumi.getter
    def configuration(self) -> pulumi.Output['outputs.AppConfiguration']:
        """
        Only apply configurations that are applicable to the type of app
        """
        return pulumi.get(self, "configuration")

    @property
    @pulumi.getter(name="connectorId")
    def connector_id(self) -> pulumi.Output[int]:
        """
        ID of the connector to base the app from.
        """
        return pulumi.get(self, "connector_id")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        the date the app was created
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Freeform description of the app.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enforcementPoint")
    def enforcement_point(self) -> pulumi.Output[Optional['outputs.AppEnforcementPoint']]:
        """
        For apps that connect to a OneLogin Access Enforcement Point the following enforcement_point object will be included
        with the app payload.
        """
        return pulumi.get(self, "enforcement_point")

    @property
    @pulumi.getter(name="iconUrl")
    def icon_url(self) -> pulumi.Output[Optional[str]]:
        """
        A link to the apps icon url
        """
        return pulumi.get(self, "icon_url")

    @property
    @pulumi.getter(name="loginConfig")
    def login_config(self) -> pulumi.Output[int]:
        return pulumi.get(self, "login_config")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the app.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def notes(self) -> pulumi.Output[Optional[str]]:
        """
        Freeform notes about the app.
        """
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter
    def parameters(self) -> pulumi.Output['outputs.AppParameters']:
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> pulumi.Output[Optional[int]]:
        """
        The security policy assigned to the app.
        """
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter
    def provisioning(self) -> pulumi.Output[Optional['outputs.AppProvisioning']]:
        """
        Indicates if provisioning is enabled for this app.
        """
        return pulumi.get(self, "provisioning")

    @property
    @pulumi.getter(name="roleIds")
    def role_ids(self) -> pulumi.Output[Optional[Sequence[int]]]:
        """
        List of Role IDs that are assigned to the app. On App Create or Update the entire array is replaced with the values
        provided.
        """
        return pulumi.get(self, "role_ids")

    @property
    @pulumi.getter
    def sso(self) -> pulumi.Output['outputs.AppSso']:
        """
        The attributes included in the sso section are determined by the type of app. All of the attributes of the `sso` object
        are read only.
        """
        return pulumi.get(self, "sso")

    @property
    @pulumi.getter(name="tabId")
    def tab_id(self) -> pulumi.Output[Optional[int]]:
        """
        ID of the OneLogin portal tab that the app is assigned to.
        """
        return pulumi.get(self, "tab_id")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[str]:
        """
        the date the app was last updated
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter
    def visible(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates if the app is visible in the OneLogin portal.
        """
        return pulumi.get(self, "visible")

