# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SmartHookArgs', 'SmartHook']

@pulumi.input_type
class SmartHookArgs:
    def __init__(__self__, *,
                 disabled: pulumi.Input[bool],
                 env_vars: pulumi.Input[Sequence[pulumi.Input[str]]],
                 function: pulumi.Input[str],
                 packages: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 retries: pulumi.Input[int],
                 runtime: pulumi.Input[str],
                 timeout: pulumi.Input[int],
                 type: pulumi.Input[str],
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['SmartHookConditionArgs']]]] = None,
                 context_version: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[Sequence[pulumi.Input['SmartHookOptionArgs']]]] = None):
        """
        The set of arguments for constructing a SmartHook resource.
        :param pulumi.Input[bool] disabled: Indicates if function is available for execution or not. Default true
        :param pulumi.Input[Sequence[pulumi.Input[str]]] env_vars: An array of predefined environment variables to be supplied to the function at runtime.
        :param pulumi.Input[str] function: A base64 encoded blob, or Heredoc string containing the javascript function code.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] packages: A list of public npm packages than will be installed as part of the function build process. These packages names must be on our allowlist. See Node Modules section of this doc. Packages can be any version and support the semantic versioning syntax used by NPM.
        :param pulumi.Input[int] retries: Number of retries if execution fails. Default 0, Max 4
        :param pulumi.Input[int] timeout: The number of milliseconds to allow before timeout. Default 1000, Max 10000
        :param pulumi.Input[str] type: The name of the hook. Must be one of: `user-migration` `pre-authentication` `pre-user-create` `post-user-create` `pre-user-update` `post-user-update`
        :param pulumi.Input[Sequence[pulumi.Input['SmartHookOptionArgs']]] options: A list of options for the hook
        """
        pulumi.set(__self__, "disabled", disabled)
        pulumi.set(__self__, "env_vars", env_vars)
        pulumi.set(__self__, "function", function)
        pulumi.set(__self__, "packages", packages)
        pulumi.set(__self__, "retries", retries)
        pulumi.set(__self__, "runtime", runtime)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "type", type)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if context_version is not None:
            pulumi.set(__self__, "context_version", context_version)
        if options is not None:
            pulumi.set(__self__, "options", options)

    @property
    @pulumi.getter
    def disabled(self) -> pulumi.Input[bool]:
        """
        Indicates if function is available for execution or not. Default true
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter(name="envVars")
    def env_vars(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        An array of predefined environment variables to be supplied to the function at runtime.
        """
        return pulumi.get(self, "env_vars")

    @env_vars.setter
    def env_vars(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "env_vars", value)

    @property
    @pulumi.getter
    def function(self) -> pulumi.Input[str]:
        """
        A base64 encoded blob, or Heredoc string containing the javascript function code.
        """
        return pulumi.get(self, "function")

    @function.setter
    def function(self, value: pulumi.Input[str]):
        pulumi.set(self, "function", value)

    @property
    @pulumi.getter
    def packages(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        A list of public npm packages than will be installed as part of the function build process. These packages names must be on our allowlist. See Node Modules section of this doc. Packages can be any version and support the semantic versioning syntax used by NPM.
        """
        return pulumi.get(self, "packages")

    @packages.setter
    def packages(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "packages", value)

    @property
    @pulumi.getter
    def retries(self) -> pulumi.Input[int]:
        """
        Number of retries if execution fails. Default 0, Max 4
        """
        return pulumi.get(self, "retries")

    @retries.setter
    def retries(self, value: pulumi.Input[int]):
        pulumi.set(self, "retries", value)

    @property
    @pulumi.getter
    def runtime(self) -> pulumi.Input[str]:
        return pulumi.get(self, "runtime")

    @runtime.setter
    def runtime(self, value: pulumi.Input[str]):
        pulumi.set(self, "runtime", value)

    @property
    @pulumi.getter
    def timeout(self) -> pulumi.Input[int]:
        """
        The number of milliseconds to allow before timeout. Default 1000, Max 10000
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: pulumi.Input[int]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The name of the hook. Must be one of: `user-migration` `pre-authentication` `pre-user-create` `post-user-create` `pre-user-update` `post-user-update`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SmartHookConditionArgs']]]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SmartHookConditionArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="contextVersion")
    def context_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "context_version")

    @context_version.setter
    def context_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "context_version", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SmartHookOptionArgs']]]]:
        """
        A list of options for the hook
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SmartHookOptionArgs']]]]):
        pulumi.set(self, "options", value)


@pulumi.input_type
class _SmartHookState:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['SmartHookConditionArgs']]]] = None,
                 context_version: Optional[pulumi.Input[str]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 env_vars: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 function: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[Sequence[pulumi.Input['SmartHookOptionArgs']]]] = None,
                 packages: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 retries: Optional[pulumi.Input[int]] = None,
                 runtime: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SmartHook resources.
        :param pulumi.Input[str] created_at: Timestamp for smarthook's last update
        :param pulumi.Input[bool] disabled: Indicates if function is available for execution or not. Default true
        :param pulumi.Input[Sequence[pulumi.Input[str]]] env_vars: An array of predefined environment variables to be supplied to the function at runtime.
        :param pulumi.Input[str] function: A base64 encoded blob, or Heredoc string containing the javascript function code.
        :param pulumi.Input[Sequence[pulumi.Input['SmartHookOptionArgs']]] options: A list of options for the hook
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] packages: A list of public npm packages than will be installed as part of the function build process. These packages names must be on our allowlist. See Node Modules section of this doc. Packages can be any version and support the semantic versioning syntax used by NPM.
        :param pulumi.Input[int] retries: Number of retries if execution fails. Default 0, Max 4
        :param pulumi.Input[str] status: The smarthook's status.
        :param pulumi.Input[int] timeout: The number of milliseconds to allow before timeout. Default 1000, Max 10000
        :param pulumi.Input[str] type: The name of the hook. Must be one of: `user-migration` `pre-authentication` `pre-user-create` `post-user-create` `pre-user-update` `post-user-update`
        :param pulumi.Input[str] updated_at: Timestamp for smarthook's last update
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if context_version is not None:
            pulumi.set(__self__, "context_version", context_version)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if env_vars is not None:
            pulumi.set(__self__, "env_vars", env_vars)
        if function is not None:
            pulumi.set(__self__, "function", function)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if retries is not None:
            pulumi.set(__self__, "retries", retries)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SmartHookConditionArgs']]]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SmartHookConditionArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="contextVersion")
    def context_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "context_version")

    @context_version.setter
    def context_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "context_version", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp for smarthook's last update
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if function is available for execution or not. Default true
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter(name="envVars")
    def env_vars(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of predefined environment variables to be supplied to the function at runtime.
        """
        return pulumi.get(self, "env_vars")

    @env_vars.setter
    def env_vars(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "env_vars", value)

    @property
    @pulumi.getter
    def function(self) -> Optional[pulumi.Input[str]]:
        """
        A base64 encoded blob, or Heredoc string containing the javascript function code.
        """
        return pulumi.get(self, "function")

    @function.setter
    def function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "function", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SmartHookOptionArgs']]]]:
        """
        A list of options for the hook
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SmartHookOptionArgs']]]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def packages(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A list of public npm packages than will be installed as part of the function build process. These packages names must be on our allowlist. See Node Modules section of this doc. Packages can be any version and support the semantic versioning syntax used by NPM.
        """
        return pulumi.get(self, "packages")

    @packages.setter
    def packages(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "packages", value)

    @property
    @pulumi.getter
    def retries(self) -> Optional[pulumi.Input[int]]:
        """
        Number of retries if execution fails. Default 0, Max 4
        """
        return pulumi.get(self, "retries")

    @retries.setter
    def retries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retries", value)

    @property
    @pulumi.getter
    def runtime(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "runtime")

    @runtime.setter
    def runtime(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "runtime", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The smarthook's status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        """
        The number of milliseconds to allow before timeout. Default 1000, Max 10000
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the hook. Must be one of: `user-migration` `pre-authentication` `pre-user-create` `post-user-create` `pre-user-update` `post-user-update`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp for smarthook's last update
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)


class SmartHook(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SmartHookConditionArgs']]]]] = None,
                 context_version: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 env_vars: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 function: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SmartHookOptionArgs']]]]] = None,
                 packages: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 retries: Optional[pulumi.Input[int]] = None,
                 runtime: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manage SmartHook resources.

        This resource allows you to create and configure SmartHooks.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_onelogin as onelogin

        basic_test = onelogin.SmartHook("basicTest",
            disabled=False,
            env_vars=["API_KEY"],
            function="CQlmdW5jdGlvbiBteUZ1bmMoKSB7CgkJCWxldCBhID0gMTsKCQkJbGV0IGIgPSAxOwoJCQlsZXQgYyA9IGEgKyBiOwoJCSAgY29uc29sZS5sb2coIkRpbmcgRG9uZyIsIGEsIGIsIGMpOwoJCX0K",
            options=[onelogin.SmartHookOptionArgs(
                location_enabled=False,
                risk_enabled=False,
            )],
            packages={
                "mysql": "^2.18.1",
            },
            retries=0,
            timeout=2,
            type="pre-authentication")
        ```

        ## Import

        A SmartHook can be imported via the OneLogin SmartHook.

        ```sh
         $ pulumi import onelogin:index/smartHook:SmartHook example <smarthook_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] disabled: Indicates if function is available for execution or not. Default true
        :param pulumi.Input[Sequence[pulumi.Input[str]]] env_vars: An array of predefined environment variables to be supplied to the function at runtime.
        :param pulumi.Input[str] function: A base64 encoded blob, or Heredoc string containing the javascript function code.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SmartHookOptionArgs']]]] options: A list of options for the hook
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] packages: A list of public npm packages than will be installed as part of the function build process. These packages names must be on our allowlist. See Node Modules section of this doc. Packages can be any version and support the semantic versioning syntax used by NPM.
        :param pulumi.Input[int] retries: Number of retries if execution fails. Default 0, Max 4
        :param pulumi.Input[int] timeout: The number of milliseconds to allow before timeout. Default 1000, Max 10000
        :param pulumi.Input[str] type: The name of the hook. Must be one of: `user-migration` `pre-authentication` `pre-user-create` `post-user-create` `pre-user-update` `post-user-update`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SmartHookArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manage SmartHook resources.

        This resource allows you to create and configure SmartHooks.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_onelogin as onelogin

        basic_test = onelogin.SmartHook("basicTest",
            disabled=False,
            env_vars=["API_KEY"],
            function="CQlmdW5jdGlvbiBteUZ1bmMoKSB7CgkJCWxldCBhID0gMTsKCQkJbGV0IGIgPSAxOwoJCQlsZXQgYyA9IGEgKyBiOwoJCSAgY29uc29sZS5sb2coIkRpbmcgRG9uZyIsIGEsIGIsIGMpOwoJCX0K",
            options=[onelogin.SmartHookOptionArgs(
                location_enabled=False,
                risk_enabled=False,
            )],
            packages={
                "mysql": "^2.18.1",
            },
            retries=0,
            timeout=2,
            type="pre-authentication")
        ```

        ## Import

        A SmartHook can be imported via the OneLogin SmartHook.

        ```sh
         $ pulumi import onelogin:index/smartHook:SmartHook example <smarthook_id>
        ```

        :param str resource_name: The name of the resource.
        :param SmartHookArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SmartHookArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SmartHookConditionArgs']]]]] = None,
                 context_version: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 env_vars: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 function: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SmartHookOptionArgs']]]]] = None,
                 packages: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 retries: Optional[pulumi.Input[int]] = None,
                 runtime: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SmartHookArgs.__new__(SmartHookArgs)

            __props__.__dict__["conditions"] = conditions
            __props__.__dict__["context_version"] = context_version
            if disabled is None and not opts.urn:
                raise TypeError("Missing required property 'disabled'")
            __props__.__dict__["disabled"] = disabled
            if env_vars is None and not opts.urn:
                raise TypeError("Missing required property 'env_vars'")
            __props__.__dict__["env_vars"] = env_vars
            if function is None and not opts.urn:
                raise TypeError("Missing required property 'function'")
            __props__.__dict__["function"] = function
            __props__.__dict__["options"] = options
            if packages is None and not opts.urn:
                raise TypeError("Missing required property 'packages'")
            __props__.__dict__["packages"] = packages
            if retries is None and not opts.urn:
                raise TypeError("Missing required property 'retries'")
            __props__.__dict__["retries"] = retries
            if runtime is None and not opts.urn:
                raise TypeError("Missing required property 'runtime'")
            __props__.__dict__["runtime"] = runtime
            if timeout is None and not opts.urn:
                raise TypeError("Missing required property 'timeout'")
            __props__.__dict__["timeout"] = timeout
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["created_at"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["updated_at"] = None
        super(SmartHook, __self__).__init__(
            'onelogin:index/smartHook:SmartHook',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            conditions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SmartHookConditionArgs']]]]] = None,
            context_version: Optional[pulumi.Input[str]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            disabled: Optional[pulumi.Input[bool]] = None,
            env_vars: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            function: Optional[pulumi.Input[str]] = None,
            options: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SmartHookOptionArgs']]]]] = None,
            packages: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            retries: Optional[pulumi.Input[int]] = None,
            runtime: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            timeout: Optional[pulumi.Input[int]] = None,
            type: Optional[pulumi.Input[str]] = None,
            updated_at: Optional[pulumi.Input[str]] = None) -> 'SmartHook':
        """
        Get an existing SmartHook resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] created_at: Timestamp for smarthook's last update
        :param pulumi.Input[bool] disabled: Indicates if function is available for execution or not. Default true
        :param pulumi.Input[Sequence[pulumi.Input[str]]] env_vars: An array of predefined environment variables to be supplied to the function at runtime.
        :param pulumi.Input[str] function: A base64 encoded blob, or Heredoc string containing the javascript function code.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SmartHookOptionArgs']]]] options: A list of options for the hook
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] packages: A list of public npm packages than will be installed as part of the function build process. These packages names must be on our allowlist. See Node Modules section of this doc. Packages can be any version and support the semantic versioning syntax used by NPM.
        :param pulumi.Input[int] retries: Number of retries if execution fails. Default 0, Max 4
        :param pulumi.Input[str] status: The smarthook's status.
        :param pulumi.Input[int] timeout: The number of milliseconds to allow before timeout. Default 1000, Max 10000
        :param pulumi.Input[str] type: The name of the hook. Must be one of: `user-migration` `pre-authentication` `pre-user-create` `post-user-create` `pre-user-update` `post-user-update`
        :param pulumi.Input[str] updated_at: Timestamp for smarthook's last update
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SmartHookState.__new__(_SmartHookState)

        __props__.__dict__["conditions"] = conditions
        __props__.__dict__["context_version"] = context_version
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["disabled"] = disabled
        __props__.__dict__["env_vars"] = env_vars
        __props__.__dict__["function"] = function
        __props__.__dict__["options"] = options
        __props__.__dict__["packages"] = packages
        __props__.__dict__["retries"] = retries
        __props__.__dict__["runtime"] = runtime
        __props__.__dict__["status"] = status
        __props__.__dict__["timeout"] = timeout
        __props__.__dict__["type"] = type
        __props__.__dict__["updated_at"] = updated_at
        return SmartHook(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def conditions(self) -> pulumi.Output[Optional[Sequence['outputs.SmartHookCondition']]]:
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="contextVersion")
    def context_version(self) -> pulumi.Output[str]:
        return pulumi.get(self, "context_version")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        Timestamp for smarthook's last update
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def disabled(self) -> pulumi.Output[bool]:
        """
        Indicates if function is available for execution or not. Default true
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="envVars")
    def env_vars(self) -> pulumi.Output[Sequence[str]]:
        """
        An array of predefined environment variables to be supplied to the function at runtime.
        """
        return pulumi.get(self, "env_vars")

    @property
    @pulumi.getter
    def function(self) -> pulumi.Output[str]:
        """
        A base64 encoded blob, or Heredoc string containing the javascript function code.
        """
        return pulumi.get(self, "function")

    @property
    @pulumi.getter
    def options(self) -> pulumi.Output[Optional[Sequence['outputs.SmartHookOption']]]:
        """
        A list of options for the hook
        """
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def packages(self) -> pulumi.Output[Mapping[str, str]]:
        """
        A list of public npm packages than will be installed as part of the function build process. These packages names must be on our allowlist. See Node Modules section of this doc. Packages can be any version and support the semantic versioning syntax used by NPM.
        """
        return pulumi.get(self, "packages")

    @property
    @pulumi.getter
    def retries(self) -> pulumi.Output[int]:
        """
        Number of retries if execution fails. Default 0, Max 4
        """
        return pulumi.get(self, "retries")

    @property
    @pulumi.getter
    def runtime(self) -> pulumi.Output[str]:
        return pulumi.get(self, "runtime")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The smarthook's status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def timeout(self) -> pulumi.Output[int]:
        """
        The number of milliseconds to allow before timeout. Default 1000, Max 10000
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The name of the hook. Must be one of: `user-migration` `pre-authentication` `pre-user-create` `post-user-create` `pre-user-update` `post-user-update`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[str]:
        """
        Timestamp for smarthook's last update
        """
        return pulumi.get(self, "updated_at")

