# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetRiskRulesResult',
    'AwaitableGetRiskRulesResult',
    'get_risk_rules',
    'get_risk_rules_output',
]

@pulumi.output_type
class GetRiskRulesResult:
    """
    A collection of values returned by getRiskRules.
    """
    def __init__(__self__, description=None, filter=None, filters=None, id=None, name=None, source=None, target=None, type=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if filter and not isinstance(filter, list):
            raise TypeError("Expected argument 'filter' to be a list")
        pulumi.set(__self__, "filter", filter)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if source and not isinstance(source, dict):
            raise TypeError("Expected argument 'source' to be a dict")
        pulumi.set(__self__, "source", source)
        if target and not isinstance(target, str):
            raise TypeError("Expected argument 'target' to be a str")
        pulumi.set(__self__, "target", target)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def filter(self) -> Optional[Sequence['outputs.GetRiskRulesFilterResult']]:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def filters(self) -> Sequence[str]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def source(self) -> 'outputs.GetRiskRulesSourceResult':
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def target(self) -> str:
        return pulumi.get(self, "target")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


class AwaitableGetRiskRulesResult(GetRiskRulesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRiskRulesResult(
            description=self.description,
            filter=self.filter,
            filters=self.filters,
            id=self.id,
            name=self.name,
            source=self.source,
            target=self.target,
            type=self.type)


def get_risk_rules(description: Optional[str] = None,
                   filter: Optional[Sequence[pulumi.InputType['GetRiskRulesFilterArgs']]] = None,
                   filters: Optional[Sequence[str]] = None,
                   name: Optional[str] = None,
                   source: Optional[pulumi.InputType['GetRiskRulesSourceArgs']] = None,
                   target: Optional[str] = None,
                   type: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRiskRulesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['description'] = description
    __args__['filter'] = filter
    __args__['filters'] = filters
    __args__['name'] = name
    __args__['source'] = source
    __args__['target'] = target
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('onelogin:index/getRiskRules:getRiskRules', __args__, opts=opts, typ=GetRiskRulesResult).value

    return AwaitableGetRiskRulesResult(
        description=pulumi.get(__ret__, 'description'),
        filter=pulumi.get(__ret__, 'filter'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        source=pulumi.get(__ret__, 'source'),
        target=pulumi.get(__ret__, 'target'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_risk_rules)
def get_risk_rules_output(description: Optional[pulumi.Input[Optional[str]]] = None,
                          filter: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetRiskRulesFilterArgs']]]]] = None,
                          filters: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                          name: Optional[pulumi.Input[Optional[str]]] = None,
                          source: Optional[pulumi.Input[Optional[pulumi.InputType['GetRiskRulesSourceArgs']]]] = None,
                          target: Optional[pulumi.Input[Optional[str]]] = None,
                          type: Optional[pulumi.Input[Optional[str]]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRiskRulesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
