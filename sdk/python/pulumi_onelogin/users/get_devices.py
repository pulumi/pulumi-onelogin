# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetDevicesResult',
    'AwaitableGetDevicesResult',
    'get_devices',
    'get_devices_output',
]

@pulumi.output_type
class GetDevicesResult:
    """
    A collection of values returned by getDevices.
    """
    def __init__(__self__, auth_factor_name=None, default=None, device_id=None, filters=None, id=None, type_display_name=None, user_display_name=None, users_id=None):
        if auth_factor_name and not isinstance(auth_factor_name, str):
            raise TypeError("Expected argument 'auth_factor_name' to be a str")
        pulumi.set(__self__, "auth_factor_name", auth_factor_name)
        if default and not isinstance(default, bool):
            raise TypeError("Expected argument 'default' to be a bool")
        pulumi.set(__self__, "default", default)
        if device_id and not isinstance(device_id, str):
            raise TypeError("Expected argument 'device_id' to be a str")
        pulumi.set(__self__, "device_id", device_id)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if type_display_name and not isinstance(type_display_name, str):
            raise TypeError("Expected argument 'type_display_name' to be a str")
        pulumi.set(__self__, "type_display_name", type_display_name)
        if user_display_name and not isinstance(user_display_name, str):
            raise TypeError("Expected argument 'user_display_name' to be a str")
        pulumi.set(__self__, "user_display_name", user_display_name)
        if users_id and not isinstance(users_id, str):
            raise TypeError("Expected argument 'users_id' to be a str")
        pulumi.set(__self__, "users_id", users_id)

    @property
    @pulumi.getter(name="authFactorName")
    def auth_factor_name(self) -> str:
        return pulumi.get(self, "auth_factor_name")

    @property
    @pulumi.getter
    def default(self) -> bool:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> str:
        return pulumi.get(self, "device_id")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetDevicesFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="typeDisplayName")
    def type_display_name(self) -> str:
        return pulumi.get(self, "type_display_name")

    @property
    @pulumi.getter(name="userDisplayName")
    def user_display_name(self) -> str:
        return pulumi.get(self, "user_display_name")

    @property
    @pulumi.getter(name="usersId")
    def users_id(self) -> str:
        return pulumi.get(self, "users_id")


class AwaitableGetDevicesResult(GetDevicesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDevicesResult(
            auth_factor_name=self.auth_factor_name,
            default=self.default,
            device_id=self.device_id,
            filters=self.filters,
            id=self.id,
            type_display_name=self.type_display_name,
            user_display_name=self.user_display_name,
            users_id=self.users_id)


def get_devices(auth_factor_name: Optional[str] = None,
                default: Optional[bool] = None,
                device_id: Optional[str] = None,
                filters: Optional[Sequence[pulumi.InputType['GetDevicesFilterArgs']]] = None,
                type_display_name: Optional[str] = None,
                user_display_name: Optional[str] = None,
                users_id: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDevicesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['authFactorName'] = auth_factor_name
    __args__['default'] = default
    __args__['deviceId'] = device_id
    __args__['filters'] = filters
    __args__['typeDisplayName'] = type_display_name
    __args__['userDisplayName'] = user_display_name
    __args__['usersId'] = users_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('onelogin:users/getDevices:getDevices', __args__, opts=opts, typ=GetDevicesResult).value

    return AwaitableGetDevicesResult(
        auth_factor_name=pulumi.get(__ret__, 'auth_factor_name'),
        default=pulumi.get(__ret__, 'default'),
        device_id=pulumi.get(__ret__, 'device_id'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        type_display_name=pulumi.get(__ret__, 'type_display_name'),
        user_display_name=pulumi.get(__ret__, 'user_display_name'),
        users_id=pulumi.get(__ret__, 'users_id'))


@_utilities.lift_output_func(get_devices)
def get_devices_output(auth_factor_name: Optional[pulumi.Input[Optional[str]]] = None,
                       default: Optional[pulumi.Input[Optional[bool]]] = None,
                       device_id: Optional[pulumi.Input[Optional[str]]] = None,
                       filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetDevicesFilterArgs']]]]] = None,
                       type_display_name: Optional[pulumi.Input[Optional[str]]] = None,
                       user_display_name: Optional[pulumi.Input[Optional[str]]] = None,
                       users_id: Optional[pulumi.Input[str]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDevicesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
