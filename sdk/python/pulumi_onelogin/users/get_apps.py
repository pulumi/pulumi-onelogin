# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetAppsResult',
    'AwaitableGetAppsResult',
    'get_apps',
    'get_apps_output',
]

@pulumi.output_type
class GetAppsResult:
    """
    A collection of values returned by getApps.
    """
    def __init__(__self__, extension=None, filters=None, icon_url=None, id=None, login_id=None, name=None, provisioning_enabled=None, provisioning_state=None, provisioning_status=None, users_id=None):
        if extension and not isinstance(extension, bool):
            raise TypeError("Expected argument 'extension' to be a bool")
        pulumi.set(__self__, "extension", extension)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if icon_url and not isinstance(icon_url, str):
            raise TypeError("Expected argument 'icon_url' to be a str")
        pulumi.set(__self__, "icon_url", icon_url)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if login_id and not isinstance(login_id, int):
            raise TypeError("Expected argument 'login_id' to be a int")
        pulumi.set(__self__, "login_id", login_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provisioning_enabled and not isinstance(provisioning_enabled, bool):
            raise TypeError("Expected argument 'provisioning_enabled' to be a bool")
        pulumi.set(__self__, "provisioning_enabled", provisioning_enabled)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if provisioning_status and not isinstance(provisioning_status, str):
            raise TypeError("Expected argument 'provisioning_status' to be a str")
        pulumi.set(__self__, "provisioning_status", provisioning_status)
        if users_id and not isinstance(users_id, str):
            raise TypeError("Expected argument 'users_id' to be a str")
        pulumi.set(__self__, "users_id", users_id)

    @property
    @pulumi.getter
    def extension(self) -> bool:
        return pulumi.get(self, "extension")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetAppsFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter(name="iconUrl")
    def icon_url(self) -> str:
        return pulumi.get(self, "icon_url")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="loginId")
    def login_id(self) -> int:
        return pulumi.get(self, "login_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningEnabled")
    def provisioning_enabled(self) -> bool:
        return pulumi.get(self, "provisioning_enabled")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="provisioningStatus")
    def provisioning_status(self) -> str:
        return pulumi.get(self, "provisioning_status")

    @property
    @pulumi.getter(name="usersId")
    def users_id(self) -> str:
        return pulumi.get(self, "users_id")


class AwaitableGetAppsResult(GetAppsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppsResult(
            extension=self.extension,
            filters=self.filters,
            icon_url=self.icon_url,
            id=self.id,
            login_id=self.login_id,
            name=self.name,
            provisioning_enabled=self.provisioning_enabled,
            provisioning_state=self.provisioning_state,
            provisioning_status=self.provisioning_status,
            users_id=self.users_id)


def get_apps(extension: Optional[bool] = None,
             filters: Optional[Sequence[pulumi.InputType['GetAppsFilterArgs']]] = None,
             icon_url: Optional[str] = None,
             login_id: Optional[int] = None,
             name: Optional[str] = None,
             provisioning_enabled: Optional[bool] = None,
             provisioning_state: Optional[str] = None,
             provisioning_status: Optional[str] = None,
             users_id: Optional[str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['extension'] = extension
    __args__['filters'] = filters
    __args__['iconUrl'] = icon_url
    __args__['loginId'] = login_id
    __args__['name'] = name
    __args__['provisioningEnabled'] = provisioning_enabled
    __args__['provisioningState'] = provisioning_state
    __args__['provisioningStatus'] = provisioning_status
    __args__['usersId'] = users_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('onelogin:users/getApps:getApps', __args__, opts=opts, typ=GetAppsResult).value

    return AwaitableGetAppsResult(
        extension=pulumi.get(__ret__, 'extension'),
        filters=pulumi.get(__ret__, 'filters'),
        icon_url=pulumi.get(__ret__, 'icon_url'),
        id=pulumi.get(__ret__, 'id'),
        login_id=pulumi.get(__ret__, 'login_id'),
        name=pulumi.get(__ret__, 'name'),
        provisioning_enabled=pulumi.get(__ret__, 'provisioning_enabled'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        provisioning_status=pulumi.get(__ret__, 'provisioning_status'),
        users_id=pulumi.get(__ret__, 'users_id'))


@_utilities.lift_output_func(get_apps)
def get_apps_output(extension: Optional[pulumi.Input[Optional[bool]]] = None,
                    filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetAppsFilterArgs']]]]] = None,
                    icon_url: Optional[pulumi.Input[Optional[str]]] = None,
                    login_id: Optional[pulumi.Input[Optional[int]]] = None,
                    name: Optional[pulumi.Input[Optional[str]]] = None,
                    provisioning_enabled: Optional[pulumi.Input[Optional[bool]]] = None,
                    provisioning_state: Optional[pulumi.Input[Optional[str]]] = None,
                    provisioning_status: Optional[pulumi.Input[Optional[str]]] = None,
                    users_id: Optional[pulumi.Input[str]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAppsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
