# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'RulesActionArgs',
    'RulesConditionArgs',
    'GetActionsFilterArgs',
    'GetActionsValuesFilterArgs',
    'GetConditionsFilterArgs',
    'GetConditionsOperatorsFilterArgs',
    'GetInstanceConfigurationArgs',
    'GetInstanceEnforcementPointArgs',
    'GetInstanceEnforcementPointResourceArgs',
    'GetInstanceEnforcementPointSessionExpiryFixedArgs',
    'GetInstanceEnforcementPointSessionExpiryInactivityArgs',
    'GetInstanceParametersArgs',
    'GetInstanceParametersGroupsArgs',
    'GetInstanceProvisioningArgs',
    'GetInstanceSsoArgs',
    'GetInstanceSsoCertificateArgs',
    'GetRulesActionArgs',
    'GetRulesConditionArgs',
    'GetRulesFilterArgs',
    'GetRulesInstanceActionArgs',
    'GetRulesInstanceConditionArgs',
    'GetUsersFilterArgs',
]

@pulumi.input_type
class RulesActionArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        RulesActionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: Optional[pulumi.Input[str]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if action is not None:
            _setter("action", action)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class RulesConditionArgs:
    def __init__(__self__, *,
                 operator: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        RulesConditionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            source=source,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: Optional[pulumi.Input[str]] = None,
             source: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if operator is not None:
            _setter("operator", operator)
        if source is not None:
            _setter("source", source)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetActionsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        GetActionsFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetActionsValuesFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        GetActionsValuesFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetConditionsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        GetConditionsFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetConditionsOperatorsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        GetConditionsOperatorsFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetInstanceConfigurationArgs:
    def __init__(__self__, *,
                 access_token_expiration_minutes: int,
                 login_url: str,
                 oidc_api_version: str,
                 oidc_application_type: int,
                 oidc_encryption_key: str,
                 post_logout_redirect_uri: str,
                 redirect_uri: str,
                 refresh_token_expiration_minutes: int,
                 token_endpoint_auth_method: int):
        GetInstanceConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_token_expiration_minutes=access_token_expiration_minutes,
            login_url=login_url,
            oidc_api_version=oidc_api_version,
            oidc_application_type=oidc_application_type,
            oidc_encryption_key=oidc_encryption_key,
            post_logout_redirect_uri=post_logout_redirect_uri,
            redirect_uri=redirect_uri,
            refresh_token_expiration_minutes=refresh_token_expiration_minutes,
            token_endpoint_auth_method=token_endpoint_auth_method,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_token_expiration_minutes: int,
             login_url: str,
             oidc_api_version: str,
             oidc_application_type: int,
             oidc_encryption_key: str,
             post_logout_redirect_uri: str,
             redirect_uri: str,
             refresh_token_expiration_minutes: int,
             token_endpoint_auth_method: int,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("access_token_expiration_minutes", access_token_expiration_minutes)
        _setter("login_url", login_url)
        _setter("oidc_api_version", oidc_api_version)
        _setter("oidc_application_type", oidc_application_type)
        _setter("oidc_encryption_key", oidc_encryption_key)
        _setter("post_logout_redirect_uri", post_logout_redirect_uri)
        _setter("redirect_uri", redirect_uri)
        _setter("refresh_token_expiration_minutes", refresh_token_expiration_minutes)
        _setter("token_endpoint_auth_method", token_endpoint_auth_method)

    @property
    @pulumi.getter(name="accessTokenExpirationMinutes")
    def access_token_expiration_minutes(self) -> int:
        return pulumi.get(self, "access_token_expiration_minutes")

    @access_token_expiration_minutes.setter
    def access_token_expiration_minutes(self, value: int):
        pulumi.set(self, "access_token_expiration_minutes", value)

    @property
    @pulumi.getter(name="loginUrl")
    def login_url(self) -> str:
        return pulumi.get(self, "login_url")

    @login_url.setter
    def login_url(self, value: str):
        pulumi.set(self, "login_url", value)

    @property
    @pulumi.getter(name="oidcApiVersion")
    def oidc_api_version(self) -> str:
        return pulumi.get(self, "oidc_api_version")

    @oidc_api_version.setter
    def oidc_api_version(self, value: str):
        pulumi.set(self, "oidc_api_version", value)

    @property
    @pulumi.getter(name="oidcApplicationType")
    def oidc_application_type(self) -> int:
        return pulumi.get(self, "oidc_application_type")

    @oidc_application_type.setter
    def oidc_application_type(self, value: int):
        pulumi.set(self, "oidc_application_type", value)

    @property
    @pulumi.getter(name="oidcEncryptionKey")
    def oidc_encryption_key(self) -> str:
        return pulumi.get(self, "oidc_encryption_key")

    @oidc_encryption_key.setter
    def oidc_encryption_key(self, value: str):
        pulumi.set(self, "oidc_encryption_key", value)

    @property
    @pulumi.getter(name="postLogoutRedirectUri")
    def post_logout_redirect_uri(self) -> str:
        return pulumi.get(self, "post_logout_redirect_uri")

    @post_logout_redirect_uri.setter
    def post_logout_redirect_uri(self, value: str):
        pulumi.set(self, "post_logout_redirect_uri", value)

    @property
    @pulumi.getter(name="redirectUri")
    def redirect_uri(self) -> str:
        return pulumi.get(self, "redirect_uri")

    @redirect_uri.setter
    def redirect_uri(self, value: str):
        pulumi.set(self, "redirect_uri", value)

    @property
    @pulumi.getter(name="refreshTokenExpirationMinutes")
    def refresh_token_expiration_minutes(self) -> int:
        return pulumi.get(self, "refresh_token_expiration_minutes")

    @refresh_token_expiration_minutes.setter
    def refresh_token_expiration_minutes(self, value: int):
        pulumi.set(self, "refresh_token_expiration_minutes", value)

    @property
    @pulumi.getter(name="tokenEndpointAuthMethod")
    def token_endpoint_auth_method(self) -> int:
        return pulumi.get(self, "token_endpoint_auth_method")

    @token_endpoint_auth_method.setter
    def token_endpoint_auth_method(self, value: int):
        pulumi.set(self, "token_endpoint_auth_method", value)


@pulumi.input_type
class GetInstanceEnforcementPointArgs:
    def __init__(__self__, *,
                 case_sensitive: bool,
                 conditions: str,
                 context_root: str,
                 landing_page: str,
                 permissions: str,
                 require_sitewide_authentication: bool,
                 resources: Sequence['GetInstanceEnforcementPointResourceArgs'],
                 session_expiry_fixed: 'GetInstanceEnforcementPointSessionExpiryFixedArgs',
                 session_expiry_inactivity: 'GetInstanceEnforcementPointSessionExpiryInactivityArgs',
                 target: str,
                 token: str,
                 use_target_host_header: bool,
                 vhost: str):
        GetInstanceEnforcementPointArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            case_sensitive=case_sensitive,
            conditions=conditions,
            context_root=context_root,
            landing_page=landing_page,
            permissions=permissions,
            require_sitewide_authentication=require_sitewide_authentication,
            resources=resources,
            session_expiry_fixed=session_expiry_fixed,
            session_expiry_inactivity=session_expiry_inactivity,
            target=target,
            token=token,
            use_target_host_header=use_target_host_header,
            vhost=vhost,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             case_sensitive: bool,
             conditions: str,
             context_root: str,
             landing_page: str,
             permissions: str,
             require_sitewide_authentication: bool,
             resources: Sequence['GetInstanceEnforcementPointResourceArgs'],
             session_expiry_fixed: 'GetInstanceEnforcementPointSessionExpiryFixedArgs',
             session_expiry_inactivity: 'GetInstanceEnforcementPointSessionExpiryInactivityArgs',
             target: str,
             token: str,
             use_target_host_header: bool,
             vhost: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("case_sensitive", case_sensitive)
        _setter("conditions", conditions)
        _setter("context_root", context_root)
        _setter("landing_page", landing_page)
        _setter("permissions", permissions)
        _setter("require_sitewide_authentication", require_sitewide_authentication)
        _setter("resources", resources)
        _setter("session_expiry_fixed", session_expiry_fixed)
        _setter("session_expiry_inactivity", session_expiry_inactivity)
        _setter("target", target)
        _setter("token", token)
        _setter("use_target_host_header", use_target_host_header)
        _setter("vhost", vhost)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> bool:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: bool):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter
    def conditions(self) -> str:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: str):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="contextRoot")
    def context_root(self) -> str:
        return pulumi.get(self, "context_root")

    @context_root.setter
    def context_root(self, value: str):
        pulumi.set(self, "context_root", value)

    @property
    @pulumi.getter(name="landingPage")
    def landing_page(self) -> str:
        return pulumi.get(self, "landing_page")

    @landing_page.setter
    def landing_page(self, value: str):
        pulumi.set(self, "landing_page", value)

    @property
    @pulumi.getter
    def permissions(self) -> str:
        return pulumi.get(self, "permissions")

    @permissions.setter
    def permissions(self, value: str):
        pulumi.set(self, "permissions", value)

    @property
    @pulumi.getter(name="requireSitewideAuthentication")
    def require_sitewide_authentication(self) -> bool:
        return pulumi.get(self, "require_sitewide_authentication")

    @require_sitewide_authentication.setter
    def require_sitewide_authentication(self, value: bool):
        pulumi.set(self, "require_sitewide_authentication", value)

    @property
    @pulumi.getter
    def resources(self) -> Sequence['GetInstanceEnforcementPointResourceArgs']:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Sequence['GetInstanceEnforcementPointResourceArgs']):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter(name="sessionExpiryFixed")
    def session_expiry_fixed(self) -> 'GetInstanceEnforcementPointSessionExpiryFixedArgs':
        return pulumi.get(self, "session_expiry_fixed")

    @session_expiry_fixed.setter
    def session_expiry_fixed(self, value: 'GetInstanceEnforcementPointSessionExpiryFixedArgs'):
        pulumi.set(self, "session_expiry_fixed", value)

    @property
    @pulumi.getter(name="sessionExpiryInactivity")
    def session_expiry_inactivity(self) -> 'GetInstanceEnforcementPointSessionExpiryInactivityArgs':
        return pulumi.get(self, "session_expiry_inactivity")

    @session_expiry_inactivity.setter
    def session_expiry_inactivity(self, value: 'GetInstanceEnforcementPointSessionExpiryInactivityArgs'):
        pulumi.set(self, "session_expiry_inactivity", value)

    @property
    @pulumi.getter
    def target(self) -> str:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: str):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter
    def token(self) -> str:
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: str):
        pulumi.set(self, "token", value)

    @property
    @pulumi.getter(name="useTargetHostHeader")
    def use_target_host_header(self) -> bool:
        return pulumi.get(self, "use_target_host_header")

    @use_target_host_header.setter
    def use_target_host_header(self, value: bool):
        pulumi.set(self, "use_target_host_header", value)

    @property
    @pulumi.getter
    def vhost(self) -> str:
        return pulumi.get(self, "vhost")

    @vhost.setter
    def vhost(self, value: str):
        pulumi.set(self, "vhost", value)


@pulumi.input_type
class GetInstanceEnforcementPointResourceArgs:
    def __init__(__self__, *,
                 conditions: str,
                 is_path_regex: bool,
                 path: str,
                 permission: str,
                 require_auth: bool):
        GetInstanceEnforcementPointResourceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            conditions=conditions,
            is_path_regex=is_path_regex,
            path=path,
            permission=permission,
            require_auth=require_auth,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             conditions: str,
             is_path_regex: bool,
             path: str,
             permission: str,
             require_auth: bool,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("conditions", conditions)
        _setter("is_path_regex", is_path_regex)
        _setter("path", path)
        _setter("permission", permission)
        _setter("require_auth", require_auth)

    @property
    @pulumi.getter
    def conditions(self) -> str:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: str):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="isPathRegex")
    def is_path_regex(self) -> bool:
        return pulumi.get(self, "is_path_regex")

    @is_path_regex.setter
    def is_path_regex(self, value: bool):
        pulumi.set(self, "is_path_regex", value)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: str):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def permission(self) -> str:
        return pulumi.get(self, "permission")

    @permission.setter
    def permission(self, value: str):
        pulumi.set(self, "permission", value)

    @property
    @pulumi.getter(name="requireAuth")
    def require_auth(self) -> bool:
        return pulumi.get(self, "require_auth")

    @require_auth.setter
    def require_auth(self, value: bool):
        pulumi.set(self, "require_auth", value)


@pulumi.input_type
class GetInstanceEnforcementPointSessionExpiryFixedArgs:
    def __init__(__self__, *,
                 unit: int,
                 value: int):
        GetInstanceEnforcementPointSessionExpiryFixedArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            unit=unit,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             unit: int,
             value: int,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("unit", unit)
        _setter("value", value)

    @property
    @pulumi.getter
    def unit(self) -> int:
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: int):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> int:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: int):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetInstanceEnforcementPointSessionExpiryInactivityArgs:
    def __init__(__self__, *,
                 unit: int,
                 value: int):
        GetInstanceEnforcementPointSessionExpiryInactivityArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            unit=unit,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             unit: int,
             value: int,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("unit", unit)
        _setter("value", value)

    @property
    @pulumi.getter
    def unit(self) -> int:
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: int):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> int:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: int):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetInstanceParametersArgs:
    def __init__(__self__, *,
                 groups: 'GetInstanceParametersGroupsArgs'):
        GetInstanceParametersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            groups=groups,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             groups: 'GetInstanceParametersGroupsArgs',
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("groups", groups)

    @property
    @pulumi.getter
    def groups(self) -> 'GetInstanceParametersGroupsArgs':
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: 'GetInstanceParametersGroupsArgs'):
        pulumi.set(self, "groups", value)


@pulumi.input_type
class GetInstanceParametersGroupsArgs:
    def __init__(__self__, *,
                 attributes_transformations: str,
                 default_values: str,
                 id: int,
                 label: str,
                 provisioned_entitlements: bool,
                 skip_if_blank: bool,
                 user_attribute_macros: str,
                 user_attribute_mappings: str,
                 values: str):
        GetInstanceParametersGroupsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            attributes_transformations=attributes_transformations,
            default_values=default_values,
            id=id,
            label=label,
            provisioned_entitlements=provisioned_entitlements,
            skip_if_blank=skip_if_blank,
            user_attribute_macros=user_attribute_macros,
            user_attribute_mappings=user_attribute_mappings,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             attributes_transformations: str,
             default_values: str,
             id: int,
             label: str,
             provisioned_entitlements: bool,
             skip_if_blank: bool,
             user_attribute_macros: str,
             user_attribute_mappings: str,
             values: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("attributes_transformations", attributes_transformations)
        _setter("default_values", default_values)
        _setter("id", id)
        _setter("label", label)
        _setter("provisioned_entitlements", provisioned_entitlements)
        _setter("skip_if_blank", skip_if_blank)
        _setter("user_attribute_macros", user_attribute_macros)
        _setter("user_attribute_mappings", user_attribute_mappings)
        _setter("values", values)

    @property
    @pulumi.getter(name="attributesTransformations")
    def attributes_transformations(self) -> str:
        return pulumi.get(self, "attributes_transformations")

    @attributes_transformations.setter
    def attributes_transformations(self, value: str):
        pulumi.set(self, "attributes_transformations", value)

    @property
    @pulumi.getter(name="defaultValues")
    def default_values(self) -> str:
        return pulumi.get(self, "default_values")

    @default_values.setter
    def default_values(self, value: str):
        pulumi.set(self, "default_values", value)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: int):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def label(self) -> str:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: str):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter(name="provisionedEntitlements")
    def provisioned_entitlements(self) -> bool:
        return pulumi.get(self, "provisioned_entitlements")

    @provisioned_entitlements.setter
    def provisioned_entitlements(self, value: bool):
        pulumi.set(self, "provisioned_entitlements", value)

    @property
    @pulumi.getter(name="skipIfBlank")
    def skip_if_blank(self) -> bool:
        return pulumi.get(self, "skip_if_blank")

    @skip_if_blank.setter
    def skip_if_blank(self, value: bool):
        pulumi.set(self, "skip_if_blank", value)

    @property
    @pulumi.getter(name="userAttributeMacros")
    def user_attribute_macros(self) -> str:
        return pulumi.get(self, "user_attribute_macros")

    @user_attribute_macros.setter
    def user_attribute_macros(self, value: str):
        pulumi.set(self, "user_attribute_macros", value)

    @property
    @pulumi.getter(name="userAttributeMappings")
    def user_attribute_mappings(self) -> str:
        return pulumi.get(self, "user_attribute_mappings")

    @user_attribute_mappings.setter
    def user_attribute_mappings(self, value: str):
        pulumi.set(self, "user_attribute_mappings", value)

    @property
    @pulumi.getter
    def values(self) -> str:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: str):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetInstanceProvisioningArgs:
    def __init__(__self__, *,
                 enabled: bool,
                 status: str):
        GetInstanceProvisioningArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            status=status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: bool,
             status: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("enabled", enabled)
        _setter("status", status)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: bool):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: str):
        pulumi.set(self, "status", value)


@pulumi.input_type
class GetInstanceSsoArgs:
    def __init__(__self__, *,
                 acs_url: str,
                 certificate: 'GetInstanceSsoCertificateArgs',
                 client_id: str,
                 client_secret: str,
                 issuer: str,
                 metadata_url: str):
        GetInstanceSsoArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            acs_url=acs_url,
            certificate=certificate,
            client_id=client_id,
            client_secret=client_secret,
            issuer=issuer,
            metadata_url=metadata_url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             acs_url: str,
             certificate: 'GetInstanceSsoCertificateArgs',
             client_id: str,
             client_secret: str,
             issuer: str,
             metadata_url: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("acs_url", acs_url)
        _setter("certificate", certificate)
        _setter("client_id", client_id)
        _setter("client_secret", client_secret)
        _setter("issuer", issuer)
        _setter("metadata_url", metadata_url)

    @property
    @pulumi.getter(name="acsUrl")
    def acs_url(self) -> str:
        return pulumi.get(self, "acs_url")

    @acs_url.setter
    def acs_url(self, value: str):
        pulumi.set(self, "acs_url", value)

    @property
    @pulumi.getter
    def certificate(self) -> 'GetInstanceSsoCertificateArgs':
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: 'GetInstanceSsoCertificateArgs'):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: str):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: str):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter
    def issuer(self) -> str:
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: str):
        pulumi.set(self, "issuer", value)

    @property
    @pulumi.getter(name="metadataUrl")
    def metadata_url(self) -> str:
        return pulumi.get(self, "metadata_url")

    @metadata_url.setter
    def metadata_url(self, value: str):
        pulumi.set(self, "metadata_url", value)


@pulumi.input_type
class GetInstanceSsoCertificateArgs:
    def __init__(__self__, *,
                 id: int,
                 name: str,
                 value: str):
        GetInstanceSsoCertificateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            name=name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: int,
             name: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        _setter("name", name)
        _setter("value", value)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: int):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetRulesActionArgs:
    def __init__(__self__, *,
                 action: str,
                 values: Sequence[str]):
        GetRulesActionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("action", action)
        _setter("values", values)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: str):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetRulesConditionArgs:
    def __init__(__self__, *,
                 operator: str,
                 source: str,
                 value: str):
        GetRulesConditionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            source=source,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: str,
             source: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("operator", operator)
        _setter("source", source)
        _setter("value", value)

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: str):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def source(self) -> str:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: str):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetRulesFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        GetRulesFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetRulesInstanceActionArgs:
    def __init__(__self__, *,
                 action: str,
                 values: Sequence[str]):
        GetRulesInstanceActionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("action", action)
        _setter("values", values)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: str):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetRulesInstanceConditionArgs:
    def __init__(__self__, *,
                 operator: str,
                 source: str,
                 value: str):
        GetRulesInstanceConditionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            source=source,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: str,
             source: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("operator", operator)
        _setter("source", source)
        _setter("value", value)

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: str):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def source(self) -> str:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: str):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetUsersFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        GetUsersFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


