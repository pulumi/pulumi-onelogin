# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetBrandsResult',
    'AwaitableGetBrandsResult',
    'get_brands',
    'get_brands_output',
]

@pulumi.output_type
class GetBrandsResult:
    """
    A collection of values returned by getBrands.
    """
    def __init__(__self__, enabled=None, filters=None, id=None, name=None):
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetBrandsFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


class AwaitableGetBrandsResult(GetBrandsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBrandsResult(
            enabled=self.enabled,
            filters=self.filters,
            id=self.id,
            name=self.name)


def get_brands(enabled: Optional[bool] = None,
               filters: Optional[Sequence[pulumi.InputType['GetBrandsFilterArgs']]] = None,
               name: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBrandsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['enabled'] = enabled
    __args__['filters'] = filters
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('onelogin:index/getBrands:getBrands', __args__, opts=opts, typ=GetBrandsResult).value

    return AwaitableGetBrandsResult(
        enabled=__ret__.enabled,
        filters=__ret__.filters,
        id=__ret__.id,
        name=__ret__.name)


@_utilities.lift_output_func(get_brands)
def get_brands_output(enabled: Optional[pulumi.Input[Optional[bool]]] = None,
                      filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetBrandsFilterArgs']]]]] = None,
                      name: Optional[pulumi.Input[Optional[str]]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetBrandsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
