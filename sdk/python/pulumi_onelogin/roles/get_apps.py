# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetAppsResult',
    'AwaitableGetAppsResult',
    'get_apps',
    'get_apps_output',
]

@pulumi.output_type
class GetAppsResult:
    """
    A collection of values returned by getApps.
    """
    def __init__(__self__, filters=None, icon_url=None, id=None, name=None, roles_id=None):
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if icon_url and not isinstance(icon_url, str):
            raise TypeError("Expected argument 'icon_url' to be a str")
        pulumi.set(__self__, "icon_url", icon_url)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if roles_id and not isinstance(roles_id, str):
            raise TypeError("Expected argument 'roles_id' to be a str")
        pulumi.set(__self__, "roles_id", roles_id)

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetAppsFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter(name="iconUrl")
    def icon_url(self) -> str:
        return pulumi.get(self, "icon_url")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="rolesId")
    def roles_id(self) -> str:
        return pulumi.get(self, "roles_id")


class AwaitableGetAppsResult(GetAppsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppsResult(
            filters=self.filters,
            icon_url=self.icon_url,
            id=self.id,
            name=self.name,
            roles_id=self.roles_id)


def get_apps(filters: Optional[Sequence[pulumi.InputType['GetAppsFilterArgs']]] = None,
             icon_url: Optional[str] = None,
             name: Optional[str] = None,
             roles_id: Optional[str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['iconUrl'] = icon_url
    __args__['name'] = name
    __args__['rolesId'] = roles_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('onelogin:roles/getApps:getApps', __args__, opts=opts, typ=GetAppsResult).value

    return AwaitableGetAppsResult(
        filters=pulumi.get(__ret__, 'filters'),
        icon_url=pulumi.get(__ret__, 'icon_url'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        roles_id=pulumi.get(__ret__, 'roles_id'))


@_utilities.lift_output_func(get_apps)
def get_apps_output(filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetAppsFilterArgs']]]]] = None,
                    icon_url: Optional[pulumi.Input[Optional[str]]] = None,
                    name: Optional[pulumi.Input[Optional[str]]] = None,
                    roles_id: Optional[pulumi.Input[str]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAppsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
