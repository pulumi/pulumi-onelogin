# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PrivilegeArgs', 'Privilege']

@pulumi.input_type
class PrivilegeArgs:
    def __init__(__self__, *,
                 privileges: pulumi.Input[Sequence[pulumi.Input['PrivilegePrivilegeArgs']]],
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 role_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 user_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None):
        """
        The set of arguments for constructing a Privilege resource.
        :param pulumi.Input[Sequence[pulumi.Input['PrivilegePrivilegeArgs']]] privileges: A list of statements that describe what the privilege grants access to.
        :param pulumi.Input[str] description: Description for the Privilege.
        :param pulumi.Input[str] name: The name of the privilege.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] role_ids: A list of role IDs for whom the role applies.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] user_ids: A list of user IDs for whom the privilege applies.
        """
        pulumi.set(__self__, "privileges", privileges)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if role_ids is not None:
            pulumi.set(__self__, "role_ids", role_ids)
        if user_ids is not None:
            pulumi.set(__self__, "user_ids", user_ids)

    @property
    @pulumi.getter
    def privileges(self) -> pulumi.Input[Sequence[pulumi.Input['PrivilegePrivilegeArgs']]]:
        """
        A list of statements that describe what the privilege grants access to.
        """
        return pulumi.get(self, "privileges")

    @privileges.setter
    def privileges(self, value: pulumi.Input[Sequence[pulumi.Input['PrivilegePrivilegeArgs']]]):
        pulumi.set(self, "privileges", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description for the Privilege.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the privilege.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="roleIds")
    def role_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        A list of role IDs for whom the role applies.
        """
        return pulumi.get(self, "role_ids")

    @role_ids.setter
    def role_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "role_ids", value)

    @property
    @pulumi.getter(name="userIds")
    def user_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        A list of user IDs for whom the privilege applies.
        """
        return pulumi.get(self, "user_ids")

    @user_ids.setter
    def user_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "user_ids", value)


@pulumi.input_type
class _PrivilegeState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 privileges: Optional[pulumi.Input[Sequence[pulumi.Input['PrivilegePrivilegeArgs']]]] = None,
                 role_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 user_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None):
        """
        Input properties used for looking up and filtering Privilege resources.
        :param pulumi.Input[str] description: Description for the Privilege.
        :param pulumi.Input[str] name: The name of the privilege.
        :param pulumi.Input[Sequence[pulumi.Input['PrivilegePrivilegeArgs']]] privileges: A list of statements that describe what the privilege grants access to.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] role_ids: A list of role IDs for whom the role applies.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] user_ids: A list of user IDs for whom the privilege applies.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if privileges is not None:
            pulumi.set(__self__, "privileges", privileges)
        if role_ids is not None:
            pulumi.set(__self__, "role_ids", role_ids)
        if user_ids is not None:
            pulumi.set(__self__, "user_ids", user_ids)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description for the Privilege.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the privilege.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def privileges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PrivilegePrivilegeArgs']]]]:
        """
        A list of statements that describe what the privilege grants access to.
        """
        return pulumi.get(self, "privileges")

    @privileges.setter
    def privileges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PrivilegePrivilegeArgs']]]]):
        pulumi.set(self, "privileges", value)

    @property
    @pulumi.getter(name="roleIds")
    def role_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        A list of role IDs for whom the role applies.
        """
        return pulumi.get(self, "role_ids")

    @role_ids.setter
    def role_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "role_ids", value)

    @property
    @pulumi.getter(name="userIds")
    def user_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        A list of user IDs for whom the privilege applies.
        """
        return pulumi.get(self, "user_ids")

    @user_ids.setter
    def user_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "user_ids", value)


class Privilege(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 privileges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PrivilegePrivilegeArgs']]]]] = None,
                 role_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 user_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 __props__=None):
        """
        Manage Privilege resources.

        This resource allows you to create and configure Privilege.

        ## Example Usage
        ### Strict Ordering

        ```python
        import pulumi
        import pulumi_onelogin as onelogin

        super_admin = onelogin.Privilege("superAdmin",
            description="description",
            privileges=[onelogin.PrivilegePrivilegeArgs(
                statements=[
                    onelogin.PrivilegePrivilegeStatementArgs(
                        action=["apps:List"],
                        effect="Allow",
                        scope=["*"],
                    ),
                    onelogin.PrivilegePrivilegeStatementArgs(
                        action=[
                            "users:List",
                            "users:Update",
                        ],
                        effect="Allow",
                        scope=[
                            "users/123",
                            "users/345",
                        ],
                    ),
                ],
            )],
            role_ids=[
                987,
                654,
            ],
            user_ids=[
                123,
                345,
            ])
        ```

        ## Import

        A privilege can be imported using the OneLogin Privilege ID.

        ```sh
         $ pulumi import onelogin:index/privilege:Privilege super_admin <privilege id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description for the Privilege.
        :param pulumi.Input[str] name: The name of the privilege.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PrivilegePrivilegeArgs']]]] privileges: A list of statements that describe what the privilege grants access to.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] role_ids: A list of role IDs for whom the role applies.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] user_ids: A list of user IDs for whom the privilege applies.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PrivilegeArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manage Privilege resources.

        This resource allows you to create and configure Privilege.

        ## Example Usage
        ### Strict Ordering

        ```python
        import pulumi
        import pulumi_onelogin as onelogin

        super_admin = onelogin.Privilege("superAdmin",
            description="description",
            privileges=[onelogin.PrivilegePrivilegeArgs(
                statements=[
                    onelogin.PrivilegePrivilegeStatementArgs(
                        action=["apps:List"],
                        effect="Allow",
                        scope=["*"],
                    ),
                    onelogin.PrivilegePrivilegeStatementArgs(
                        action=[
                            "users:List",
                            "users:Update",
                        ],
                        effect="Allow",
                        scope=[
                            "users/123",
                            "users/345",
                        ],
                    ),
                ],
            )],
            role_ids=[
                987,
                654,
            ],
            user_ids=[
                123,
                345,
            ])
        ```

        ## Import

        A privilege can be imported using the OneLogin Privilege ID.

        ```sh
         $ pulumi import onelogin:index/privilege:Privilege super_admin <privilege id>
        ```

        :param str resource_name: The name of the resource.
        :param PrivilegeArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PrivilegeArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 privileges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PrivilegePrivilegeArgs']]]]] = None,
                 role_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 user_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PrivilegeArgs.__new__(PrivilegeArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            if privileges is None and not opts.urn:
                raise TypeError("Missing required property 'privileges'")
            __props__.__dict__["privileges"] = privileges
            __props__.__dict__["role_ids"] = role_ids
            __props__.__dict__["user_ids"] = user_ids
        super(Privilege, __self__).__init__(
            'onelogin:index/privilege:Privilege',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            privileges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PrivilegePrivilegeArgs']]]]] = None,
            role_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            user_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None) -> 'Privilege':
        """
        Get an existing Privilege resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description for the Privilege.
        :param pulumi.Input[str] name: The name of the privilege.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PrivilegePrivilegeArgs']]]] privileges: A list of statements that describe what the privilege grants access to.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] role_ids: A list of role IDs for whom the role applies.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] user_ids: A list of user IDs for whom the privilege applies.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PrivilegeState.__new__(_PrivilegeState)

        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["privileges"] = privileges
        __props__.__dict__["role_ids"] = role_ids
        __props__.__dict__["user_ids"] = user_ids
        return Privilege(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description for the Privilege.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the privilege.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def privileges(self) -> pulumi.Output[Sequence['outputs.PrivilegePrivilege']]:
        """
        A list of statements that describe what the privilege grants access to.
        """
        return pulumi.get(self, "privileges")

    @property
    @pulumi.getter(name="roleIds")
    def role_ids(self) -> pulumi.Output[Optional[Sequence[int]]]:
        """
        A list of role IDs for whom the role applies.
        """
        return pulumi.get(self, "role_ids")

    @property
    @pulumi.getter(name="userIds")
    def user_ids(self) -> pulumi.Output[Optional[Sequence[int]]]:
        """
        A list of user IDs for whom the privilege applies.
        """
        return pulumi.get(self, "user_ids")

