# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetAuthorizationsScopesResult',
    'AwaitableGetAuthorizationsScopesResult',
    'get_authorizations_scopes',
    'get_authorizations_scopes_output',
]

@pulumi.output_type
class GetAuthorizationsScopesResult:
    """
    A collection of values returned by getAuthorizationsScopes.
    """
    def __init__(__self__, api_authorizations_id=None, configuration=None, description=None, filters=None, id=None, name=None):
        if api_authorizations_id and not isinstance(api_authorizations_id, str):
            raise TypeError("Expected argument 'api_authorizations_id' to be a str")
        pulumi.set(__self__, "api_authorizations_id", api_authorizations_id)
        if configuration and not isinstance(configuration, dict):
            raise TypeError("Expected argument 'configuration' to be a dict")
        pulumi.set(__self__, "configuration", configuration)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="apiAuthorizationsId")
    def api_authorizations_id(self) -> str:
        return pulumi.get(self, "api_authorizations_id")

    @property
    @pulumi.getter
    def configuration(self) -> 'outputs.GetAuthorizationsScopesConfigurationResult':
        return pulumi.get(self, "configuration")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetAuthorizationsScopesFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


class AwaitableGetAuthorizationsScopesResult(GetAuthorizationsScopesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAuthorizationsScopesResult(
            api_authorizations_id=self.api_authorizations_id,
            configuration=self.configuration,
            description=self.description,
            filters=self.filters,
            id=self.id,
            name=self.name)


def get_authorizations_scopes(api_authorizations_id: Optional[str] = None,
                              configuration: Optional[pulumi.InputType['GetAuthorizationsScopesConfigurationArgs']] = None,
                              description: Optional[str] = None,
                              filters: Optional[Sequence[pulumi.InputType['GetAuthorizationsScopesFilterArgs']]] = None,
                              name: Optional[str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAuthorizationsScopesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['apiAuthorizationsId'] = api_authorizations_id
    __args__['configuration'] = configuration
    __args__['description'] = description
    __args__['filters'] = filters
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('onelogin:api/getAuthorizationsScopes:getAuthorizationsScopes', __args__, opts=opts, typ=GetAuthorizationsScopesResult).value

    return AwaitableGetAuthorizationsScopesResult(
        api_authorizations_id=__ret__.api_authorizations_id,
        configuration=__ret__.configuration,
        description=__ret__.description,
        filters=__ret__.filters,
        id=__ret__.id,
        name=__ret__.name)


@_utilities.lift_output_func(get_authorizations_scopes)
def get_authorizations_scopes_output(api_authorizations_id: Optional[pulumi.Input[str]] = None,
                                     configuration: Optional[pulumi.Input[Optional[pulumi.InputType['GetAuthorizationsScopesConfigurationArgs']]]] = None,
                                     description: Optional[pulumi.Input[Optional[str]]] = None,
                                     filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetAuthorizationsScopesFilterArgs']]]]] = None,
                                     name: Optional[pulumi.Input[Optional[str]]] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAuthorizationsScopesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
