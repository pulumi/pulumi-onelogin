// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.onelogin;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.onelogin.inputs.SmarthooksConditionArgs;
import com.pulumi.onelogin.inputs.SmarthooksOptionArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SmarthooksArgs extends com.pulumi.resources.ResourceArgs {

    public static final SmarthooksArgs Empty = new SmarthooksArgs();

    @Import(name="conditions")
    private @Nullable Output<List<SmarthooksConditionArgs>> conditions;

    public Optional<Output<List<SmarthooksConditionArgs>>> conditions() {
        return Optional.ofNullable(this.conditions);
    }

    @Import(name="contextVersion")
    private @Nullable Output<String> contextVersion;

    public Optional<Output<String>> contextVersion() {
        return Optional.ofNullable(this.contextVersion);
    }

    @Import(name="disabled", required=true)
    private Output<Boolean> disabled;

    public Output<Boolean> disabled() {
        return this.disabled;
    }

    @Import(name="envVars", required=true)
    private Output<List<String>> envVars;

    public Output<List<String>> envVars() {
        return this.envVars;
    }

    @Import(name="function", required=true)
    private Output<String> function;

    public Output<String> function() {
        return this.function;
    }

    @Import(name="options")
    private @Nullable Output<List<SmarthooksOptionArgs>> options;

    public Optional<Output<List<SmarthooksOptionArgs>>> options() {
        return Optional.ofNullable(this.options);
    }

    @Import(name="packages", required=true)
    private Output<Map<String,String>> packages;

    public Output<Map<String,String>> packages() {
        return this.packages;
    }

    @Import(name="retries", required=true)
    private Output<Integer> retries;

    public Output<Integer> retries() {
        return this.retries;
    }

    @Import(name="runtime", required=true)
    private Output<String> runtime;

    public Output<String> runtime() {
        return this.runtime;
    }

    @Import(name="timeout", required=true)
    private Output<Integer> timeout;

    public Output<Integer> timeout() {
        return this.timeout;
    }

    @Import(name="type", required=true)
    private Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    private SmarthooksArgs() {}

    private SmarthooksArgs(SmarthooksArgs $) {
        this.conditions = $.conditions;
        this.contextVersion = $.contextVersion;
        this.disabled = $.disabled;
        this.envVars = $.envVars;
        this.function = $.function;
        this.options = $.options;
        this.packages = $.packages;
        this.retries = $.retries;
        this.runtime = $.runtime;
        this.timeout = $.timeout;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SmarthooksArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SmarthooksArgs $;

        public Builder() {
            $ = new SmarthooksArgs();
        }

        public Builder(SmarthooksArgs defaults) {
            $ = new SmarthooksArgs(Objects.requireNonNull(defaults));
        }

        public Builder conditions(@Nullable Output<List<SmarthooksConditionArgs>> conditions) {
            $.conditions = conditions;
            return this;
        }

        public Builder conditions(List<SmarthooksConditionArgs> conditions) {
            return conditions(Output.of(conditions));
        }

        public Builder conditions(SmarthooksConditionArgs... conditions) {
            return conditions(List.of(conditions));
        }

        public Builder contextVersion(@Nullable Output<String> contextVersion) {
            $.contextVersion = contextVersion;
            return this;
        }

        public Builder contextVersion(String contextVersion) {
            return contextVersion(Output.of(contextVersion));
        }

        public Builder disabled(Output<Boolean> disabled) {
            $.disabled = disabled;
            return this;
        }

        public Builder disabled(Boolean disabled) {
            return disabled(Output.of(disabled));
        }

        public Builder envVars(Output<List<String>> envVars) {
            $.envVars = envVars;
            return this;
        }

        public Builder envVars(List<String> envVars) {
            return envVars(Output.of(envVars));
        }

        public Builder envVars(String... envVars) {
            return envVars(List.of(envVars));
        }

        public Builder function(Output<String> function) {
            $.function = function;
            return this;
        }

        public Builder function(String function) {
            return function(Output.of(function));
        }

        public Builder options(@Nullable Output<List<SmarthooksOptionArgs>> options) {
            $.options = options;
            return this;
        }

        public Builder options(List<SmarthooksOptionArgs> options) {
            return options(Output.of(options));
        }

        public Builder options(SmarthooksOptionArgs... options) {
            return options(List.of(options));
        }

        public Builder packages(Output<Map<String,String>> packages) {
            $.packages = packages;
            return this;
        }

        public Builder packages(Map<String,String> packages) {
            return packages(Output.of(packages));
        }

        public Builder retries(Output<Integer> retries) {
            $.retries = retries;
            return this;
        }

        public Builder retries(Integer retries) {
            return retries(Output.of(retries));
        }

        public Builder runtime(Output<String> runtime) {
            $.runtime = runtime;
            return this;
        }

        public Builder runtime(String runtime) {
            return runtime(Output.of(runtime));
        }

        public Builder timeout(Output<Integer> timeout) {
            $.timeout = timeout;
            return this;
        }

        public Builder timeout(Integer timeout) {
            return timeout(Output.of(timeout));
        }

        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public SmarthooksArgs build() {
            if ($.disabled == null) {
                throw new MissingRequiredPropertyException("SmarthooksArgs", "disabled");
            }
            if ($.envVars == null) {
                throw new MissingRequiredPropertyException("SmarthooksArgs", "envVars");
            }
            if ($.function == null) {
                throw new MissingRequiredPropertyException("SmarthooksArgs", "function");
            }
            if ($.packages == null) {
                throw new MissingRequiredPropertyException("SmarthooksArgs", "packages");
            }
            if ($.retries == null) {
                throw new MissingRequiredPropertyException("SmarthooksArgs", "retries");
            }
            if ($.runtime == null) {
                throw new MissingRequiredPropertyException("SmarthooksArgs", "runtime");
            }
            if ($.timeout == null) {
                throw new MissingRequiredPropertyException("SmarthooksArgs", "timeout");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("SmarthooksArgs", "type");
            }
            return $;
        }
    }

}
