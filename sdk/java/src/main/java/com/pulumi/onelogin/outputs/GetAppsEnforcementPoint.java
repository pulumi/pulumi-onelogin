// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.onelogin.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.onelogin.outputs.GetAppsEnforcementPointResource;
import com.pulumi.onelogin.outputs.GetAppsEnforcementPointSessionExpiryFixed;
import com.pulumi.onelogin.outputs.GetAppsEnforcementPointSessionExpiryInactivity;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetAppsEnforcementPoint {
    /**
     * @return The URL path evaluation is case insensitive by default. Resources hosted on web servers such as Apache, NGINX and Java EE are case sensitive paths. Web servers such as Microsoft IIS are not case-sensitive.
     * 
     */
    private Boolean caseSensitive;
    /**
     * @return If access is conditional, the conditions that must evaluate to true to allow access to a resource. For example, to require the user must be authenticated and have either the role Admin or User
     * 
     */
    private String conditions;
    /**
     * @return The root path to the application, often the name of the application. Can be any name, path or just a slash (“/”). The context root uniquely identifies the application within the enforcement point.
     * 
     */
    private String contextRoot;
    /**
     * @return The location within the context root to which the browser will be redirected for IdP-initiated single sign-on. For example, the landing page might be an index page in the context root such as index.html or default.aspx. The landing page cannot begin with a slash and must use valid URL characters.
     * 
     */
    private String landingPage;
    /**
     * @return Specify to always `allow`, `deny` access to resources, of if access is `conditional`.
     * 
     */
    private String permissions;
    /**
     * @return Require user authentication to access any resource protected by this enforcement point.
     * 
     */
    private Boolean requireSitewideAuthentication;
    /**
     * @return Array of resource objects
     * 
     */
    private List<GetAppsEnforcementPointResource> resources;
    /**
     * @return unit: - 0 = Seconds - 1 = Minutes - 2 = Hours value: - When Unit = 0 or 1 value must be 0-60 - When Unit = 2 value must be 0-24
     * 
     */
    private GetAppsEnforcementPointSessionExpiryFixed sessionExpiryFixed;
    /**
     * @return unit: - 0 = Seconds - 1 = Minutes - 2 = Hours value: - When Unit = 0 or 1 value must be 0-60 - When Unit = 2 value must be 0-24
     * 
     */
    private GetAppsEnforcementPointSessionExpiryInactivity sessionExpiryInactivity;
    /**
     * @return A fully-qualified URL to the internal application including scheme, authority and path. The target host authority must be an IP address, not a hostname.
     * 
     */
    private String target;
    /**
     * @return Can only be set on create. Access Gateway Token.
     * 
     */
    private String token;
    /**
     * @return Use the target host header as opposed to the original gateway or upstream host header.
     * 
     */
    private Boolean useTargetHostHeader;
    /**
     * @return A comma-delimited list of one or more virtual hosts that map to applications assigned to the enforcement point. A VHOST may be a host name or an IP address. VHOST distinguish between applications that are at the same context root.
     * 
     */
    private String vhost;

    private GetAppsEnforcementPoint() {}
    /**
     * @return The URL path evaluation is case insensitive by default. Resources hosted on web servers such as Apache, NGINX and Java EE are case sensitive paths. Web servers such as Microsoft IIS are not case-sensitive.
     * 
     */
    public Boolean caseSensitive() {
        return this.caseSensitive;
    }
    /**
     * @return If access is conditional, the conditions that must evaluate to true to allow access to a resource. For example, to require the user must be authenticated and have either the role Admin or User
     * 
     */
    public String conditions() {
        return this.conditions;
    }
    /**
     * @return The root path to the application, often the name of the application. Can be any name, path or just a slash (“/”). The context root uniquely identifies the application within the enforcement point.
     * 
     */
    public String contextRoot() {
        return this.contextRoot;
    }
    /**
     * @return The location within the context root to which the browser will be redirected for IdP-initiated single sign-on. For example, the landing page might be an index page in the context root such as index.html or default.aspx. The landing page cannot begin with a slash and must use valid URL characters.
     * 
     */
    public String landingPage() {
        return this.landingPage;
    }
    /**
     * @return Specify to always `allow`, `deny` access to resources, of if access is `conditional`.
     * 
     */
    public String permissions() {
        return this.permissions;
    }
    /**
     * @return Require user authentication to access any resource protected by this enforcement point.
     * 
     */
    public Boolean requireSitewideAuthentication() {
        return this.requireSitewideAuthentication;
    }
    /**
     * @return Array of resource objects
     * 
     */
    public List<GetAppsEnforcementPointResource> resources() {
        return this.resources;
    }
    /**
     * @return unit: - 0 = Seconds - 1 = Minutes - 2 = Hours value: - When Unit = 0 or 1 value must be 0-60 - When Unit = 2 value must be 0-24
     * 
     */
    public GetAppsEnforcementPointSessionExpiryFixed sessionExpiryFixed() {
        return this.sessionExpiryFixed;
    }
    /**
     * @return unit: - 0 = Seconds - 1 = Minutes - 2 = Hours value: - When Unit = 0 or 1 value must be 0-60 - When Unit = 2 value must be 0-24
     * 
     */
    public GetAppsEnforcementPointSessionExpiryInactivity sessionExpiryInactivity() {
        return this.sessionExpiryInactivity;
    }
    /**
     * @return A fully-qualified URL to the internal application including scheme, authority and path. The target host authority must be an IP address, not a hostname.
     * 
     */
    public String target() {
        return this.target;
    }
    /**
     * @return Can only be set on create. Access Gateway Token.
     * 
     */
    public String token() {
        return this.token;
    }
    /**
     * @return Use the target host header as opposed to the original gateway or upstream host header.
     * 
     */
    public Boolean useTargetHostHeader() {
        return this.useTargetHostHeader;
    }
    /**
     * @return A comma-delimited list of one or more virtual hosts that map to applications assigned to the enforcement point. A VHOST may be a host name or an IP address. VHOST distinguish between applications that are at the same context root.
     * 
     */
    public String vhost() {
        return this.vhost;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAppsEnforcementPoint defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean caseSensitive;
        private String conditions;
        private String contextRoot;
        private String landingPage;
        private String permissions;
        private Boolean requireSitewideAuthentication;
        private List<GetAppsEnforcementPointResource> resources;
        private GetAppsEnforcementPointSessionExpiryFixed sessionExpiryFixed;
        private GetAppsEnforcementPointSessionExpiryInactivity sessionExpiryInactivity;
        private String target;
        private String token;
        private Boolean useTargetHostHeader;
        private String vhost;
        public Builder() {}
        public Builder(GetAppsEnforcementPoint defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.caseSensitive = defaults.caseSensitive;
    	      this.conditions = defaults.conditions;
    	      this.contextRoot = defaults.contextRoot;
    	      this.landingPage = defaults.landingPage;
    	      this.permissions = defaults.permissions;
    	      this.requireSitewideAuthentication = defaults.requireSitewideAuthentication;
    	      this.resources = defaults.resources;
    	      this.sessionExpiryFixed = defaults.sessionExpiryFixed;
    	      this.sessionExpiryInactivity = defaults.sessionExpiryInactivity;
    	      this.target = defaults.target;
    	      this.token = defaults.token;
    	      this.useTargetHostHeader = defaults.useTargetHostHeader;
    	      this.vhost = defaults.vhost;
        }

        @CustomType.Setter
        public Builder caseSensitive(Boolean caseSensitive) {
            if (caseSensitive == null) {
              throw new MissingRequiredPropertyException("GetAppsEnforcementPoint", "caseSensitive");
            }
            this.caseSensitive = caseSensitive;
            return this;
        }
        @CustomType.Setter
        public Builder conditions(String conditions) {
            if (conditions == null) {
              throw new MissingRequiredPropertyException("GetAppsEnforcementPoint", "conditions");
            }
            this.conditions = conditions;
            return this;
        }
        @CustomType.Setter
        public Builder contextRoot(String contextRoot) {
            if (contextRoot == null) {
              throw new MissingRequiredPropertyException("GetAppsEnforcementPoint", "contextRoot");
            }
            this.contextRoot = contextRoot;
            return this;
        }
        @CustomType.Setter
        public Builder landingPage(String landingPage) {
            if (landingPage == null) {
              throw new MissingRequiredPropertyException("GetAppsEnforcementPoint", "landingPage");
            }
            this.landingPage = landingPage;
            return this;
        }
        @CustomType.Setter
        public Builder permissions(String permissions) {
            if (permissions == null) {
              throw new MissingRequiredPropertyException("GetAppsEnforcementPoint", "permissions");
            }
            this.permissions = permissions;
            return this;
        }
        @CustomType.Setter
        public Builder requireSitewideAuthentication(Boolean requireSitewideAuthentication) {
            if (requireSitewideAuthentication == null) {
              throw new MissingRequiredPropertyException("GetAppsEnforcementPoint", "requireSitewideAuthentication");
            }
            this.requireSitewideAuthentication = requireSitewideAuthentication;
            return this;
        }
        @CustomType.Setter
        public Builder resources(List<GetAppsEnforcementPointResource> resources) {
            if (resources == null) {
              throw new MissingRequiredPropertyException("GetAppsEnforcementPoint", "resources");
            }
            this.resources = resources;
            return this;
        }
        public Builder resources(GetAppsEnforcementPointResource... resources) {
            return resources(List.of(resources));
        }
        @CustomType.Setter
        public Builder sessionExpiryFixed(GetAppsEnforcementPointSessionExpiryFixed sessionExpiryFixed) {
            if (sessionExpiryFixed == null) {
              throw new MissingRequiredPropertyException("GetAppsEnforcementPoint", "sessionExpiryFixed");
            }
            this.sessionExpiryFixed = sessionExpiryFixed;
            return this;
        }
        @CustomType.Setter
        public Builder sessionExpiryInactivity(GetAppsEnforcementPointSessionExpiryInactivity sessionExpiryInactivity) {
            if (sessionExpiryInactivity == null) {
              throw new MissingRequiredPropertyException("GetAppsEnforcementPoint", "sessionExpiryInactivity");
            }
            this.sessionExpiryInactivity = sessionExpiryInactivity;
            return this;
        }
        @CustomType.Setter
        public Builder target(String target) {
            if (target == null) {
              throw new MissingRequiredPropertyException("GetAppsEnforcementPoint", "target");
            }
            this.target = target;
            return this;
        }
        @CustomType.Setter
        public Builder token(String token) {
            if (token == null) {
              throw new MissingRequiredPropertyException("GetAppsEnforcementPoint", "token");
            }
            this.token = token;
            return this;
        }
        @CustomType.Setter
        public Builder useTargetHostHeader(Boolean useTargetHostHeader) {
            if (useTargetHostHeader == null) {
              throw new MissingRequiredPropertyException("GetAppsEnforcementPoint", "useTargetHostHeader");
            }
            this.useTargetHostHeader = useTargetHostHeader;
            return this;
        }
        @CustomType.Setter
        public Builder vhost(String vhost) {
            if (vhost == null) {
              throw new MissingRequiredPropertyException("GetAppsEnforcementPoint", "vhost");
            }
            this.vhost = vhost;
            return this;
        }
        public GetAppsEnforcementPoint build() {
            final var _resultValue = new GetAppsEnforcementPoint();
            _resultValue.caseSensitive = caseSensitive;
            _resultValue.conditions = conditions;
            _resultValue.contextRoot = contextRoot;
            _resultValue.landingPage = landingPage;
            _resultValue.permissions = permissions;
            _resultValue.requireSitewideAuthentication = requireSitewideAuthentication;
            _resultValue.resources = resources;
            _resultValue.sessionExpiryFixed = sessionExpiryFixed;
            _resultValue.sessionExpiryInactivity = sessionExpiryInactivity;
            _resultValue.target = target;
            _resultValue.token = token;
            _resultValue.useTargetHostHeader = useTargetHostHeader;
            _resultValue.vhost = vhost;
            return _resultValue;
        }
    }
}
