// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.onelogin.users.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.onelogin.users.inputs.GetDevicesFilterArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDevicesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDevicesArgs Empty = new GetDevicesArgs();

    @Import(name="authFactorName")
    private @Nullable Output<String> authFactorName;

    public Optional<Output<String>> authFactorName() {
        return Optional.ofNullable(this.authFactorName);
    }

    @Import(name="default")
    private @Nullable Output<Boolean> default_;

    public Optional<Output<Boolean>> default_() {
        return Optional.ofNullable(this.default_);
    }

    @Import(name="deviceId")
    private @Nullable Output<String> deviceId;

    public Optional<Output<String>> deviceId() {
        return Optional.ofNullable(this.deviceId);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetDevicesFilterArgs>> filters;

    public Optional<Output<List<GetDevicesFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    @Import(name="typeDisplayName")
    private @Nullable Output<String> typeDisplayName;

    public Optional<Output<String>> typeDisplayName() {
        return Optional.ofNullable(this.typeDisplayName);
    }

    @Import(name="userDisplayName")
    private @Nullable Output<String> userDisplayName;

    public Optional<Output<String>> userDisplayName() {
        return Optional.ofNullable(this.userDisplayName);
    }

    @Import(name="usersId", required=true)
    private Output<String> usersId;

    public Output<String> usersId() {
        return this.usersId;
    }

    private GetDevicesArgs() {}

    private GetDevicesArgs(GetDevicesArgs $) {
        this.authFactorName = $.authFactorName;
        this.default_ = $.default_;
        this.deviceId = $.deviceId;
        this.filters = $.filters;
        this.typeDisplayName = $.typeDisplayName;
        this.userDisplayName = $.userDisplayName;
        this.usersId = $.usersId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDevicesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDevicesArgs $;

        public Builder() {
            $ = new GetDevicesArgs();
        }

        public Builder(GetDevicesArgs defaults) {
            $ = new GetDevicesArgs(Objects.requireNonNull(defaults));
        }

        public Builder authFactorName(@Nullable Output<String> authFactorName) {
            $.authFactorName = authFactorName;
            return this;
        }

        public Builder authFactorName(String authFactorName) {
            return authFactorName(Output.of(authFactorName));
        }

        public Builder default_(@Nullable Output<Boolean> default_) {
            $.default_ = default_;
            return this;
        }

        public Builder default_(Boolean default_) {
            return default_(Output.of(default_));
        }

        public Builder deviceId(@Nullable Output<String> deviceId) {
            $.deviceId = deviceId;
            return this;
        }

        public Builder deviceId(String deviceId) {
            return deviceId(Output.of(deviceId));
        }

        public Builder filters(@Nullable Output<List<GetDevicesFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetDevicesFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetDevicesFilterArgs... filters) {
            return filters(List.of(filters));
        }

        public Builder typeDisplayName(@Nullable Output<String> typeDisplayName) {
            $.typeDisplayName = typeDisplayName;
            return this;
        }

        public Builder typeDisplayName(String typeDisplayName) {
            return typeDisplayName(Output.of(typeDisplayName));
        }

        public Builder userDisplayName(@Nullable Output<String> userDisplayName) {
            $.userDisplayName = userDisplayName;
            return this;
        }

        public Builder userDisplayName(String userDisplayName) {
            return userDisplayName(Output.of(userDisplayName));
        }

        public Builder usersId(Output<String> usersId) {
            $.usersId = usersId;
            return this;
        }

        public Builder usersId(String usersId) {
            return usersId(Output.of(usersId));
        }

        public GetDevicesArgs build() {
            if ($.usersId == null) {
                throw new MissingRequiredPropertyException("GetDevicesArgs", "usersId");
            }
            return $;
        }
    }

}
