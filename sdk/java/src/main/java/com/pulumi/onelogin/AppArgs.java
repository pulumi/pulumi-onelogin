// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.onelogin;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.onelogin.inputs.AppProvisioningArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppArgs extends com.pulumi.resources.ResourceArgs {

    public static final AppArgs Empty = new AppArgs();

    /**
     * Indicates whether or not administrators can access the app as a user that they have assumed control over.
     * 
     */
    @Import(name="allowAssumedSignin")
    private @Nullable Output<Boolean> allowAssumedSignin;

    /**
     * @return Indicates whether or not administrators can access the app as a user that they have assumed control over.
     * 
     */
    public Optional<Output<Boolean>> allowAssumedSignin() {
        return Optional.ofNullable(this.allowAssumedSignin);
    }

    /**
     * An ID indicating the type of app.
     * 
     */
    @Import(name="authMethod")
    private @Nullable Output<Integer> authMethod;

    /**
     * @return An ID indicating the type of app.
     * 
     */
    public Optional<Output<Integer>> authMethod() {
        return Optional.ofNullable(this.authMethod);
    }

    /**
     * The custom login page branding to use for this app. Applies to app initiated logins via OIDC or SAML.
     * 
     */
    @Import(name="brandId")
    private @Nullable Output<Integer> brandId;

    /**
     * @return The custom login page branding to use for this app. Applies to app initiated logins via OIDC or SAML.
     * 
     */
    public Optional<Output<Integer>> brandId() {
        return Optional.ofNullable(this.brandId);
    }

    /**
     * ID of the apps underlying connector.
     * 
     */
    @Import(name="connectorId")
    private @Nullable Output<Integer> connectorId;

    /**
     * @return ID of the apps underlying connector.
     * 
     */
    public Optional<Output<Integer>> connectorId() {
        return Optional.ofNullable(this.connectorId);
    }

    /**
     * The date the app was created.
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return The date the app was created.
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * Freeform description of the app.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Freeform description of the app.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * A link to the apps icon url.
     * 
     */
    @Import(name="iconUrl")
    private @Nullable Output<String> iconUrl;

    /**
     * @return A link to the apps icon url.
     * 
     */
    public Optional<Output<String>> iconUrl() {
        return Optional.ofNullable(this.iconUrl);
    }

    /**
     * App name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return App name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Freeform notes about the app.
     * 
     */
    @Import(name="notes")
    private @Nullable Output<String> notes;

    /**
     * @return Freeform notes about the app.
     * 
     */
    public Optional<Output<String>> notes() {
        return Optional.ofNullable(this.notes);
    }

    /**
     * The security policy assigned to the app.
     * 
     */
    @Import(name="policyId")
    private @Nullable Output<Integer> policyId;

    /**
     * @return The security policy assigned to the app.
     * 
     */
    public Optional<Output<Integer>> policyId() {
        return Optional.ofNullable(this.policyId);
    }

    @Import(name="provisioning")
    private @Nullable Output<AppProvisioningArgs> provisioning;

    public Optional<Output<AppProvisioningArgs>> provisioning() {
        return Optional.ofNullable(this.provisioning);
    }

    /**
     * A list of OneLogin Role IDs of the user
     * 
     */
    @Import(name="roleIds")
    private @Nullable Output<List<Integer>> roleIds;

    /**
     * @return A list of OneLogin Role IDs of the user
     * 
     */
    public Optional<Output<List<Integer>>> roleIds() {
        return Optional.ofNullable(this.roleIds);
    }

    /**
     * ID of the OneLogin portal tab that the app is assigned to.
     * 
     */
    @Import(name="tabId")
    private @Nullable Output<Integer> tabId;

    /**
     * @return ID of the OneLogin portal tab that the app is assigned to.
     * 
     */
    public Optional<Output<Integer>> tabId() {
        return Optional.ofNullable(this.tabId);
    }

    /**
     * The date the app was last updated.
     * 
     */
    @Import(name="updatedAt")
    private @Nullable Output<String> updatedAt;

    /**
     * @return The date the app was last updated.
     * 
     */
    public Optional<Output<String>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    /**
     * Indicates if the app is visible in the OneLogin portal.
     * 
     */
    @Import(name="visible")
    private @Nullable Output<Boolean> visible;

    /**
     * @return Indicates if the app is visible in the OneLogin portal.
     * 
     */
    public Optional<Output<Boolean>> visible() {
        return Optional.ofNullable(this.visible);
    }

    private AppArgs() {}

    private AppArgs(AppArgs $) {
        this.allowAssumedSignin = $.allowAssumedSignin;
        this.authMethod = $.authMethod;
        this.brandId = $.brandId;
        this.connectorId = $.connectorId;
        this.createdAt = $.createdAt;
        this.description = $.description;
        this.iconUrl = $.iconUrl;
        this.name = $.name;
        this.notes = $.notes;
        this.policyId = $.policyId;
        this.provisioning = $.provisioning;
        this.roleIds = $.roleIds;
        this.tabId = $.tabId;
        this.updatedAt = $.updatedAt;
        this.visible = $.visible;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppArgs $;

        public Builder() {
            $ = new AppArgs();
        }

        public Builder(AppArgs defaults) {
            $ = new AppArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowAssumedSignin Indicates whether or not administrators can access the app as a user that they have assumed control over.
         * 
         * @return builder
         * 
         */
        public Builder allowAssumedSignin(@Nullable Output<Boolean> allowAssumedSignin) {
            $.allowAssumedSignin = allowAssumedSignin;
            return this;
        }

        /**
         * @param allowAssumedSignin Indicates whether or not administrators can access the app as a user that they have assumed control over.
         * 
         * @return builder
         * 
         */
        public Builder allowAssumedSignin(Boolean allowAssumedSignin) {
            return allowAssumedSignin(Output.of(allowAssumedSignin));
        }

        /**
         * @param authMethod An ID indicating the type of app.
         * 
         * @return builder
         * 
         */
        public Builder authMethod(@Nullable Output<Integer> authMethod) {
            $.authMethod = authMethod;
            return this;
        }

        /**
         * @param authMethod An ID indicating the type of app.
         * 
         * @return builder
         * 
         */
        public Builder authMethod(Integer authMethod) {
            return authMethod(Output.of(authMethod));
        }

        /**
         * @param brandId The custom login page branding to use for this app. Applies to app initiated logins via OIDC or SAML.
         * 
         * @return builder
         * 
         */
        public Builder brandId(@Nullable Output<Integer> brandId) {
            $.brandId = brandId;
            return this;
        }

        /**
         * @param brandId The custom login page branding to use for this app. Applies to app initiated logins via OIDC or SAML.
         * 
         * @return builder
         * 
         */
        public Builder brandId(Integer brandId) {
            return brandId(Output.of(brandId));
        }

        /**
         * @param connectorId ID of the apps underlying connector.
         * 
         * @return builder
         * 
         */
        public Builder connectorId(@Nullable Output<Integer> connectorId) {
            $.connectorId = connectorId;
            return this;
        }

        /**
         * @param connectorId ID of the apps underlying connector.
         * 
         * @return builder
         * 
         */
        public Builder connectorId(Integer connectorId) {
            return connectorId(Output.of(connectorId));
        }

        /**
         * @param createdAt The date the app was created.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt The date the app was created.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param description Freeform description of the app.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Freeform description of the app.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param iconUrl A link to the apps icon url.
         * 
         * @return builder
         * 
         */
        public Builder iconUrl(@Nullable Output<String> iconUrl) {
            $.iconUrl = iconUrl;
            return this;
        }

        /**
         * @param iconUrl A link to the apps icon url.
         * 
         * @return builder
         * 
         */
        public Builder iconUrl(String iconUrl) {
            return iconUrl(Output.of(iconUrl));
        }

        /**
         * @param name App name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name App name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param notes Freeform notes about the app.
         * 
         * @return builder
         * 
         */
        public Builder notes(@Nullable Output<String> notes) {
            $.notes = notes;
            return this;
        }

        /**
         * @param notes Freeform notes about the app.
         * 
         * @return builder
         * 
         */
        public Builder notes(String notes) {
            return notes(Output.of(notes));
        }

        /**
         * @param policyId The security policy assigned to the app.
         * 
         * @return builder
         * 
         */
        public Builder policyId(@Nullable Output<Integer> policyId) {
            $.policyId = policyId;
            return this;
        }

        /**
         * @param policyId The security policy assigned to the app.
         * 
         * @return builder
         * 
         */
        public Builder policyId(Integer policyId) {
            return policyId(Output.of(policyId));
        }

        public Builder provisioning(@Nullable Output<AppProvisioningArgs> provisioning) {
            $.provisioning = provisioning;
            return this;
        }

        public Builder provisioning(AppProvisioningArgs provisioning) {
            return provisioning(Output.of(provisioning));
        }

        /**
         * @param roleIds A list of OneLogin Role IDs of the user
         * 
         * @return builder
         * 
         */
        public Builder roleIds(@Nullable Output<List<Integer>> roleIds) {
            $.roleIds = roleIds;
            return this;
        }

        /**
         * @param roleIds A list of OneLogin Role IDs of the user
         * 
         * @return builder
         * 
         */
        public Builder roleIds(List<Integer> roleIds) {
            return roleIds(Output.of(roleIds));
        }

        /**
         * @param roleIds A list of OneLogin Role IDs of the user
         * 
         * @return builder
         * 
         */
        public Builder roleIds(Integer... roleIds) {
            return roleIds(List.of(roleIds));
        }

        /**
         * @param tabId ID of the OneLogin portal tab that the app is assigned to.
         * 
         * @return builder
         * 
         */
        public Builder tabId(@Nullable Output<Integer> tabId) {
            $.tabId = tabId;
            return this;
        }

        /**
         * @param tabId ID of the OneLogin portal tab that the app is assigned to.
         * 
         * @return builder
         * 
         */
        public Builder tabId(Integer tabId) {
            return tabId(Output.of(tabId));
        }

        /**
         * @param updatedAt The date the app was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(@Nullable Output<String> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        /**
         * @param updatedAt The date the app was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(String updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        /**
         * @param visible Indicates if the app is visible in the OneLogin portal.
         * 
         * @return builder
         * 
         */
        public Builder visible(@Nullable Output<Boolean> visible) {
            $.visible = visible;
            return this;
        }

        /**
         * @param visible Indicates if the app is visible in the OneLogin portal.
         * 
         * @return builder
         * 
         */
        public Builder visible(Boolean visible) {
            return visible(Output.of(visible));
        }

        public AppArgs build() {
            return $;
        }
    }

}
