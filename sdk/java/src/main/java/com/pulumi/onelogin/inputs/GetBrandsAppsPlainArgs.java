// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.onelogin.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.onelogin.inputs.GetBrandsAppsFilter;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetBrandsAppsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetBrandsAppsPlainArgs Empty = new GetBrandsAppsPlainArgs();

    @Import(name="authMethod")
    private @Nullable Integer authMethod;

    public Optional<Integer> authMethod() {
        return Optional.ofNullable(this.authMethod);
    }

    @Import(name="authMethodDescription")
    private @Nullable String authMethodDescription;

    public Optional<String> authMethodDescription() {
        return Optional.ofNullable(this.authMethodDescription);
    }

    @Import(name="brandsId", required=true)
    private String brandsId;

    public String brandsId() {
        return this.brandsId;
    }

    @Import(name="connectorId")
    private @Nullable Integer connectorId;

    public Optional<Integer> connectorId() {
        return Optional.ofNullable(this.connectorId);
    }

    @Import(name="createdAt")
    private @Nullable String createdAt;

    public Optional<String> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    @Import(name="description")
    private @Nullable String description;

    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="filters")
    private @Nullable List<GetBrandsAppsFilter> filters;

    public Optional<List<GetBrandsAppsFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    @Import(name="name")
    private @Nullable String name;

    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="updatedAt")
    private @Nullable String updatedAt;

    public Optional<String> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    @Import(name="visible")
    private @Nullable Boolean visible;

    public Optional<Boolean> visible() {
        return Optional.ofNullable(this.visible);
    }

    private GetBrandsAppsPlainArgs() {}

    private GetBrandsAppsPlainArgs(GetBrandsAppsPlainArgs $) {
        this.authMethod = $.authMethod;
        this.authMethodDescription = $.authMethodDescription;
        this.brandsId = $.brandsId;
        this.connectorId = $.connectorId;
        this.createdAt = $.createdAt;
        this.description = $.description;
        this.filters = $.filters;
        this.name = $.name;
        this.updatedAt = $.updatedAt;
        this.visible = $.visible;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetBrandsAppsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetBrandsAppsPlainArgs $;

        public Builder() {
            $ = new GetBrandsAppsPlainArgs();
        }

        public Builder(GetBrandsAppsPlainArgs defaults) {
            $ = new GetBrandsAppsPlainArgs(Objects.requireNonNull(defaults));
        }

        public Builder authMethod(@Nullable Integer authMethod) {
            $.authMethod = authMethod;
            return this;
        }

        public Builder authMethodDescription(@Nullable String authMethodDescription) {
            $.authMethodDescription = authMethodDescription;
            return this;
        }

        public Builder brandsId(String brandsId) {
            $.brandsId = brandsId;
            return this;
        }

        public Builder connectorId(@Nullable Integer connectorId) {
            $.connectorId = connectorId;
            return this;
        }

        public Builder createdAt(@Nullable String createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        public Builder filters(@Nullable List<GetBrandsAppsFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetBrandsAppsFilter... filters) {
            return filters(List.of(filters));
        }

        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        public Builder updatedAt(@Nullable String updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        public Builder visible(@Nullable Boolean visible) {
            $.visible = visible;
            return this;
        }

        public GetBrandsAppsPlainArgs build() {
            $.brandsId = Objects.requireNonNull($.brandsId, "expected parameter 'brandsId' to be non-null");
            return $;
        }
    }

}
