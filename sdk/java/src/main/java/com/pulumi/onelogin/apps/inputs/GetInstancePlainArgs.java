// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.onelogin.apps.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.onelogin.apps.inputs.GetInstanceProvisioning;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetInstancePlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetInstancePlainArgs Empty = new GetInstancePlainArgs();

    @Import(name="allowAssumedSignin")
    private @Nullable Boolean allowAssumedSignin;

    public Optional<Boolean> allowAssumedSignin() {
        return Optional.ofNullable(this.allowAssumedSignin);
    }

    @Import(name="authMethod")
    private @Nullable Integer authMethod;

    public Optional<Integer> authMethod() {
        return Optional.ofNullable(this.authMethod);
    }

    @Import(name="brandId")
    private @Nullable Integer brandId;

    public Optional<Integer> brandId() {
        return Optional.ofNullable(this.brandId);
    }

    @Import(name="connectorId")
    private @Nullable Integer connectorId;

    public Optional<Integer> connectorId() {
        return Optional.ofNullable(this.connectorId);
    }

    @Import(name="createdAt")
    private @Nullable String createdAt;

    public Optional<String> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    @Import(name="description")
    private @Nullable String description;

    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="iconUrl")
    private @Nullable String iconUrl;

    public Optional<String> iconUrl() {
        return Optional.ofNullable(this.iconUrl);
    }

    @Import(name="id", required=true)
    private String id;

    public String id() {
        return this.id;
    }

    @Import(name="name")
    private @Nullable String name;

    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="notes")
    private @Nullable String notes;

    public Optional<String> notes() {
        return Optional.ofNullable(this.notes);
    }

    @Import(name="policyId")
    private @Nullable Integer policyId;

    public Optional<Integer> policyId() {
        return Optional.ofNullable(this.policyId);
    }

    @Import(name="provisioning")
    private @Nullable GetInstanceProvisioning provisioning;

    public Optional<GetInstanceProvisioning> provisioning() {
        return Optional.ofNullable(this.provisioning);
    }

    @Import(name="roleIds")
    private @Nullable List<Integer> roleIds;

    public Optional<List<Integer>> roleIds() {
        return Optional.ofNullable(this.roleIds);
    }

    @Import(name="tabId")
    private @Nullable Integer tabId;

    public Optional<Integer> tabId() {
        return Optional.ofNullable(this.tabId);
    }

    @Import(name="updatedAt")
    private @Nullable String updatedAt;

    public Optional<String> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    @Import(name="visible")
    private @Nullable Boolean visible;

    public Optional<Boolean> visible() {
        return Optional.ofNullable(this.visible);
    }

    private GetInstancePlainArgs() {}

    private GetInstancePlainArgs(GetInstancePlainArgs $) {
        this.allowAssumedSignin = $.allowAssumedSignin;
        this.authMethod = $.authMethod;
        this.brandId = $.brandId;
        this.connectorId = $.connectorId;
        this.createdAt = $.createdAt;
        this.description = $.description;
        this.iconUrl = $.iconUrl;
        this.id = $.id;
        this.name = $.name;
        this.notes = $.notes;
        this.policyId = $.policyId;
        this.provisioning = $.provisioning;
        this.roleIds = $.roleIds;
        this.tabId = $.tabId;
        this.updatedAt = $.updatedAt;
        this.visible = $.visible;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetInstancePlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetInstancePlainArgs $;

        public Builder() {
            $ = new GetInstancePlainArgs();
        }

        public Builder(GetInstancePlainArgs defaults) {
            $ = new GetInstancePlainArgs(Objects.requireNonNull(defaults));
        }

        public Builder allowAssumedSignin(@Nullable Boolean allowAssumedSignin) {
            $.allowAssumedSignin = allowAssumedSignin;
            return this;
        }

        public Builder authMethod(@Nullable Integer authMethod) {
            $.authMethod = authMethod;
            return this;
        }

        public Builder brandId(@Nullable Integer brandId) {
            $.brandId = brandId;
            return this;
        }

        public Builder connectorId(@Nullable Integer connectorId) {
            $.connectorId = connectorId;
            return this;
        }

        public Builder createdAt(@Nullable String createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        public Builder iconUrl(@Nullable String iconUrl) {
            $.iconUrl = iconUrl;
            return this;
        }

        public Builder id(String id) {
            $.id = id;
            return this;
        }

        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        public Builder notes(@Nullable String notes) {
            $.notes = notes;
            return this;
        }

        public Builder policyId(@Nullable Integer policyId) {
            $.policyId = policyId;
            return this;
        }

        public Builder provisioning(@Nullable GetInstanceProvisioning provisioning) {
            $.provisioning = provisioning;
            return this;
        }

        public Builder roleIds(@Nullable List<Integer> roleIds) {
            $.roleIds = roleIds;
            return this;
        }

        public Builder roleIds(Integer... roleIds) {
            return roleIds(List.of(roleIds));
        }

        public Builder tabId(@Nullable Integer tabId) {
            $.tabId = tabId;
            return this;
        }

        public Builder updatedAt(@Nullable String updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        public Builder visible(@Nullable Boolean visible) {
            $.visible = visible;
            return this;
        }

        public GetInstancePlainArgs build() {
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            return $;
        }
    }

}
