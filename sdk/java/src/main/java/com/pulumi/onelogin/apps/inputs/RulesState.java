// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.onelogin.apps.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.onelogin.apps.inputs.RulesActionArgs;
import com.pulumi.onelogin.apps.inputs.RulesConditionArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RulesState extends com.pulumi.resources.ResourceArgs {

    public static final RulesState Empty = new RulesState();

    @Import(name="actions")
    private @Nullable Output<List<RulesActionArgs>> actions;

    public Optional<Output<List<RulesActionArgs>>> actions() {
        return Optional.ofNullable(this.actions);
    }

    @Import(name="appsId")
    private @Nullable Output<String> appsId;

    public Optional<Output<String>> appsId() {
        return Optional.ofNullable(this.appsId);
    }

    /**
     * An array of conditions that the user must meet in order for the rule to be applied.
     * 
     */
    @Import(name="conditions")
    private @Nullable Output<List<RulesConditionArgs>> conditions;

    /**
     * @return An array of conditions that the user must meet in order for the rule to be applied.
     * 
     */
    public Optional<Output<List<RulesConditionArgs>>> conditions() {
        return Optional.ofNullable(this.conditions);
    }

    /**
     * Indicates if the rule is enabled or not.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Indicates if the rule is enabled or not.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Indicates how conditions should be matched.
     * 
     */
    @Import(name="match")
    private @Nullable Output<String> match;

    /**
     * @return Indicates how conditions should be matched.
     * 
     */
    public Optional<Output<String>> match() {
        return Optional.ofNullable(this.match);
    }

    /**
     * Rule Name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Rule Name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Indicates the order of the rule. When `null` this will default to last position.
     * 
     */
    @Import(name="position")
    private @Nullable Output<Integer> position;

    /**
     * @return Indicates the order of the rule. When `null` this will default to last position.
     * 
     */
    public Optional<Output<Integer>> position() {
        return Optional.ofNullable(this.position);
    }

    private RulesState() {}

    private RulesState(RulesState $) {
        this.actions = $.actions;
        this.appsId = $.appsId;
        this.conditions = $.conditions;
        this.enabled = $.enabled;
        this.match = $.match;
        this.name = $.name;
        this.position = $.position;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RulesState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RulesState $;

        public Builder() {
            $ = new RulesState();
        }

        public Builder(RulesState defaults) {
            $ = new RulesState(Objects.requireNonNull(defaults));
        }

        public Builder actions(@Nullable Output<List<RulesActionArgs>> actions) {
            $.actions = actions;
            return this;
        }

        public Builder actions(List<RulesActionArgs> actions) {
            return actions(Output.of(actions));
        }

        public Builder actions(RulesActionArgs... actions) {
            return actions(List.of(actions));
        }

        public Builder appsId(@Nullable Output<String> appsId) {
            $.appsId = appsId;
            return this;
        }

        public Builder appsId(String appsId) {
            return appsId(Output.of(appsId));
        }

        /**
         * @param conditions An array of conditions that the user must meet in order for the rule to be applied.
         * 
         * @return builder
         * 
         */
        public Builder conditions(@Nullable Output<List<RulesConditionArgs>> conditions) {
            $.conditions = conditions;
            return this;
        }

        /**
         * @param conditions An array of conditions that the user must meet in order for the rule to be applied.
         * 
         * @return builder
         * 
         */
        public Builder conditions(List<RulesConditionArgs> conditions) {
            return conditions(Output.of(conditions));
        }

        /**
         * @param conditions An array of conditions that the user must meet in order for the rule to be applied.
         * 
         * @return builder
         * 
         */
        public Builder conditions(RulesConditionArgs... conditions) {
            return conditions(List.of(conditions));
        }

        /**
         * @param enabled Indicates if the rule is enabled or not.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Indicates if the rule is enabled or not.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param match Indicates how conditions should be matched.
         * 
         * @return builder
         * 
         */
        public Builder match(@Nullable Output<String> match) {
            $.match = match;
            return this;
        }

        /**
         * @param match Indicates how conditions should be matched.
         * 
         * @return builder
         * 
         */
        public Builder match(String match) {
            return match(Output.of(match));
        }

        /**
         * @param name Rule Name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Rule Name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param position Indicates the order of the rule. When `null` this will default to last position.
         * 
         * @return builder
         * 
         */
        public Builder position(@Nullable Output<Integer> position) {
            $.position = position;
            return this;
        }

        /**
         * @param position Indicates the order of the rule. When `null` this will default to last position.
         * 
         * @return builder
         * 
         */
        public Builder position(Integer position) {
            return position(Output.of(position));
        }

        public RulesState build() {
            return $;
        }
    }

}
