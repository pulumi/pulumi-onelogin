// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.onelogin.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SamlAppsParameterArgs extends com.pulumi.resources.ResourceArgs {

    public static final SamlAppsParameterArgs Empty = new SamlAppsParameterArgs();

    @Import(name="attributesTransformations")
    private @Nullable Output<String> attributesTransformations;

    public Optional<Output<String>> attributesTransformations() {
        return Optional.ofNullable(this.attributesTransformations);
    }

    @Import(name="defaultValues")
    private @Nullable Output<String> defaultValues;

    public Optional<Output<String>> defaultValues() {
        return Optional.ofNullable(this.defaultValues);
    }

    @Import(name="includeInSamlAssertion")
    private @Nullable Output<Boolean> includeInSamlAssertion;

    public Optional<Output<Boolean>> includeInSamlAssertion() {
        return Optional.ofNullable(this.includeInSamlAssertion);
    }

    @Import(name="label")
    private @Nullable Output<String> label;

    public Optional<Output<String>> label() {
        return Optional.ofNullable(this.label);
    }

    @Import(name="paramId")
    private @Nullable Output<Integer> paramId;

    public Optional<Output<Integer>> paramId() {
        return Optional.ofNullable(this.paramId);
    }

    @Import(name="paramKeyName", required=true)
    private Output<String> paramKeyName;

    public Output<String> paramKeyName() {
        return this.paramKeyName;
    }

    @Import(name="provisionedEntitlements")
    private @Nullable Output<Boolean> provisionedEntitlements;

    public Optional<Output<Boolean>> provisionedEntitlements() {
        return Optional.ofNullable(this.provisionedEntitlements);
    }

    @Import(name="safeEntitlementsEnabled")
    private @Nullable Output<Boolean> safeEntitlementsEnabled;

    public Optional<Output<Boolean>> safeEntitlementsEnabled() {
        return Optional.ofNullable(this.safeEntitlementsEnabled);
    }

    @Import(name="skipIfBlank")
    private @Nullable Output<Boolean> skipIfBlank;

    public Optional<Output<Boolean>> skipIfBlank() {
        return Optional.ofNullable(this.skipIfBlank);
    }

    @Import(name="userAttributeMacros")
    private @Nullable Output<String> userAttributeMacros;

    public Optional<Output<String>> userAttributeMacros() {
        return Optional.ofNullable(this.userAttributeMacros);
    }

    @Import(name="userAttributeMappings")
    private @Nullable Output<String> userAttributeMappings;

    public Optional<Output<String>> userAttributeMappings() {
        return Optional.ofNullable(this.userAttributeMappings);
    }

    @Import(name="values")
    private @Nullable Output<String> values;

    public Optional<Output<String>> values() {
        return Optional.ofNullable(this.values);
    }

    private SamlAppsParameterArgs() {}

    private SamlAppsParameterArgs(SamlAppsParameterArgs $) {
        this.attributesTransformations = $.attributesTransformations;
        this.defaultValues = $.defaultValues;
        this.includeInSamlAssertion = $.includeInSamlAssertion;
        this.label = $.label;
        this.paramId = $.paramId;
        this.paramKeyName = $.paramKeyName;
        this.provisionedEntitlements = $.provisionedEntitlements;
        this.safeEntitlementsEnabled = $.safeEntitlementsEnabled;
        this.skipIfBlank = $.skipIfBlank;
        this.userAttributeMacros = $.userAttributeMacros;
        this.userAttributeMappings = $.userAttributeMappings;
        this.values = $.values;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SamlAppsParameterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SamlAppsParameterArgs $;

        public Builder() {
            $ = new SamlAppsParameterArgs();
        }

        public Builder(SamlAppsParameterArgs defaults) {
            $ = new SamlAppsParameterArgs(Objects.requireNonNull(defaults));
        }

        public Builder attributesTransformations(@Nullable Output<String> attributesTransformations) {
            $.attributesTransformations = attributesTransformations;
            return this;
        }

        public Builder attributesTransformations(String attributesTransformations) {
            return attributesTransformations(Output.of(attributesTransformations));
        }

        public Builder defaultValues(@Nullable Output<String> defaultValues) {
            $.defaultValues = defaultValues;
            return this;
        }

        public Builder defaultValues(String defaultValues) {
            return defaultValues(Output.of(defaultValues));
        }

        public Builder includeInSamlAssertion(@Nullable Output<Boolean> includeInSamlAssertion) {
            $.includeInSamlAssertion = includeInSamlAssertion;
            return this;
        }

        public Builder includeInSamlAssertion(Boolean includeInSamlAssertion) {
            return includeInSamlAssertion(Output.of(includeInSamlAssertion));
        }

        public Builder label(@Nullable Output<String> label) {
            $.label = label;
            return this;
        }

        public Builder label(String label) {
            return label(Output.of(label));
        }

        public Builder paramId(@Nullable Output<Integer> paramId) {
            $.paramId = paramId;
            return this;
        }

        public Builder paramId(Integer paramId) {
            return paramId(Output.of(paramId));
        }

        public Builder paramKeyName(Output<String> paramKeyName) {
            $.paramKeyName = paramKeyName;
            return this;
        }

        public Builder paramKeyName(String paramKeyName) {
            return paramKeyName(Output.of(paramKeyName));
        }

        public Builder provisionedEntitlements(@Nullable Output<Boolean> provisionedEntitlements) {
            $.provisionedEntitlements = provisionedEntitlements;
            return this;
        }

        public Builder provisionedEntitlements(Boolean provisionedEntitlements) {
            return provisionedEntitlements(Output.of(provisionedEntitlements));
        }

        public Builder safeEntitlementsEnabled(@Nullable Output<Boolean> safeEntitlementsEnabled) {
            $.safeEntitlementsEnabled = safeEntitlementsEnabled;
            return this;
        }

        public Builder safeEntitlementsEnabled(Boolean safeEntitlementsEnabled) {
            return safeEntitlementsEnabled(Output.of(safeEntitlementsEnabled));
        }

        public Builder skipIfBlank(@Nullable Output<Boolean> skipIfBlank) {
            $.skipIfBlank = skipIfBlank;
            return this;
        }

        public Builder skipIfBlank(Boolean skipIfBlank) {
            return skipIfBlank(Output.of(skipIfBlank));
        }

        public Builder userAttributeMacros(@Nullable Output<String> userAttributeMacros) {
            $.userAttributeMacros = userAttributeMacros;
            return this;
        }

        public Builder userAttributeMacros(String userAttributeMacros) {
            return userAttributeMacros(Output.of(userAttributeMacros));
        }

        public Builder userAttributeMappings(@Nullable Output<String> userAttributeMappings) {
            $.userAttributeMappings = userAttributeMappings;
            return this;
        }

        public Builder userAttributeMappings(String userAttributeMappings) {
            return userAttributeMappings(Output.of(userAttributeMappings));
        }

        public Builder values(@Nullable Output<String> values) {
            $.values = values;
            return this;
        }

        public Builder values(String values) {
            return values(Output.of(values));
        }

        public SamlAppsParameterArgs build() {
            if ($.paramKeyName == null) {
                throw new MissingRequiredPropertyException("SamlAppsParameterArgs", "paramKeyName");
            }
            return $;
        }
    }

}
