// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.onelogin.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.onelogin.inputs.GetAuthServersClaimsFilterArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetAuthServersClaimsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetAuthServersClaimsArgs Empty = new GetAuthServersClaimsArgs();

    @Import(name="attributeTransformations")
    private @Nullable Output<String> attributeTransformations;

    public Optional<Output<String>> attributeTransformations() {
        return Optional.ofNullable(this.attributeTransformations);
    }

    @Import(name="authServersId", required=true)
    private Output<String> authServersId;

    public Output<String> authServersId() {
        return this.authServersId;
    }

    @Import(name="defaultValues")
    private @Nullable Output<String> defaultValues;

    public Optional<Output<String>> defaultValues() {
        return Optional.ofNullable(this.defaultValues);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetAuthServersClaimsFilterArgs>> filters;

    public Optional<Output<List<GetAuthServersClaimsFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    @Import(name="label")
    private @Nullable Output<String> label;

    public Optional<Output<String>> label() {
        return Optional.ofNullable(this.label);
    }

    @Import(name="provisionedEntitlements")
    private @Nullable Output<Boolean> provisionedEntitlements;

    public Optional<Output<Boolean>> provisionedEntitlements() {
        return Optional.ofNullable(this.provisionedEntitlements);
    }

    @Import(name="skipIfBlank")
    private @Nullable Output<Boolean> skipIfBlank;

    public Optional<Output<Boolean>> skipIfBlank() {
        return Optional.ofNullable(this.skipIfBlank);
    }

    @Import(name="userAttributeMacros")
    private @Nullable Output<String> userAttributeMacros;

    public Optional<Output<String>> userAttributeMacros() {
        return Optional.ofNullable(this.userAttributeMacros);
    }

    @Import(name="userAttributeMappings")
    private @Nullable Output<String> userAttributeMappings;

    public Optional<Output<String>> userAttributeMappings() {
        return Optional.ofNullable(this.userAttributeMappings);
    }

    @Import(name="values")
    private @Nullable Output<List<String>> values;

    public Optional<Output<List<String>>> values() {
        return Optional.ofNullable(this.values);
    }

    private GetAuthServersClaimsArgs() {}

    private GetAuthServersClaimsArgs(GetAuthServersClaimsArgs $) {
        this.attributeTransformations = $.attributeTransformations;
        this.authServersId = $.authServersId;
        this.defaultValues = $.defaultValues;
        this.filters = $.filters;
        this.label = $.label;
        this.provisionedEntitlements = $.provisionedEntitlements;
        this.skipIfBlank = $.skipIfBlank;
        this.userAttributeMacros = $.userAttributeMacros;
        this.userAttributeMappings = $.userAttributeMappings;
        this.values = $.values;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetAuthServersClaimsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetAuthServersClaimsArgs $;

        public Builder() {
            $ = new GetAuthServersClaimsArgs();
        }

        public Builder(GetAuthServersClaimsArgs defaults) {
            $ = new GetAuthServersClaimsArgs(Objects.requireNonNull(defaults));
        }

        public Builder attributeTransformations(@Nullable Output<String> attributeTransformations) {
            $.attributeTransformations = attributeTransformations;
            return this;
        }

        public Builder attributeTransformations(String attributeTransformations) {
            return attributeTransformations(Output.of(attributeTransformations));
        }

        public Builder authServersId(Output<String> authServersId) {
            $.authServersId = authServersId;
            return this;
        }

        public Builder authServersId(String authServersId) {
            return authServersId(Output.of(authServersId));
        }

        public Builder defaultValues(@Nullable Output<String> defaultValues) {
            $.defaultValues = defaultValues;
            return this;
        }

        public Builder defaultValues(String defaultValues) {
            return defaultValues(Output.of(defaultValues));
        }

        public Builder filters(@Nullable Output<List<GetAuthServersClaimsFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetAuthServersClaimsFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetAuthServersClaimsFilterArgs... filters) {
            return filters(List.of(filters));
        }

        public Builder label(@Nullable Output<String> label) {
            $.label = label;
            return this;
        }

        public Builder label(String label) {
            return label(Output.of(label));
        }

        public Builder provisionedEntitlements(@Nullable Output<Boolean> provisionedEntitlements) {
            $.provisionedEntitlements = provisionedEntitlements;
            return this;
        }

        public Builder provisionedEntitlements(Boolean provisionedEntitlements) {
            return provisionedEntitlements(Output.of(provisionedEntitlements));
        }

        public Builder skipIfBlank(@Nullable Output<Boolean> skipIfBlank) {
            $.skipIfBlank = skipIfBlank;
            return this;
        }

        public Builder skipIfBlank(Boolean skipIfBlank) {
            return skipIfBlank(Output.of(skipIfBlank));
        }

        public Builder userAttributeMacros(@Nullable Output<String> userAttributeMacros) {
            $.userAttributeMacros = userAttributeMacros;
            return this;
        }

        public Builder userAttributeMacros(String userAttributeMacros) {
            return userAttributeMacros(Output.of(userAttributeMacros));
        }

        public Builder userAttributeMappings(@Nullable Output<String> userAttributeMappings) {
            $.userAttributeMappings = userAttributeMappings;
            return this;
        }

        public Builder userAttributeMappings(String userAttributeMappings) {
            return userAttributeMappings(Output.of(userAttributeMappings));
        }

        public Builder values(@Nullable Output<List<String>> values) {
            $.values = values;
            return this;
        }

        public Builder values(List<String> values) {
            return values(Output.of(values));
        }

        public Builder values(String... values) {
            return values(List.of(values));
        }

        public GetAuthServersClaimsArgs build() {
            $.authServersId = Objects.requireNonNull($.authServersId, "expected parameter 'authServersId' to be non-null");
            return $;
        }
    }

}
