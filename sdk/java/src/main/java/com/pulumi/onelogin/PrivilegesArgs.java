// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.onelogin;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.onelogin.inputs.PrivilegesPrivilegeArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PrivilegesArgs extends com.pulumi.resources.ResourceArgs {

    public static final PrivilegesArgs Empty = new PrivilegesArgs();

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="privilege", required=true)
    private Output<PrivilegesPrivilegeArgs> privilege;

    public Output<PrivilegesPrivilegeArgs> privilege() {
        return this.privilege;
    }

    @Import(name="roleIds")
    private @Nullable Output<List<Integer>> roleIds;

    public Optional<Output<List<Integer>>> roleIds() {
        return Optional.ofNullable(this.roleIds);
    }

    @Import(name="userIds")
    private @Nullable Output<List<Integer>> userIds;

    public Optional<Output<List<Integer>>> userIds() {
        return Optional.ofNullable(this.userIds);
    }

    private PrivilegesArgs() {}

    private PrivilegesArgs(PrivilegesArgs $) {
        this.description = $.description;
        this.name = $.name;
        this.privilege = $.privilege;
        this.roleIds = $.roleIds;
        this.userIds = $.userIds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PrivilegesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PrivilegesArgs $;

        public Builder() {
            $ = new PrivilegesArgs();
        }

        public Builder(PrivilegesArgs defaults) {
            $ = new PrivilegesArgs(Objects.requireNonNull(defaults));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder privilege(Output<PrivilegesPrivilegeArgs> privilege) {
            $.privilege = privilege;
            return this;
        }

        public Builder privilege(PrivilegesPrivilegeArgs privilege) {
            return privilege(Output.of(privilege));
        }

        public Builder roleIds(@Nullable Output<List<Integer>> roleIds) {
            $.roleIds = roleIds;
            return this;
        }

        public Builder roleIds(List<Integer> roleIds) {
            return roleIds(Output.of(roleIds));
        }

        public Builder roleIds(Integer... roleIds) {
            return roleIds(List.of(roleIds));
        }

        public Builder userIds(@Nullable Output<List<Integer>> userIds) {
            $.userIds = userIds;
            return this;
        }

        public Builder userIds(List<Integer> userIds) {
            return userIds(Output.of(userIds));
        }

        public Builder userIds(Integer... userIds) {
            return userIds(List.of(userIds));
        }

        public PrivilegesArgs build() {
            if ($.privilege == null) {
                throw new MissingRequiredPropertyException("PrivilegesArgs", "privilege");
            }
            return $;
        }
    }

}
