// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.onelogin.apps.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.onelogin.apps.outputs.GetInstanceEnforcementPointResource;
import com.pulumi.onelogin.apps.outputs.GetInstanceEnforcementPointSessionExpiryFixed;
import com.pulumi.onelogin.apps.outputs.GetInstanceEnforcementPointSessionExpiryInactivity;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetInstanceEnforcementPoint {
    private Boolean caseSensitive;
    private String conditions;
    private String contextRoot;
    private String landingPage;
    private String permissions;
    private Boolean requireSitewideAuthentication;
    private List<GetInstanceEnforcementPointResource> resources;
    private GetInstanceEnforcementPointSessionExpiryFixed sessionExpiryFixed;
    private GetInstanceEnforcementPointSessionExpiryInactivity sessionExpiryInactivity;
    private String target;
    private String token;
    private Boolean useTargetHostHeader;
    private String vhost;

    private GetInstanceEnforcementPoint() {}
    public Boolean caseSensitive() {
        return this.caseSensitive;
    }
    public String conditions() {
        return this.conditions;
    }
    public String contextRoot() {
        return this.contextRoot;
    }
    public String landingPage() {
        return this.landingPage;
    }
    public String permissions() {
        return this.permissions;
    }
    public Boolean requireSitewideAuthentication() {
        return this.requireSitewideAuthentication;
    }
    public List<GetInstanceEnforcementPointResource> resources() {
        return this.resources;
    }
    public GetInstanceEnforcementPointSessionExpiryFixed sessionExpiryFixed() {
        return this.sessionExpiryFixed;
    }
    public GetInstanceEnforcementPointSessionExpiryInactivity sessionExpiryInactivity() {
        return this.sessionExpiryInactivity;
    }
    public String target() {
        return this.target;
    }
    public String token() {
        return this.token;
    }
    public Boolean useTargetHostHeader() {
        return this.useTargetHostHeader;
    }
    public String vhost() {
        return this.vhost;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceEnforcementPoint defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean caseSensitive;
        private String conditions;
        private String contextRoot;
        private String landingPage;
        private String permissions;
        private Boolean requireSitewideAuthentication;
        private List<GetInstanceEnforcementPointResource> resources;
        private GetInstanceEnforcementPointSessionExpiryFixed sessionExpiryFixed;
        private GetInstanceEnforcementPointSessionExpiryInactivity sessionExpiryInactivity;
        private String target;
        private String token;
        private Boolean useTargetHostHeader;
        private String vhost;
        public Builder() {}
        public Builder(GetInstanceEnforcementPoint defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.caseSensitive = defaults.caseSensitive;
    	      this.conditions = defaults.conditions;
    	      this.contextRoot = defaults.contextRoot;
    	      this.landingPage = defaults.landingPage;
    	      this.permissions = defaults.permissions;
    	      this.requireSitewideAuthentication = defaults.requireSitewideAuthentication;
    	      this.resources = defaults.resources;
    	      this.sessionExpiryFixed = defaults.sessionExpiryFixed;
    	      this.sessionExpiryInactivity = defaults.sessionExpiryInactivity;
    	      this.target = defaults.target;
    	      this.token = defaults.token;
    	      this.useTargetHostHeader = defaults.useTargetHostHeader;
    	      this.vhost = defaults.vhost;
        }

        @CustomType.Setter
        public Builder caseSensitive(Boolean caseSensitive) {
            this.caseSensitive = Objects.requireNonNull(caseSensitive);
            return this;
        }
        @CustomType.Setter
        public Builder conditions(String conditions) {
            this.conditions = Objects.requireNonNull(conditions);
            return this;
        }
        @CustomType.Setter
        public Builder contextRoot(String contextRoot) {
            this.contextRoot = Objects.requireNonNull(contextRoot);
            return this;
        }
        @CustomType.Setter
        public Builder landingPage(String landingPage) {
            this.landingPage = Objects.requireNonNull(landingPage);
            return this;
        }
        @CustomType.Setter
        public Builder permissions(String permissions) {
            this.permissions = Objects.requireNonNull(permissions);
            return this;
        }
        @CustomType.Setter
        public Builder requireSitewideAuthentication(Boolean requireSitewideAuthentication) {
            this.requireSitewideAuthentication = Objects.requireNonNull(requireSitewideAuthentication);
            return this;
        }
        @CustomType.Setter
        public Builder resources(List<GetInstanceEnforcementPointResource> resources) {
            this.resources = Objects.requireNonNull(resources);
            return this;
        }
        public Builder resources(GetInstanceEnforcementPointResource... resources) {
            return resources(List.of(resources));
        }
        @CustomType.Setter
        public Builder sessionExpiryFixed(GetInstanceEnforcementPointSessionExpiryFixed sessionExpiryFixed) {
            this.sessionExpiryFixed = Objects.requireNonNull(sessionExpiryFixed);
            return this;
        }
        @CustomType.Setter
        public Builder sessionExpiryInactivity(GetInstanceEnforcementPointSessionExpiryInactivity sessionExpiryInactivity) {
            this.sessionExpiryInactivity = Objects.requireNonNull(sessionExpiryInactivity);
            return this;
        }
        @CustomType.Setter
        public Builder target(String target) {
            this.target = Objects.requireNonNull(target);
            return this;
        }
        @CustomType.Setter
        public Builder token(String token) {
            this.token = Objects.requireNonNull(token);
            return this;
        }
        @CustomType.Setter
        public Builder useTargetHostHeader(Boolean useTargetHostHeader) {
            this.useTargetHostHeader = Objects.requireNonNull(useTargetHostHeader);
            return this;
        }
        @CustomType.Setter
        public Builder vhost(String vhost) {
            this.vhost = Objects.requireNonNull(vhost);
            return this;
        }
        public GetInstanceEnforcementPoint build() {
            final var o = new GetInstanceEnforcementPoint();
            o.caseSensitive = caseSensitive;
            o.conditions = conditions;
            o.contextRoot = contextRoot;
            o.landingPage = landingPage;
            o.permissions = permissions;
            o.requireSitewideAuthentication = requireSitewideAuthentication;
            o.resources = resources;
            o.sessionExpiryFixed = sessionExpiryFixed;
            o.sessionExpiryInactivity = sessionExpiryInactivity;
            o.target = target;
            o.token = token;
            o.useTargetHostHeader = useTargetHostHeader;
            o.vhost = vhost;
            return o;
        }
    }
}
