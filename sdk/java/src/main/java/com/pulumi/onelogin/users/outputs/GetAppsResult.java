// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.onelogin.users.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.onelogin.users.outputs.GetAppsFilter;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetAppsResult {
    private Boolean extension;
    private @Nullable List<GetAppsFilter> filters;
    private String iconUrl;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private Integer loginId;
    private String name;
    private Boolean provisioningEnabled;
    private String provisioningState;
    private String provisioningStatus;
    private String usersId;

    private GetAppsResult() {}
    public Boolean extension() {
        return this.extension;
    }
    public List<GetAppsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    public String iconUrl() {
        return this.iconUrl;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Integer loginId() {
        return this.loginId;
    }
    public String name() {
        return this.name;
    }
    public Boolean provisioningEnabled() {
        return this.provisioningEnabled;
    }
    public String provisioningState() {
        return this.provisioningState;
    }
    public String provisioningStatus() {
        return this.provisioningStatus;
    }
    public String usersId() {
        return this.usersId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAppsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean extension;
        private @Nullable List<GetAppsFilter> filters;
        private String iconUrl;
        private String id;
        private Integer loginId;
        private String name;
        private Boolean provisioningEnabled;
        private String provisioningState;
        private String provisioningStatus;
        private String usersId;
        public Builder() {}
        public Builder(GetAppsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.extension = defaults.extension;
    	      this.filters = defaults.filters;
    	      this.iconUrl = defaults.iconUrl;
    	      this.id = defaults.id;
    	      this.loginId = defaults.loginId;
    	      this.name = defaults.name;
    	      this.provisioningEnabled = defaults.provisioningEnabled;
    	      this.provisioningState = defaults.provisioningState;
    	      this.provisioningStatus = defaults.provisioningStatus;
    	      this.usersId = defaults.usersId;
        }

        @CustomType.Setter
        public Builder extension(Boolean extension) {
            this.extension = Objects.requireNonNull(extension);
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetAppsFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetAppsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder iconUrl(String iconUrl) {
            this.iconUrl = Objects.requireNonNull(iconUrl);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder loginId(Integer loginId) {
            this.loginId = Objects.requireNonNull(loginId);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder provisioningEnabled(Boolean provisioningEnabled) {
            this.provisioningEnabled = Objects.requireNonNull(provisioningEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder provisioningStatus(String provisioningStatus) {
            this.provisioningStatus = Objects.requireNonNull(provisioningStatus);
            return this;
        }
        @CustomType.Setter
        public Builder usersId(String usersId) {
            this.usersId = Objects.requireNonNull(usersId);
            return this;
        }
        public GetAppsResult build() {
            final var o = new GetAppsResult();
            o.extension = extension;
            o.filters = filters;
            o.iconUrl = iconUrl;
            o.id = id;
            o.loginId = loginId;
            o.name = name;
            o.provisioningEnabled = provisioningEnabled;
            o.provisioningState = provisioningState;
            o.provisioningStatus = provisioningStatus;
            o.usersId = usersId;
            return o;
        }
    }
}
