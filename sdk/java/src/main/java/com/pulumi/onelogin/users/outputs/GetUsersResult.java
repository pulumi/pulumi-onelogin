// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.onelogin.users.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.onelogin.users.outputs.GetUsersUser;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetUsersResult {
    private @Nullable Integer directoryId;
    private @Nullable Integer externalId;
    private @Nullable String firstname;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private List<String> ids;
    private @Nullable String lastname;
    private @Nullable String samaccountname;
    private @Nullable String userId;
    private @Nullable String username;
    private List<GetUsersUser> users;

    private GetUsersResult() {}
    public Optional<Integer> directoryId() {
        return Optional.ofNullable(this.directoryId);
    }
    public Optional<Integer> externalId() {
        return Optional.ofNullable(this.externalId);
    }
    public Optional<String> firstname() {
        return Optional.ofNullable(this.firstname);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public List<String> ids() {
        return this.ids;
    }
    public Optional<String> lastname() {
        return Optional.ofNullable(this.lastname);
    }
    public Optional<String> samaccountname() {
        return Optional.ofNullable(this.samaccountname);
    }
    public Optional<String> userId() {
        return Optional.ofNullable(this.userId);
    }
    public Optional<String> username() {
        return Optional.ofNullable(this.username);
    }
    public List<GetUsersUser> users() {
        return this.users;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUsersResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer directoryId;
        private @Nullable Integer externalId;
        private @Nullable String firstname;
        private String id;
        private List<String> ids;
        private @Nullable String lastname;
        private @Nullable String samaccountname;
        private @Nullable String userId;
        private @Nullable String username;
        private List<GetUsersUser> users;
        public Builder() {}
        public Builder(GetUsersResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.directoryId = defaults.directoryId;
    	      this.externalId = defaults.externalId;
    	      this.firstname = defaults.firstname;
    	      this.id = defaults.id;
    	      this.ids = defaults.ids;
    	      this.lastname = defaults.lastname;
    	      this.samaccountname = defaults.samaccountname;
    	      this.userId = defaults.userId;
    	      this.username = defaults.username;
    	      this.users = defaults.users;
        }

        @CustomType.Setter
        public Builder directoryId(@Nullable Integer directoryId) {

            this.directoryId = directoryId;
            return this;
        }
        @CustomType.Setter
        public Builder externalId(@Nullable Integer externalId) {

            this.externalId = externalId;
            return this;
        }
        @CustomType.Setter
        public Builder firstname(@Nullable String firstname) {

            this.firstname = firstname;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetUsersResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ids(List<String> ids) {
            if (ids == null) {
              throw new MissingRequiredPropertyException("GetUsersResult", "ids");
            }
            this.ids = ids;
            return this;
        }
        public Builder ids(String... ids) {
            return ids(List.of(ids));
        }
        @CustomType.Setter
        public Builder lastname(@Nullable String lastname) {

            this.lastname = lastname;
            return this;
        }
        @CustomType.Setter
        public Builder samaccountname(@Nullable String samaccountname) {

            this.samaccountname = samaccountname;
            return this;
        }
        @CustomType.Setter
        public Builder userId(@Nullable String userId) {

            this.userId = userId;
            return this;
        }
        @CustomType.Setter
        public Builder username(@Nullable String username) {

            this.username = username;
            return this;
        }
        @CustomType.Setter
        public Builder users(List<GetUsersUser> users) {
            if (users == null) {
              throw new MissingRequiredPropertyException("GetUsersResult", "users");
            }
            this.users = users;
            return this;
        }
        public Builder users(GetUsersUser... users) {
            return users(List.of(users));
        }
        public GetUsersResult build() {
            final var _resultValue = new GetUsersResult();
            _resultValue.directoryId = directoryId;
            _resultValue.externalId = externalId;
            _resultValue.firstname = firstname;
            _resultValue.id = id;
            _resultValue.ids = ids;
            _resultValue.lastname = lastname;
            _resultValue.samaccountname = samaccountname;
            _resultValue.userId = userId;
            _resultValue.username = username;
            _resultValue.users = users;
            return _resultValue;
        }
    }
}
