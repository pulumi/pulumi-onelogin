// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.onelogin.users.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.onelogin.users.inputs.GetAppsFilterArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetAppsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetAppsArgs Empty = new GetAppsArgs();

    @Import(name="extension")
    private @Nullable Output<Boolean> extension;

    public Optional<Output<Boolean>> extension() {
        return Optional.ofNullable(this.extension);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetAppsFilterArgs>> filters;

    public Optional<Output<List<GetAppsFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    @Import(name="iconUrl")
    private @Nullable Output<String> iconUrl;

    public Optional<Output<String>> iconUrl() {
        return Optional.ofNullable(this.iconUrl);
    }

    @Import(name="loginId")
    private @Nullable Output<Integer> loginId;

    public Optional<Output<Integer>> loginId() {
        return Optional.ofNullable(this.loginId);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="provisioningEnabled")
    private @Nullable Output<Boolean> provisioningEnabled;

    public Optional<Output<Boolean>> provisioningEnabled() {
        return Optional.ofNullable(this.provisioningEnabled);
    }

    @Import(name="provisioningState")
    private @Nullable Output<String> provisioningState;

    public Optional<Output<String>> provisioningState() {
        return Optional.ofNullable(this.provisioningState);
    }

    @Import(name="provisioningStatus")
    private @Nullable Output<String> provisioningStatus;

    public Optional<Output<String>> provisioningStatus() {
        return Optional.ofNullable(this.provisioningStatus);
    }

    @Import(name="usersId", required=true)
    private Output<String> usersId;

    public Output<String> usersId() {
        return this.usersId;
    }

    private GetAppsArgs() {}

    private GetAppsArgs(GetAppsArgs $) {
        this.extension = $.extension;
        this.filters = $.filters;
        this.iconUrl = $.iconUrl;
        this.loginId = $.loginId;
        this.name = $.name;
        this.provisioningEnabled = $.provisioningEnabled;
        this.provisioningState = $.provisioningState;
        this.provisioningStatus = $.provisioningStatus;
        this.usersId = $.usersId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetAppsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetAppsArgs $;

        public Builder() {
            $ = new GetAppsArgs();
        }

        public Builder(GetAppsArgs defaults) {
            $ = new GetAppsArgs(Objects.requireNonNull(defaults));
        }

        public Builder extension(@Nullable Output<Boolean> extension) {
            $.extension = extension;
            return this;
        }

        public Builder extension(Boolean extension) {
            return extension(Output.of(extension));
        }

        public Builder filters(@Nullable Output<List<GetAppsFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetAppsFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetAppsFilterArgs... filters) {
            return filters(List.of(filters));
        }

        public Builder iconUrl(@Nullable Output<String> iconUrl) {
            $.iconUrl = iconUrl;
            return this;
        }

        public Builder iconUrl(String iconUrl) {
            return iconUrl(Output.of(iconUrl));
        }

        public Builder loginId(@Nullable Output<Integer> loginId) {
            $.loginId = loginId;
            return this;
        }

        public Builder loginId(Integer loginId) {
            return loginId(Output.of(loginId));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder provisioningEnabled(@Nullable Output<Boolean> provisioningEnabled) {
            $.provisioningEnabled = provisioningEnabled;
            return this;
        }

        public Builder provisioningEnabled(Boolean provisioningEnabled) {
            return provisioningEnabled(Output.of(provisioningEnabled));
        }

        public Builder provisioningState(@Nullable Output<String> provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        public Builder provisioningState(String provisioningState) {
            return provisioningState(Output.of(provisioningState));
        }

        public Builder provisioningStatus(@Nullable Output<String> provisioningStatus) {
            $.provisioningStatus = provisioningStatus;
            return this;
        }

        public Builder provisioningStatus(String provisioningStatus) {
            return provisioningStatus(Output.of(provisioningStatus));
        }

        public Builder usersId(Output<String> usersId) {
            $.usersId = usersId;
            return this;
        }

        public Builder usersId(String usersId) {
            return usersId(Output.of(usersId));
        }

        public GetAppsArgs build() {
            if ($.usersId == null) {
                throw new MissingRequiredPropertyException("GetAppsArgs", "usersId");
            }
            return $;
        }
    }

}
