// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.onelogin.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserState extends com.pulumi.resources.ResourceArgs {

    public static final UserState Empty = new UserState();

    @Import(name="comment")
    private @Nullable Output<String> comment;

    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    @Import(name="company")
    private @Nullable Output<String> company;

    public Optional<Output<String>> company() {
        return Optional.ofNullable(this.company);
    }

    @Import(name="customAttributes")
    private @Nullable Output<Map<String,String>> customAttributes;

    public Optional<Output<Map<String,String>>> customAttributes() {
        return Optional.ofNullable(this.customAttributes);
    }

    @Import(name="department")
    private @Nullable Output<String> department;

    public Optional<Output<String>> department() {
        return Optional.ofNullable(this.department);
    }

    @Import(name="directoryId")
    private @Nullable Output<Integer> directoryId;

    public Optional<Output<Integer>> directoryId() {
        return Optional.ofNullable(this.directoryId);
    }

    @Import(name="distinguishedName")
    private @Nullable Output<String> distinguishedName;

    public Optional<Output<String>> distinguishedName() {
        return Optional.ofNullable(this.distinguishedName);
    }

    @Import(name="email")
    private @Nullable Output<String> email;

    public Optional<Output<String>> email() {
        return Optional.ofNullable(this.email);
    }

    @Import(name="externalId")
    private @Nullable Output<Integer> externalId;

    public Optional<Output<Integer>> externalId() {
        return Optional.ofNullable(this.externalId);
    }

    @Import(name="firstname")
    private @Nullable Output<String> firstname;

    public Optional<Output<String>> firstname() {
        return Optional.ofNullable(this.firstname);
    }

    @Import(name="groupId")
    private @Nullable Output<Integer> groupId;

    public Optional<Output<Integer>> groupId() {
        return Optional.ofNullable(this.groupId);
    }

    @Import(name="lastname")
    private @Nullable Output<String> lastname;

    public Optional<Output<String>> lastname() {
        return Optional.ofNullable(this.lastname);
    }

    @Import(name="managerAdId")
    private @Nullable Output<Integer> managerAdId;

    public Optional<Output<Integer>> managerAdId() {
        return Optional.ofNullable(this.managerAdId);
    }

    @Import(name="managerUserId")
    private @Nullable Output<Integer> managerUserId;

    public Optional<Output<Integer>> managerUserId() {
        return Optional.ofNullable(this.managerUserId);
    }

    @Import(name="memberOf")
    private @Nullable Output<String> memberOf;

    public Optional<Output<String>> memberOf() {
        return Optional.ofNullable(this.memberOf);
    }

    @Import(name="phone")
    private @Nullable Output<String> phone;

    public Optional<Output<String>> phone() {
        return Optional.ofNullable(this.phone);
    }

    @Import(name="samaccountname")
    private @Nullable Output<String> samaccountname;

    public Optional<Output<String>> samaccountname() {
        return Optional.ofNullable(this.samaccountname);
    }

    @Import(name="state")
    private @Nullable Output<Integer> state;

    public Optional<Output<Integer>> state() {
        return Optional.ofNullable(this.state);
    }

    @Import(name="status")
    private @Nullable Output<Integer> status;

    public Optional<Output<Integer>> status() {
        return Optional.ofNullable(this.status);
    }

    @Import(name="title")
    private @Nullable Output<String> title;

    public Optional<Output<String>> title() {
        return Optional.ofNullable(this.title);
    }

    @Import(name="trustedIdpId")
    private @Nullable Output<Integer> trustedIdpId;

    public Optional<Output<Integer>> trustedIdpId() {
        return Optional.ofNullable(this.trustedIdpId);
    }

    @Import(name="username")
    private @Nullable Output<String> username;

    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    @Import(name="userprincipalname")
    private @Nullable Output<String> userprincipalname;

    public Optional<Output<String>> userprincipalname() {
        return Optional.ofNullable(this.userprincipalname);
    }

    private UserState() {}

    private UserState(UserState $) {
        this.comment = $.comment;
        this.company = $.company;
        this.customAttributes = $.customAttributes;
        this.department = $.department;
        this.directoryId = $.directoryId;
        this.distinguishedName = $.distinguishedName;
        this.email = $.email;
        this.externalId = $.externalId;
        this.firstname = $.firstname;
        this.groupId = $.groupId;
        this.lastname = $.lastname;
        this.managerAdId = $.managerAdId;
        this.managerUserId = $.managerUserId;
        this.memberOf = $.memberOf;
        this.phone = $.phone;
        this.samaccountname = $.samaccountname;
        this.state = $.state;
        this.status = $.status;
        this.title = $.title;
        this.trustedIdpId = $.trustedIdpId;
        this.username = $.username;
        this.userprincipalname = $.userprincipalname;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserState $;

        public Builder() {
            $ = new UserState();
        }

        public Builder(UserState defaults) {
            $ = new UserState(Objects.requireNonNull(defaults));
        }

        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        public Builder company(@Nullable Output<String> company) {
            $.company = company;
            return this;
        }

        public Builder company(String company) {
            return company(Output.of(company));
        }

        public Builder customAttributes(@Nullable Output<Map<String,String>> customAttributes) {
            $.customAttributes = customAttributes;
            return this;
        }

        public Builder customAttributes(Map<String,String> customAttributes) {
            return customAttributes(Output.of(customAttributes));
        }

        public Builder department(@Nullable Output<String> department) {
            $.department = department;
            return this;
        }

        public Builder department(String department) {
            return department(Output.of(department));
        }

        public Builder directoryId(@Nullable Output<Integer> directoryId) {
            $.directoryId = directoryId;
            return this;
        }

        public Builder directoryId(Integer directoryId) {
            return directoryId(Output.of(directoryId));
        }

        public Builder distinguishedName(@Nullable Output<String> distinguishedName) {
            $.distinguishedName = distinguishedName;
            return this;
        }

        public Builder distinguishedName(String distinguishedName) {
            return distinguishedName(Output.of(distinguishedName));
        }

        public Builder email(@Nullable Output<String> email) {
            $.email = email;
            return this;
        }

        public Builder email(String email) {
            return email(Output.of(email));
        }

        public Builder externalId(@Nullable Output<Integer> externalId) {
            $.externalId = externalId;
            return this;
        }

        public Builder externalId(Integer externalId) {
            return externalId(Output.of(externalId));
        }

        public Builder firstname(@Nullable Output<String> firstname) {
            $.firstname = firstname;
            return this;
        }

        public Builder firstname(String firstname) {
            return firstname(Output.of(firstname));
        }

        public Builder groupId(@Nullable Output<Integer> groupId) {
            $.groupId = groupId;
            return this;
        }

        public Builder groupId(Integer groupId) {
            return groupId(Output.of(groupId));
        }

        public Builder lastname(@Nullable Output<String> lastname) {
            $.lastname = lastname;
            return this;
        }

        public Builder lastname(String lastname) {
            return lastname(Output.of(lastname));
        }

        public Builder managerAdId(@Nullable Output<Integer> managerAdId) {
            $.managerAdId = managerAdId;
            return this;
        }

        public Builder managerAdId(Integer managerAdId) {
            return managerAdId(Output.of(managerAdId));
        }

        public Builder managerUserId(@Nullable Output<Integer> managerUserId) {
            $.managerUserId = managerUserId;
            return this;
        }

        public Builder managerUserId(Integer managerUserId) {
            return managerUserId(Output.of(managerUserId));
        }

        public Builder memberOf(@Nullable Output<String> memberOf) {
            $.memberOf = memberOf;
            return this;
        }

        public Builder memberOf(String memberOf) {
            return memberOf(Output.of(memberOf));
        }

        public Builder phone(@Nullable Output<String> phone) {
            $.phone = phone;
            return this;
        }

        public Builder phone(String phone) {
            return phone(Output.of(phone));
        }

        public Builder samaccountname(@Nullable Output<String> samaccountname) {
            $.samaccountname = samaccountname;
            return this;
        }

        public Builder samaccountname(String samaccountname) {
            return samaccountname(Output.of(samaccountname));
        }

        public Builder state(@Nullable Output<Integer> state) {
            $.state = state;
            return this;
        }

        public Builder state(Integer state) {
            return state(Output.of(state));
        }

        public Builder status(@Nullable Output<Integer> status) {
            $.status = status;
            return this;
        }

        public Builder status(Integer status) {
            return status(Output.of(status));
        }

        public Builder title(@Nullable Output<String> title) {
            $.title = title;
            return this;
        }

        public Builder title(String title) {
            return title(Output.of(title));
        }

        public Builder trustedIdpId(@Nullable Output<Integer> trustedIdpId) {
            $.trustedIdpId = trustedIdpId;
            return this;
        }

        public Builder trustedIdpId(Integer trustedIdpId) {
            return trustedIdpId(Output.of(trustedIdpId));
        }

        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        public Builder username(String username) {
            return username(Output.of(username));
        }

        public Builder userprincipalname(@Nullable Output<String> userprincipalname) {
            $.userprincipalname = userprincipalname;
            return this;
        }

        public Builder userprincipalname(String userprincipalname) {
            return userprincipalname(Output.of(userprincipalname));
        }

        public UserState build() {
            return $;
        }
    }

}
