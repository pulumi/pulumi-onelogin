// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.onelogin.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetPrivilegesPrivilegeStatement {
    /**
     * @return An array of strings that represent actions within OneLogin. Actions are prefixed with the class of object they are related to and followed by a specific action for the given class.
     * e.g. users:List, where the class is users and the specific action is List. Don’t mix classes within an Action array. To create a privilege that includes multiple different classes, create multiple statements. A wildcard * that includes all actions is supported. Use wildcards to create a Super User privilege.
     * 
     */
    private List<String> actions;
    /**
     * @return Set to “Allow.” By default, all actions are denied, this Statement allows the listed actions to be executed.
     * 
     */
    private String effect;
    /**
     * @return Target the privileged action against specific resources with the scope.
     * The scope pattern is the class of object used by the Action, followed by an ID that represents a resource in OneLogin.
     * e.g. apps/1234, where apps is the class and 1234 is the ID of an app.
     * The wildcard * is supported and indicates that all resources of the class type declared, in the Action, are in scope.
     * The Action and Scope classes must match. However, there is an exception, a scope of roles/{role_id} can be combined with Actions on the user or app class. The exception allows you to target groups of users or apps with specific actions.
     * 
     */
    private List<String> scopes;

    private GetPrivilegesPrivilegeStatement() {}
    /**
     * @return An array of strings that represent actions within OneLogin. Actions are prefixed with the class of object they are related to and followed by a specific action for the given class.
     * e.g. users:List, where the class is users and the specific action is List. Don’t mix classes within an Action array. To create a privilege that includes multiple different classes, create multiple statements. A wildcard * that includes all actions is supported. Use wildcards to create a Super User privilege.
     * 
     */
    public List<String> actions() {
        return this.actions;
    }
    /**
     * @return Set to “Allow.” By default, all actions are denied, this Statement allows the listed actions to be executed.
     * 
     */
    public String effect() {
        return this.effect;
    }
    /**
     * @return Target the privileged action against specific resources with the scope.
     * The scope pattern is the class of object used by the Action, followed by an ID that represents a resource in OneLogin.
     * e.g. apps/1234, where apps is the class and 1234 is the ID of an app.
     * The wildcard * is supported and indicates that all resources of the class type declared, in the Action, are in scope.
     * The Action and Scope classes must match. However, there is an exception, a scope of roles/{role_id} can be combined with Actions on the user or app class. The exception allows you to target groups of users or apps with specific actions.
     * 
     */
    public List<String> scopes() {
        return this.scopes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPrivilegesPrivilegeStatement defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> actions;
        private String effect;
        private List<String> scopes;
        public Builder() {}
        public Builder(GetPrivilegesPrivilegeStatement defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actions = defaults.actions;
    	      this.effect = defaults.effect;
    	      this.scopes = defaults.scopes;
        }

        @CustomType.Setter
        public Builder actions(List<String> actions) {
            if (actions == null) {
              throw new MissingRequiredPropertyException("GetPrivilegesPrivilegeStatement", "actions");
            }
            this.actions = actions;
            return this;
        }
        public Builder actions(String... actions) {
            return actions(List.of(actions));
        }
        @CustomType.Setter
        public Builder effect(String effect) {
            if (effect == null) {
              throw new MissingRequiredPropertyException("GetPrivilegesPrivilegeStatement", "effect");
            }
            this.effect = effect;
            return this;
        }
        @CustomType.Setter
        public Builder scopes(List<String> scopes) {
            if (scopes == null) {
              throw new MissingRequiredPropertyException("GetPrivilegesPrivilegeStatement", "scopes");
            }
            this.scopes = scopes;
            return this;
        }
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }
        public GetPrivilegesPrivilegeStatement build() {
            final var _resultValue = new GetPrivilegesPrivilegeStatement();
            _resultValue.actions = actions;
            _resultValue.effect = effect;
            _resultValue.scopes = scopes;
            return _resultValue;
        }
    }
}
