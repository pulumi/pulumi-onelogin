// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.onelogin.users.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.onelogin.users.outputs.GetDevicesFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetDevicesResult {
    private String authFactorName;
    private Boolean default_;
    private String deviceId;
    private @Nullable List<GetDevicesFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String typeDisplayName;
    private String userDisplayName;
    private String usersId;

    private GetDevicesResult() {}
    public String authFactorName() {
        return this.authFactorName;
    }
    public Boolean default_() {
        return this.default_;
    }
    public String deviceId() {
        return this.deviceId;
    }
    public List<GetDevicesFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String typeDisplayName() {
        return this.typeDisplayName;
    }
    public String userDisplayName() {
        return this.userDisplayName;
    }
    public String usersId() {
        return this.usersId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDevicesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String authFactorName;
        private Boolean default_;
        private String deviceId;
        private @Nullable List<GetDevicesFilter> filters;
        private String id;
        private String typeDisplayName;
        private String userDisplayName;
        private String usersId;
        public Builder() {}
        public Builder(GetDevicesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authFactorName = defaults.authFactorName;
    	      this.default_ = defaults.default_;
    	      this.deviceId = defaults.deviceId;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.typeDisplayName = defaults.typeDisplayName;
    	      this.userDisplayName = defaults.userDisplayName;
    	      this.usersId = defaults.usersId;
        }

        @CustomType.Setter
        public Builder authFactorName(String authFactorName) {
            if (authFactorName == null) {
              throw new MissingRequiredPropertyException("GetDevicesResult", "authFactorName");
            }
            this.authFactorName = authFactorName;
            return this;
        }
        @CustomType.Setter("default")
        public Builder default_(Boolean default_) {
            if (default_ == null) {
              throw new MissingRequiredPropertyException("GetDevicesResult", "default_");
            }
            this.default_ = default_;
            return this;
        }
        @CustomType.Setter
        public Builder deviceId(String deviceId) {
            if (deviceId == null) {
              throw new MissingRequiredPropertyException("GetDevicesResult", "deviceId");
            }
            this.deviceId = deviceId;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetDevicesFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetDevicesFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDevicesResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder typeDisplayName(String typeDisplayName) {
            if (typeDisplayName == null) {
              throw new MissingRequiredPropertyException("GetDevicesResult", "typeDisplayName");
            }
            this.typeDisplayName = typeDisplayName;
            return this;
        }
        @CustomType.Setter
        public Builder userDisplayName(String userDisplayName) {
            if (userDisplayName == null) {
              throw new MissingRequiredPropertyException("GetDevicesResult", "userDisplayName");
            }
            this.userDisplayName = userDisplayName;
            return this;
        }
        @CustomType.Setter
        public Builder usersId(String usersId) {
            if (usersId == null) {
              throw new MissingRequiredPropertyException("GetDevicesResult", "usersId");
            }
            this.usersId = usersId;
            return this;
        }
        public GetDevicesResult build() {
            final var _resultValue = new GetDevicesResult();
            _resultValue.authFactorName = authFactorName;
            _resultValue.default_ = default_;
            _resultValue.deviceId = deviceId;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.typeDisplayName = typeDisplayName;
            _resultValue.userDisplayName = userDisplayName;
            _resultValue.usersId = usersId;
            return _resultValue;
        }
    }
}
