// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.onelogin.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.onelogin.outputs.AppEnforcementPointResource;
import com.pulumi.onelogin.outputs.AppEnforcementPointSessionExpiryFixed;
import com.pulumi.onelogin.outputs.AppEnforcementPointSessionExpiryInactivity;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AppEnforcementPoint {
    /**
     * @return The URL path evaluation is case insensitive by default. Resources hosted on web servers such as Apache, NGINX and Java EE are case sensitive paths. Web servers such as Microsoft IIS are not case-sensitive.
     * 
     */
    private @Nullable Boolean caseSensitive;
    /**
     * @return If access is conditional, the conditions that must evaluate to true to allow access to a resource. For example, to require the user must be authenticated and have either the role Admin or User
     * 
     */
    private @Nullable String conditions;
    /**
     * @return The root path to the application, often the name of the application. Can be any name, path or just a slash (“/”). The context root uniquely identifies the application within the enforcement point.
     * 
     */
    private @Nullable String contextRoot;
    /**
     * @return The location within the context root to which the browser will be redirected for IdP-initiated single sign-on. For example, the landing page might be an index page in the context root such as index.html or default.aspx. The landing page cannot begin with a slash and must use valid URL characters.
     * 
     */
    private @Nullable String landingPage;
    /**
     * @return Specify to always `allow`, `deny` access to resources, of if access is `conditional`.
     * 
     */
    private @Nullable String permissions;
    /**
     * @return Require user authentication to access any resource protected by this enforcement point.
     * 
     */
    private @Nullable Boolean requireSitewideAuthentication;
    /**
     * @return Array of resource objects
     * 
     */
    private @Nullable List<AppEnforcementPointResource> resources;
    /**
     * @return unit: - 0 = Seconds - 1 = Minutes - 2 = Hours value: - When Unit = 0 or 1 value must be 0-60 - When Unit = 2 value must be 0-24
     * 
     */
    private @Nullable AppEnforcementPointSessionExpiryFixed sessionExpiryFixed;
    /**
     * @return unit: - 0 = Seconds - 1 = Minutes - 2 = Hours value: - When Unit = 0 or 1 value must be 0-60 - When Unit = 2 value must be 0-24
     * 
     */
    private @Nullable AppEnforcementPointSessionExpiryInactivity sessionExpiryInactivity;
    /**
     * @return A fully-qualified URL to the internal application including scheme, authority and path. The target host authority must be an IP address, not a hostname.
     * 
     */
    private @Nullable String target;
    /**
     * @return Can only be set on create. Access Gateway Token.
     * 
     */
    private @Nullable String token;
    /**
     * @return Use the target host header as opposed to the original gateway or upstream host header.
     * 
     */
    private @Nullable Boolean useTargetHostHeader;
    /**
     * @return A comma-delimited list of one or more virtual hosts that map to applications assigned to the enforcement point. A VHOST may be a host name or an IP address. VHOST distinguish between applications that are at the same context root.
     * 
     */
    private @Nullable String vhost;

    private AppEnforcementPoint() {}
    /**
     * @return The URL path evaluation is case insensitive by default. Resources hosted on web servers such as Apache, NGINX and Java EE are case sensitive paths. Web servers such as Microsoft IIS are not case-sensitive.
     * 
     */
    public Optional<Boolean> caseSensitive() {
        return Optional.ofNullable(this.caseSensitive);
    }
    /**
     * @return If access is conditional, the conditions that must evaluate to true to allow access to a resource. For example, to require the user must be authenticated and have either the role Admin or User
     * 
     */
    public Optional<String> conditions() {
        return Optional.ofNullable(this.conditions);
    }
    /**
     * @return The root path to the application, often the name of the application. Can be any name, path or just a slash (“/”). The context root uniquely identifies the application within the enforcement point.
     * 
     */
    public Optional<String> contextRoot() {
        return Optional.ofNullable(this.contextRoot);
    }
    /**
     * @return The location within the context root to which the browser will be redirected for IdP-initiated single sign-on. For example, the landing page might be an index page in the context root such as index.html or default.aspx. The landing page cannot begin with a slash and must use valid URL characters.
     * 
     */
    public Optional<String> landingPage() {
        return Optional.ofNullable(this.landingPage);
    }
    /**
     * @return Specify to always `allow`, `deny` access to resources, of if access is `conditional`.
     * 
     */
    public Optional<String> permissions() {
        return Optional.ofNullable(this.permissions);
    }
    /**
     * @return Require user authentication to access any resource protected by this enforcement point.
     * 
     */
    public Optional<Boolean> requireSitewideAuthentication() {
        return Optional.ofNullable(this.requireSitewideAuthentication);
    }
    /**
     * @return Array of resource objects
     * 
     */
    public List<AppEnforcementPointResource> resources() {
        return this.resources == null ? List.of() : this.resources;
    }
    /**
     * @return unit: - 0 = Seconds - 1 = Minutes - 2 = Hours value: - When Unit = 0 or 1 value must be 0-60 - When Unit = 2 value must be 0-24
     * 
     */
    public Optional<AppEnforcementPointSessionExpiryFixed> sessionExpiryFixed() {
        return Optional.ofNullable(this.sessionExpiryFixed);
    }
    /**
     * @return unit: - 0 = Seconds - 1 = Minutes - 2 = Hours value: - When Unit = 0 or 1 value must be 0-60 - When Unit = 2 value must be 0-24
     * 
     */
    public Optional<AppEnforcementPointSessionExpiryInactivity> sessionExpiryInactivity() {
        return Optional.ofNullable(this.sessionExpiryInactivity);
    }
    /**
     * @return A fully-qualified URL to the internal application including scheme, authority and path. The target host authority must be an IP address, not a hostname.
     * 
     */
    public Optional<String> target() {
        return Optional.ofNullable(this.target);
    }
    /**
     * @return Can only be set on create. Access Gateway Token.
     * 
     */
    public Optional<String> token() {
        return Optional.ofNullable(this.token);
    }
    /**
     * @return Use the target host header as opposed to the original gateway or upstream host header.
     * 
     */
    public Optional<Boolean> useTargetHostHeader() {
        return Optional.ofNullable(this.useTargetHostHeader);
    }
    /**
     * @return A comma-delimited list of one or more virtual hosts that map to applications assigned to the enforcement point. A VHOST may be a host name or an IP address. VHOST distinguish between applications that are at the same context root.
     * 
     */
    public Optional<String> vhost() {
        return Optional.ofNullable(this.vhost);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AppEnforcementPoint defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean caseSensitive;
        private @Nullable String conditions;
        private @Nullable String contextRoot;
        private @Nullable String landingPage;
        private @Nullable String permissions;
        private @Nullable Boolean requireSitewideAuthentication;
        private @Nullable List<AppEnforcementPointResource> resources;
        private @Nullable AppEnforcementPointSessionExpiryFixed sessionExpiryFixed;
        private @Nullable AppEnforcementPointSessionExpiryInactivity sessionExpiryInactivity;
        private @Nullable String target;
        private @Nullable String token;
        private @Nullable Boolean useTargetHostHeader;
        private @Nullable String vhost;
        public Builder() {}
        public Builder(AppEnforcementPoint defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.caseSensitive = defaults.caseSensitive;
    	      this.conditions = defaults.conditions;
    	      this.contextRoot = defaults.contextRoot;
    	      this.landingPage = defaults.landingPage;
    	      this.permissions = defaults.permissions;
    	      this.requireSitewideAuthentication = defaults.requireSitewideAuthentication;
    	      this.resources = defaults.resources;
    	      this.sessionExpiryFixed = defaults.sessionExpiryFixed;
    	      this.sessionExpiryInactivity = defaults.sessionExpiryInactivity;
    	      this.target = defaults.target;
    	      this.token = defaults.token;
    	      this.useTargetHostHeader = defaults.useTargetHostHeader;
    	      this.vhost = defaults.vhost;
        }

        @CustomType.Setter
        public Builder caseSensitive(@Nullable Boolean caseSensitive) {

            this.caseSensitive = caseSensitive;
            return this;
        }
        @CustomType.Setter
        public Builder conditions(@Nullable String conditions) {

            this.conditions = conditions;
            return this;
        }
        @CustomType.Setter
        public Builder contextRoot(@Nullable String contextRoot) {

            this.contextRoot = contextRoot;
            return this;
        }
        @CustomType.Setter
        public Builder landingPage(@Nullable String landingPage) {

            this.landingPage = landingPage;
            return this;
        }
        @CustomType.Setter
        public Builder permissions(@Nullable String permissions) {

            this.permissions = permissions;
            return this;
        }
        @CustomType.Setter
        public Builder requireSitewideAuthentication(@Nullable Boolean requireSitewideAuthentication) {

            this.requireSitewideAuthentication = requireSitewideAuthentication;
            return this;
        }
        @CustomType.Setter
        public Builder resources(@Nullable List<AppEnforcementPointResource> resources) {

            this.resources = resources;
            return this;
        }
        public Builder resources(AppEnforcementPointResource... resources) {
            return resources(List.of(resources));
        }
        @CustomType.Setter
        public Builder sessionExpiryFixed(@Nullable AppEnforcementPointSessionExpiryFixed sessionExpiryFixed) {

            this.sessionExpiryFixed = sessionExpiryFixed;
            return this;
        }
        @CustomType.Setter
        public Builder sessionExpiryInactivity(@Nullable AppEnforcementPointSessionExpiryInactivity sessionExpiryInactivity) {

            this.sessionExpiryInactivity = sessionExpiryInactivity;
            return this;
        }
        @CustomType.Setter
        public Builder target(@Nullable String target) {

            this.target = target;
            return this;
        }
        @CustomType.Setter
        public Builder token(@Nullable String token) {

            this.token = token;
            return this;
        }
        @CustomType.Setter
        public Builder useTargetHostHeader(@Nullable Boolean useTargetHostHeader) {

            this.useTargetHostHeader = useTargetHostHeader;
            return this;
        }
        @CustomType.Setter
        public Builder vhost(@Nullable String vhost) {

            this.vhost = vhost;
            return this;
        }
        public AppEnforcementPoint build() {
            final var _resultValue = new AppEnforcementPoint();
            _resultValue.caseSensitive = caseSensitive;
            _resultValue.conditions = conditions;
            _resultValue.contextRoot = contextRoot;
            _resultValue.landingPage = landingPage;
            _resultValue.permissions = permissions;
            _resultValue.requireSitewideAuthentication = requireSitewideAuthentication;
            _resultValue.resources = resources;
            _resultValue.sessionExpiryFixed = sessionExpiryFixed;
            _resultValue.sessionExpiryInactivity = sessionExpiryInactivity;
            _resultValue.target = target;
            _resultValue.token = token;
            _resultValue.useTargetHostHeader = useTargetHostHeader;
            _resultValue.vhost = vhost;
            return _resultValue;
        }
    }
}
