// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.onelogin.apps.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.onelogin.apps.inputs.GetRulesInstanceActionArgs;
import com.pulumi.onelogin.apps.inputs.GetRulesInstanceConditionArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRulesInstanceArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRulesInstanceArgs Empty = new GetRulesInstanceArgs();

    @Import(name="actions")
    private @Nullable Output<List<GetRulesInstanceActionArgs>> actions;

    public Optional<Output<List<GetRulesInstanceActionArgs>>> actions() {
        return Optional.ofNullable(this.actions);
    }

    @Import(name="appsId", required=true)
    private Output<String> appsId;

    public Output<String> appsId() {
        return this.appsId;
    }

    @Import(name="conditions")
    private @Nullable Output<List<GetRulesInstanceConditionArgs>> conditions;

    public Optional<Output<List<GetRulesInstanceConditionArgs>>> conditions() {
        return Optional.ofNullable(this.conditions);
    }

    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    @Import(name="id", required=true)
    private Output<String> id;

    public Output<String> id() {
        return this.id;
    }

    @Import(name="match")
    private @Nullable Output<String> match;

    public Optional<Output<String>> match() {
        return Optional.ofNullable(this.match);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="position")
    private @Nullable Output<Integer> position;

    public Optional<Output<Integer>> position() {
        return Optional.ofNullable(this.position);
    }

    private GetRulesInstanceArgs() {}

    private GetRulesInstanceArgs(GetRulesInstanceArgs $) {
        this.actions = $.actions;
        this.appsId = $.appsId;
        this.conditions = $.conditions;
        this.enabled = $.enabled;
        this.id = $.id;
        this.match = $.match;
        this.name = $.name;
        this.position = $.position;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRulesInstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRulesInstanceArgs $;

        public Builder() {
            $ = new GetRulesInstanceArgs();
        }

        public Builder(GetRulesInstanceArgs defaults) {
            $ = new GetRulesInstanceArgs(Objects.requireNonNull(defaults));
        }

        public Builder actions(@Nullable Output<List<GetRulesInstanceActionArgs>> actions) {
            $.actions = actions;
            return this;
        }

        public Builder actions(List<GetRulesInstanceActionArgs> actions) {
            return actions(Output.of(actions));
        }

        public Builder actions(GetRulesInstanceActionArgs... actions) {
            return actions(List.of(actions));
        }

        public Builder appsId(Output<String> appsId) {
            $.appsId = appsId;
            return this;
        }

        public Builder appsId(String appsId) {
            return appsId(Output.of(appsId));
        }

        public Builder conditions(@Nullable Output<List<GetRulesInstanceConditionArgs>> conditions) {
            $.conditions = conditions;
            return this;
        }

        public Builder conditions(List<GetRulesInstanceConditionArgs> conditions) {
            return conditions(Output.of(conditions));
        }

        public Builder conditions(GetRulesInstanceConditionArgs... conditions) {
            return conditions(List.of(conditions));
        }

        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        public Builder match(@Nullable Output<String> match) {
            $.match = match;
            return this;
        }

        public Builder match(String match) {
            return match(Output.of(match));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder position(@Nullable Output<Integer> position) {
            $.position = position;
            return this;
        }

        public Builder position(Integer position) {
            return position(Output.of(position));
        }

        public GetRulesInstanceArgs build() {
            if ($.appsId == null) {
                throw new MissingRequiredPropertyException("GetRulesInstanceArgs", "appsId");
            }
            if ($.id == null) {
                throw new MissingRequiredPropertyException("GetRulesInstanceArgs", "id");
            }
            return $;
        }
    }

}
