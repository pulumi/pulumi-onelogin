// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.onelogin.apps.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.onelogin.apps.outputs.GetInstanceConfiguration;
import com.pulumi.onelogin.apps.outputs.GetInstanceEnforcementPoint;
import com.pulumi.onelogin.apps.outputs.GetInstanceParameters;
import com.pulumi.onelogin.apps.outputs.GetInstanceProvisioning;
import com.pulumi.onelogin.apps.outputs.GetInstanceSso;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetInstanceResult {
    private Boolean allowAssumedSignin;
    private Integer authMethod;
    private String authMethodDescription;
    private Integer brandId;
    private GetInstanceConfiguration configuration;
    private Integer connectorId;
    private String createdAt;
    private String description;
    private GetInstanceEnforcementPoint enforcementPoint;
    private String iconUrl;
    private String id;
    private Integer loginConfig;
    private String name;
    private String notes;
    private GetInstanceParameters parameters;
    private Integer policyId;
    private GetInstanceProvisioning provisioning;
    private List<Integer> roleIds;
    private GetInstanceSso sso;
    private Integer tabId;
    private String updatedAt;
    private Boolean visible;

    private GetInstanceResult() {}
    public Boolean allowAssumedSignin() {
        return this.allowAssumedSignin;
    }
    public Integer authMethod() {
        return this.authMethod;
    }
    public String authMethodDescription() {
        return this.authMethodDescription;
    }
    public Integer brandId() {
        return this.brandId;
    }
    public GetInstanceConfiguration configuration() {
        return this.configuration;
    }
    public Integer connectorId() {
        return this.connectorId;
    }
    public String createdAt() {
        return this.createdAt;
    }
    public String description() {
        return this.description;
    }
    public GetInstanceEnforcementPoint enforcementPoint() {
        return this.enforcementPoint;
    }
    public String iconUrl() {
        return this.iconUrl;
    }
    public String id() {
        return this.id;
    }
    public Integer loginConfig() {
        return this.loginConfig;
    }
    public String name() {
        return this.name;
    }
    public String notes() {
        return this.notes;
    }
    public GetInstanceParameters parameters() {
        return this.parameters;
    }
    public Integer policyId() {
        return this.policyId;
    }
    public GetInstanceProvisioning provisioning() {
        return this.provisioning;
    }
    public List<Integer> roleIds() {
        return this.roleIds;
    }
    public GetInstanceSso sso() {
        return this.sso;
    }
    public Integer tabId() {
        return this.tabId;
    }
    public String updatedAt() {
        return this.updatedAt;
    }
    public Boolean visible() {
        return this.visible;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean allowAssumedSignin;
        private Integer authMethod;
        private String authMethodDescription;
        private Integer brandId;
        private GetInstanceConfiguration configuration;
        private Integer connectorId;
        private String createdAt;
        private String description;
        private GetInstanceEnforcementPoint enforcementPoint;
        private String iconUrl;
        private String id;
        private Integer loginConfig;
        private String name;
        private String notes;
        private GetInstanceParameters parameters;
        private Integer policyId;
        private GetInstanceProvisioning provisioning;
        private List<Integer> roleIds;
        private GetInstanceSso sso;
        private Integer tabId;
        private String updatedAt;
        private Boolean visible;
        public Builder() {}
        public Builder(GetInstanceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowAssumedSignin = defaults.allowAssumedSignin;
    	      this.authMethod = defaults.authMethod;
    	      this.authMethodDescription = defaults.authMethodDescription;
    	      this.brandId = defaults.brandId;
    	      this.configuration = defaults.configuration;
    	      this.connectorId = defaults.connectorId;
    	      this.createdAt = defaults.createdAt;
    	      this.description = defaults.description;
    	      this.enforcementPoint = defaults.enforcementPoint;
    	      this.iconUrl = defaults.iconUrl;
    	      this.id = defaults.id;
    	      this.loginConfig = defaults.loginConfig;
    	      this.name = defaults.name;
    	      this.notes = defaults.notes;
    	      this.parameters = defaults.parameters;
    	      this.policyId = defaults.policyId;
    	      this.provisioning = defaults.provisioning;
    	      this.roleIds = defaults.roleIds;
    	      this.sso = defaults.sso;
    	      this.tabId = defaults.tabId;
    	      this.updatedAt = defaults.updatedAt;
    	      this.visible = defaults.visible;
        }

        @CustomType.Setter
        public Builder allowAssumedSignin(Boolean allowAssumedSignin) {
            if (allowAssumedSignin == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "allowAssumedSignin");
            }
            this.allowAssumedSignin = allowAssumedSignin;
            return this;
        }
        @CustomType.Setter
        public Builder authMethod(Integer authMethod) {
            if (authMethod == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "authMethod");
            }
            this.authMethod = authMethod;
            return this;
        }
        @CustomType.Setter
        public Builder authMethodDescription(String authMethodDescription) {
            if (authMethodDescription == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "authMethodDescription");
            }
            this.authMethodDescription = authMethodDescription;
            return this;
        }
        @CustomType.Setter
        public Builder brandId(Integer brandId) {
            if (brandId == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "brandId");
            }
            this.brandId = brandId;
            return this;
        }
        @CustomType.Setter
        public Builder configuration(GetInstanceConfiguration configuration) {
            if (configuration == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "configuration");
            }
            this.configuration = configuration;
            return this;
        }
        @CustomType.Setter
        public Builder connectorId(Integer connectorId) {
            if (connectorId == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "connectorId");
            }
            this.connectorId = connectorId;
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder enforcementPoint(GetInstanceEnforcementPoint enforcementPoint) {
            if (enforcementPoint == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "enforcementPoint");
            }
            this.enforcementPoint = enforcementPoint;
            return this;
        }
        @CustomType.Setter
        public Builder iconUrl(String iconUrl) {
            if (iconUrl == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "iconUrl");
            }
            this.iconUrl = iconUrl;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder loginConfig(Integer loginConfig) {
            if (loginConfig == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "loginConfig");
            }
            this.loginConfig = loginConfig;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder notes(String notes) {
            if (notes == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "notes");
            }
            this.notes = notes;
            return this;
        }
        @CustomType.Setter
        public Builder parameters(GetInstanceParameters parameters) {
            if (parameters == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "parameters");
            }
            this.parameters = parameters;
            return this;
        }
        @CustomType.Setter
        public Builder policyId(Integer policyId) {
            if (policyId == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "policyId");
            }
            this.policyId = policyId;
            return this;
        }
        @CustomType.Setter
        public Builder provisioning(GetInstanceProvisioning provisioning) {
            if (provisioning == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "provisioning");
            }
            this.provisioning = provisioning;
            return this;
        }
        @CustomType.Setter
        public Builder roleIds(List<Integer> roleIds) {
            if (roleIds == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "roleIds");
            }
            this.roleIds = roleIds;
            return this;
        }
        public Builder roleIds(Integer... roleIds) {
            return roleIds(List.of(roleIds));
        }
        @CustomType.Setter
        public Builder sso(GetInstanceSso sso) {
            if (sso == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "sso");
            }
            this.sso = sso;
            return this;
        }
        @CustomType.Setter
        public Builder tabId(Integer tabId) {
            if (tabId == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "tabId");
            }
            this.tabId = tabId;
            return this;
        }
        @CustomType.Setter
        public Builder updatedAt(String updatedAt) {
            if (updatedAt == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "updatedAt");
            }
            this.updatedAt = updatedAt;
            return this;
        }
        @CustomType.Setter
        public Builder visible(Boolean visible) {
            if (visible == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "visible");
            }
            this.visible = visible;
            return this;
        }
        public GetInstanceResult build() {
            final var _resultValue = new GetInstanceResult();
            _resultValue.allowAssumedSignin = allowAssumedSignin;
            _resultValue.authMethod = authMethod;
            _resultValue.authMethodDescription = authMethodDescription;
            _resultValue.brandId = brandId;
            _resultValue.configuration = configuration;
            _resultValue.connectorId = connectorId;
            _resultValue.createdAt = createdAt;
            _resultValue.description = description;
            _resultValue.enforcementPoint = enforcementPoint;
            _resultValue.iconUrl = iconUrl;
            _resultValue.id = id;
            _resultValue.loginConfig = loginConfig;
            _resultValue.name = name;
            _resultValue.notes = notes;
            _resultValue.parameters = parameters;
            _resultValue.policyId = policyId;
            _resultValue.provisioning = provisioning;
            _resultValue.roleIds = roleIds;
            _resultValue.sso = sso;
            _resultValue.tabId = tabId;
            _resultValue.updatedAt = updatedAt;
            _resultValue.visible = visible;
            return _resultValue;
        }
    }
}
