// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.onelogin.apps.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.onelogin.apps.inputs.GetInstanceEnforcementPointResourceArgs;
import com.pulumi.onelogin.apps.inputs.GetInstanceEnforcementPointSessionExpiryFixedArgs;
import com.pulumi.onelogin.apps.inputs.GetInstanceEnforcementPointSessionExpiryInactivityArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetInstanceEnforcementPointArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetInstanceEnforcementPointArgs Empty = new GetInstanceEnforcementPointArgs();

    /**
     * The URL path evaluation is case insensitive by default. Resources hosted on web servers such as Apache, NGINX and Java EE are case sensitive paths. Web servers such as Microsoft IIS are not case-sensitive.
     * 
     */
    @Import(name="caseSensitive", required=true)
    private Output<Boolean> caseSensitive;

    /**
     * @return The URL path evaluation is case insensitive by default. Resources hosted on web servers such as Apache, NGINX and Java EE are case sensitive paths. Web servers such as Microsoft IIS are not case-sensitive.
     * 
     */
    public Output<Boolean> caseSensitive() {
        return this.caseSensitive;
    }

    /**
     * If access is conditional, the conditions that must evaluate to true to allow access to a resource. For example, to require the user must be authenticated and have either the role Admin or User
     * 
     */
    @Import(name="conditions", required=true)
    private Output<String> conditions;

    /**
     * @return If access is conditional, the conditions that must evaluate to true to allow access to a resource. For example, to require the user must be authenticated and have either the role Admin or User
     * 
     */
    public Output<String> conditions() {
        return this.conditions;
    }

    /**
     * The root path to the application, often the name of the application. Can be any name, path or just a slash (“/”). The context root uniquely identifies the application within the enforcement point.
     * 
     */
    @Import(name="contextRoot", required=true)
    private Output<String> contextRoot;

    /**
     * @return The root path to the application, often the name of the application. Can be any name, path or just a slash (“/”). The context root uniquely identifies the application within the enforcement point.
     * 
     */
    public Output<String> contextRoot() {
        return this.contextRoot;
    }

    /**
     * The location within the context root to which the browser will be redirected for IdP-initiated single sign-on. For example, the landing page might be an index page in the context root such as index.html or default.aspx. The landing page cannot begin with a slash and must use valid URL characters.
     * 
     */
    @Import(name="landingPage", required=true)
    private Output<String> landingPage;

    /**
     * @return The location within the context root to which the browser will be redirected for IdP-initiated single sign-on. For example, the landing page might be an index page in the context root such as index.html or default.aspx. The landing page cannot begin with a slash and must use valid URL characters.
     * 
     */
    public Output<String> landingPage() {
        return this.landingPage;
    }

    /**
     * Specify to always `allow`, `deny` access to resources, of if access is `conditional`.
     * 
     */
    @Import(name="permissions", required=true)
    private Output<String> permissions;

    /**
     * @return Specify to always `allow`, `deny` access to resources, of if access is `conditional`.
     * 
     */
    public Output<String> permissions() {
        return this.permissions;
    }

    /**
     * Require user authentication to access any resource protected by this enforcement point.
     * 
     */
    @Import(name="requireSitewideAuthentication", required=true)
    private Output<Boolean> requireSitewideAuthentication;

    /**
     * @return Require user authentication to access any resource protected by this enforcement point.
     * 
     */
    public Output<Boolean> requireSitewideAuthentication() {
        return this.requireSitewideAuthentication;
    }

    /**
     * Array of resource objects
     * 
     */
    @Import(name="resources", required=true)
    private Output<List<GetInstanceEnforcementPointResourceArgs>> resources;

    /**
     * @return Array of resource objects
     * 
     */
    public Output<List<GetInstanceEnforcementPointResourceArgs>> resources() {
        return this.resources;
    }

    /**
     * unit: - 0 = Seconds - 1 = Minutes - 2 = Hours value: - When Unit = 0 or 1 value must be 0-60 - When Unit = 2 value must be 0-24
     * 
     */
    @Import(name="sessionExpiryFixed", required=true)
    private Output<GetInstanceEnforcementPointSessionExpiryFixedArgs> sessionExpiryFixed;

    /**
     * @return unit: - 0 = Seconds - 1 = Minutes - 2 = Hours value: - When Unit = 0 or 1 value must be 0-60 - When Unit = 2 value must be 0-24
     * 
     */
    public Output<GetInstanceEnforcementPointSessionExpiryFixedArgs> sessionExpiryFixed() {
        return this.sessionExpiryFixed;
    }

    /**
     * unit: - 0 = Seconds - 1 = Minutes - 2 = Hours value: - When Unit = 0 or 1 value must be 0-60 - When Unit = 2 value must be 0-24
     * 
     */
    @Import(name="sessionExpiryInactivity", required=true)
    private Output<GetInstanceEnforcementPointSessionExpiryInactivityArgs> sessionExpiryInactivity;

    /**
     * @return unit: - 0 = Seconds - 1 = Minutes - 2 = Hours value: - When Unit = 0 or 1 value must be 0-60 - When Unit = 2 value must be 0-24
     * 
     */
    public Output<GetInstanceEnforcementPointSessionExpiryInactivityArgs> sessionExpiryInactivity() {
        return this.sessionExpiryInactivity;
    }

    /**
     * A fully-qualified URL to the internal application including scheme, authority and path. The target host authority must be an IP address, not a hostname.
     * 
     */
    @Import(name="target", required=true)
    private Output<String> target;

    /**
     * @return A fully-qualified URL to the internal application including scheme, authority and path. The target host authority must be an IP address, not a hostname.
     * 
     */
    public Output<String> target() {
        return this.target;
    }

    /**
     * Can only be set on create. Access Gateway Token.
     * 
     */
    @Import(name="token", required=true)
    private Output<String> token;

    /**
     * @return Can only be set on create. Access Gateway Token.
     * 
     */
    public Output<String> token() {
        return this.token;
    }

    /**
     * Use the target host header as opposed to the original gateway or upstream host header.
     * 
     */
    @Import(name="useTargetHostHeader", required=true)
    private Output<Boolean> useTargetHostHeader;

    /**
     * @return Use the target host header as opposed to the original gateway or upstream host header.
     * 
     */
    public Output<Boolean> useTargetHostHeader() {
        return this.useTargetHostHeader;
    }

    /**
     * A comma-delimited list of one or more virtual hosts that map to applications assigned to the enforcement point. A VHOST may be a host name or an IP address. VHOST distinguish between applications that are at the same context root.
     * 
     */
    @Import(name="vhost", required=true)
    private Output<String> vhost;

    /**
     * @return A comma-delimited list of one or more virtual hosts that map to applications assigned to the enforcement point. A VHOST may be a host name or an IP address. VHOST distinguish between applications that are at the same context root.
     * 
     */
    public Output<String> vhost() {
        return this.vhost;
    }

    private GetInstanceEnforcementPointArgs() {}

    private GetInstanceEnforcementPointArgs(GetInstanceEnforcementPointArgs $) {
        this.caseSensitive = $.caseSensitive;
        this.conditions = $.conditions;
        this.contextRoot = $.contextRoot;
        this.landingPage = $.landingPage;
        this.permissions = $.permissions;
        this.requireSitewideAuthentication = $.requireSitewideAuthentication;
        this.resources = $.resources;
        this.sessionExpiryFixed = $.sessionExpiryFixed;
        this.sessionExpiryInactivity = $.sessionExpiryInactivity;
        this.target = $.target;
        this.token = $.token;
        this.useTargetHostHeader = $.useTargetHostHeader;
        this.vhost = $.vhost;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetInstanceEnforcementPointArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetInstanceEnforcementPointArgs $;

        public Builder() {
            $ = new GetInstanceEnforcementPointArgs();
        }

        public Builder(GetInstanceEnforcementPointArgs defaults) {
            $ = new GetInstanceEnforcementPointArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param caseSensitive The URL path evaluation is case insensitive by default. Resources hosted on web servers such as Apache, NGINX and Java EE are case sensitive paths. Web servers such as Microsoft IIS are not case-sensitive.
         * 
         * @return builder
         * 
         */
        public Builder caseSensitive(Output<Boolean> caseSensitive) {
            $.caseSensitive = caseSensitive;
            return this;
        }

        /**
         * @param caseSensitive The URL path evaluation is case insensitive by default. Resources hosted on web servers such as Apache, NGINX and Java EE are case sensitive paths. Web servers such as Microsoft IIS are not case-sensitive.
         * 
         * @return builder
         * 
         */
        public Builder caseSensitive(Boolean caseSensitive) {
            return caseSensitive(Output.of(caseSensitive));
        }

        /**
         * @param conditions If access is conditional, the conditions that must evaluate to true to allow access to a resource. For example, to require the user must be authenticated and have either the role Admin or User
         * 
         * @return builder
         * 
         */
        public Builder conditions(Output<String> conditions) {
            $.conditions = conditions;
            return this;
        }

        /**
         * @param conditions If access is conditional, the conditions that must evaluate to true to allow access to a resource. For example, to require the user must be authenticated and have either the role Admin or User
         * 
         * @return builder
         * 
         */
        public Builder conditions(String conditions) {
            return conditions(Output.of(conditions));
        }

        /**
         * @param contextRoot The root path to the application, often the name of the application. Can be any name, path or just a slash (“/”). The context root uniquely identifies the application within the enforcement point.
         * 
         * @return builder
         * 
         */
        public Builder contextRoot(Output<String> contextRoot) {
            $.contextRoot = contextRoot;
            return this;
        }

        /**
         * @param contextRoot The root path to the application, often the name of the application. Can be any name, path or just a slash (“/”). The context root uniquely identifies the application within the enforcement point.
         * 
         * @return builder
         * 
         */
        public Builder contextRoot(String contextRoot) {
            return contextRoot(Output.of(contextRoot));
        }

        /**
         * @param landingPage The location within the context root to which the browser will be redirected for IdP-initiated single sign-on. For example, the landing page might be an index page in the context root such as index.html or default.aspx. The landing page cannot begin with a slash and must use valid URL characters.
         * 
         * @return builder
         * 
         */
        public Builder landingPage(Output<String> landingPage) {
            $.landingPage = landingPage;
            return this;
        }

        /**
         * @param landingPage The location within the context root to which the browser will be redirected for IdP-initiated single sign-on. For example, the landing page might be an index page in the context root such as index.html or default.aspx. The landing page cannot begin with a slash and must use valid URL characters.
         * 
         * @return builder
         * 
         */
        public Builder landingPage(String landingPage) {
            return landingPage(Output.of(landingPage));
        }

        /**
         * @param permissions Specify to always `allow`, `deny` access to resources, of if access is `conditional`.
         * 
         * @return builder
         * 
         */
        public Builder permissions(Output<String> permissions) {
            $.permissions = permissions;
            return this;
        }

        /**
         * @param permissions Specify to always `allow`, `deny` access to resources, of if access is `conditional`.
         * 
         * @return builder
         * 
         */
        public Builder permissions(String permissions) {
            return permissions(Output.of(permissions));
        }

        /**
         * @param requireSitewideAuthentication Require user authentication to access any resource protected by this enforcement point.
         * 
         * @return builder
         * 
         */
        public Builder requireSitewideAuthentication(Output<Boolean> requireSitewideAuthentication) {
            $.requireSitewideAuthentication = requireSitewideAuthentication;
            return this;
        }

        /**
         * @param requireSitewideAuthentication Require user authentication to access any resource protected by this enforcement point.
         * 
         * @return builder
         * 
         */
        public Builder requireSitewideAuthentication(Boolean requireSitewideAuthentication) {
            return requireSitewideAuthentication(Output.of(requireSitewideAuthentication));
        }

        /**
         * @param resources Array of resource objects
         * 
         * @return builder
         * 
         */
        public Builder resources(Output<List<GetInstanceEnforcementPointResourceArgs>> resources) {
            $.resources = resources;
            return this;
        }

        /**
         * @param resources Array of resource objects
         * 
         * @return builder
         * 
         */
        public Builder resources(List<GetInstanceEnforcementPointResourceArgs> resources) {
            return resources(Output.of(resources));
        }

        /**
         * @param resources Array of resource objects
         * 
         * @return builder
         * 
         */
        public Builder resources(GetInstanceEnforcementPointResourceArgs... resources) {
            return resources(List.of(resources));
        }

        /**
         * @param sessionExpiryFixed unit: - 0 = Seconds - 1 = Minutes - 2 = Hours value: - When Unit = 0 or 1 value must be 0-60 - When Unit = 2 value must be 0-24
         * 
         * @return builder
         * 
         */
        public Builder sessionExpiryFixed(Output<GetInstanceEnforcementPointSessionExpiryFixedArgs> sessionExpiryFixed) {
            $.sessionExpiryFixed = sessionExpiryFixed;
            return this;
        }

        /**
         * @param sessionExpiryFixed unit: - 0 = Seconds - 1 = Minutes - 2 = Hours value: - When Unit = 0 or 1 value must be 0-60 - When Unit = 2 value must be 0-24
         * 
         * @return builder
         * 
         */
        public Builder sessionExpiryFixed(GetInstanceEnforcementPointSessionExpiryFixedArgs sessionExpiryFixed) {
            return sessionExpiryFixed(Output.of(sessionExpiryFixed));
        }

        /**
         * @param sessionExpiryInactivity unit: - 0 = Seconds - 1 = Minutes - 2 = Hours value: - When Unit = 0 or 1 value must be 0-60 - When Unit = 2 value must be 0-24
         * 
         * @return builder
         * 
         */
        public Builder sessionExpiryInactivity(Output<GetInstanceEnforcementPointSessionExpiryInactivityArgs> sessionExpiryInactivity) {
            $.sessionExpiryInactivity = sessionExpiryInactivity;
            return this;
        }

        /**
         * @param sessionExpiryInactivity unit: - 0 = Seconds - 1 = Minutes - 2 = Hours value: - When Unit = 0 or 1 value must be 0-60 - When Unit = 2 value must be 0-24
         * 
         * @return builder
         * 
         */
        public Builder sessionExpiryInactivity(GetInstanceEnforcementPointSessionExpiryInactivityArgs sessionExpiryInactivity) {
            return sessionExpiryInactivity(Output.of(sessionExpiryInactivity));
        }

        /**
         * @param target A fully-qualified URL to the internal application including scheme, authority and path. The target host authority must be an IP address, not a hostname.
         * 
         * @return builder
         * 
         */
        public Builder target(Output<String> target) {
            $.target = target;
            return this;
        }

        /**
         * @param target A fully-qualified URL to the internal application including scheme, authority and path. The target host authority must be an IP address, not a hostname.
         * 
         * @return builder
         * 
         */
        public Builder target(String target) {
            return target(Output.of(target));
        }

        /**
         * @param token Can only be set on create. Access Gateway Token.
         * 
         * @return builder
         * 
         */
        public Builder token(Output<String> token) {
            $.token = token;
            return this;
        }

        /**
         * @param token Can only be set on create. Access Gateway Token.
         * 
         * @return builder
         * 
         */
        public Builder token(String token) {
            return token(Output.of(token));
        }

        /**
         * @param useTargetHostHeader Use the target host header as opposed to the original gateway or upstream host header.
         * 
         * @return builder
         * 
         */
        public Builder useTargetHostHeader(Output<Boolean> useTargetHostHeader) {
            $.useTargetHostHeader = useTargetHostHeader;
            return this;
        }

        /**
         * @param useTargetHostHeader Use the target host header as opposed to the original gateway or upstream host header.
         * 
         * @return builder
         * 
         */
        public Builder useTargetHostHeader(Boolean useTargetHostHeader) {
            return useTargetHostHeader(Output.of(useTargetHostHeader));
        }

        /**
         * @param vhost A comma-delimited list of one or more virtual hosts that map to applications assigned to the enforcement point. A VHOST may be a host name or an IP address. VHOST distinguish between applications that are at the same context root.
         * 
         * @return builder
         * 
         */
        public Builder vhost(Output<String> vhost) {
            $.vhost = vhost;
            return this;
        }

        /**
         * @param vhost A comma-delimited list of one or more virtual hosts that map to applications assigned to the enforcement point. A VHOST may be a host name or an IP address. VHOST distinguish between applications that are at the same context root.
         * 
         * @return builder
         * 
         */
        public Builder vhost(String vhost) {
            return vhost(Output.of(vhost));
        }

        public GetInstanceEnforcementPointArgs build() {
            if ($.caseSensitive == null) {
                throw new MissingRequiredPropertyException("GetInstanceEnforcementPointArgs", "caseSensitive");
            }
            if ($.conditions == null) {
                throw new MissingRequiredPropertyException("GetInstanceEnforcementPointArgs", "conditions");
            }
            if ($.contextRoot == null) {
                throw new MissingRequiredPropertyException("GetInstanceEnforcementPointArgs", "contextRoot");
            }
            if ($.landingPage == null) {
                throw new MissingRequiredPropertyException("GetInstanceEnforcementPointArgs", "landingPage");
            }
            if ($.permissions == null) {
                throw new MissingRequiredPropertyException("GetInstanceEnforcementPointArgs", "permissions");
            }
            if ($.requireSitewideAuthentication == null) {
                throw new MissingRequiredPropertyException("GetInstanceEnforcementPointArgs", "requireSitewideAuthentication");
            }
            if ($.resources == null) {
                throw new MissingRequiredPropertyException("GetInstanceEnforcementPointArgs", "resources");
            }
            if ($.sessionExpiryFixed == null) {
                throw new MissingRequiredPropertyException("GetInstanceEnforcementPointArgs", "sessionExpiryFixed");
            }
            if ($.sessionExpiryInactivity == null) {
                throw new MissingRequiredPropertyException("GetInstanceEnforcementPointArgs", "sessionExpiryInactivity");
            }
            if ($.target == null) {
                throw new MissingRequiredPropertyException("GetInstanceEnforcementPointArgs", "target");
            }
            if ($.token == null) {
                throw new MissingRequiredPropertyException("GetInstanceEnforcementPointArgs", "token");
            }
            if ($.useTargetHostHeader == null) {
                throw new MissingRequiredPropertyException("GetInstanceEnforcementPointArgs", "useTargetHostHeader");
            }
            if ($.vhost == null) {
                throw new MissingRequiredPropertyException("GetInstanceEnforcementPointArgs", "vhost");
            }
            return $;
        }
    }

}
