// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.onelogin.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetUserResult {
    private String comment;
    private String company;
    private Map<String,String> customAttributes;
    private String department;
    private Integer directoryId;
    private String distinguishedName;
    private String email;
    private Integer externalId;
    private String firstname;
    private Integer groupId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String lastname;
    private Integer managerAdId;
    private Integer managerUserId;
    private String memberOf;
    private String phone;
    private String samaccountname;
    private Integer state;
    private Integer status;
    private String title;
    private Integer trustedIdpId;
    private @Nullable String userId;
    private String username;
    private String userprincipalname;

    private GetUserResult() {}
    public String comment() {
        return this.comment;
    }
    public String company() {
        return this.company;
    }
    public Map<String,String> customAttributes() {
        return this.customAttributes;
    }
    public String department() {
        return this.department;
    }
    public Integer directoryId() {
        return this.directoryId;
    }
    public String distinguishedName() {
        return this.distinguishedName;
    }
    public String email() {
        return this.email;
    }
    public Integer externalId() {
        return this.externalId;
    }
    public String firstname() {
        return this.firstname;
    }
    public Integer groupId() {
        return this.groupId;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String lastname() {
        return this.lastname;
    }
    public Integer managerAdId() {
        return this.managerAdId;
    }
    public Integer managerUserId() {
        return this.managerUserId;
    }
    public String memberOf() {
        return this.memberOf;
    }
    public String phone() {
        return this.phone;
    }
    public String samaccountname() {
        return this.samaccountname;
    }
    public Integer state() {
        return this.state;
    }
    public Integer status() {
        return this.status;
    }
    public String title() {
        return this.title;
    }
    public Integer trustedIdpId() {
        return this.trustedIdpId;
    }
    public Optional<String> userId() {
        return Optional.ofNullable(this.userId);
    }
    public String username() {
        return this.username;
    }
    public String userprincipalname() {
        return this.userprincipalname;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUserResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String comment;
        private String company;
        private Map<String,String> customAttributes;
        private String department;
        private Integer directoryId;
        private String distinguishedName;
        private String email;
        private Integer externalId;
        private String firstname;
        private Integer groupId;
        private String id;
        private String lastname;
        private Integer managerAdId;
        private Integer managerUserId;
        private String memberOf;
        private String phone;
        private String samaccountname;
        private Integer state;
        private Integer status;
        private String title;
        private Integer trustedIdpId;
        private @Nullable String userId;
        private String username;
        private String userprincipalname;
        public Builder() {}
        public Builder(GetUserResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.comment = defaults.comment;
    	      this.company = defaults.company;
    	      this.customAttributes = defaults.customAttributes;
    	      this.department = defaults.department;
    	      this.directoryId = defaults.directoryId;
    	      this.distinguishedName = defaults.distinguishedName;
    	      this.email = defaults.email;
    	      this.externalId = defaults.externalId;
    	      this.firstname = defaults.firstname;
    	      this.groupId = defaults.groupId;
    	      this.id = defaults.id;
    	      this.lastname = defaults.lastname;
    	      this.managerAdId = defaults.managerAdId;
    	      this.managerUserId = defaults.managerUserId;
    	      this.memberOf = defaults.memberOf;
    	      this.phone = defaults.phone;
    	      this.samaccountname = defaults.samaccountname;
    	      this.state = defaults.state;
    	      this.status = defaults.status;
    	      this.title = defaults.title;
    	      this.trustedIdpId = defaults.trustedIdpId;
    	      this.userId = defaults.userId;
    	      this.username = defaults.username;
    	      this.userprincipalname = defaults.userprincipalname;
        }

        @CustomType.Setter
        public Builder comment(String comment) {
            if (comment == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "comment");
            }
            this.comment = comment;
            return this;
        }
        @CustomType.Setter
        public Builder company(String company) {
            if (company == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "company");
            }
            this.company = company;
            return this;
        }
        @CustomType.Setter
        public Builder customAttributes(Map<String,String> customAttributes) {
            if (customAttributes == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "customAttributes");
            }
            this.customAttributes = customAttributes;
            return this;
        }
        @CustomType.Setter
        public Builder department(String department) {
            if (department == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "department");
            }
            this.department = department;
            return this;
        }
        @CustomType.Setter
        public Builder directoryId(Integer directoryId) {
            if (directoryId == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "directoryId");
            }
            this.directoryId = directoryId;
            return this;
        }
        @CustomType.Setter
        public Builder distinguishedName(String distinguishedName) {
            if (distinguishedName == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "distinguishedName");
            }
            this.distinguishedName = distinguishedName;
            return this;
        }
        @CustomType.Setter
        public Builder email(String email) {
            if (email == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "email");
            }
            this.email = email;
            return this;
        }
        @CustomType.Setter
        public Builder externalId(Integer externalId) {
            if (externalId == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "externalId");
            }
            this.externalId = externalId;
            return this;
        }
        @CustomType.Setter
        public Builder firstname(String firstname) {
            if (firstname == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "firstname");
            }
            this.firstname = firstname;
            return this;
        }
        @CustomType.Setter
        public Builder groupId(Integer groupId) {
            if (groupId == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "groupId");
            }
            this.groupId = groupId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lastname(String lastname) {
            if (lastname == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "lastname");
            }
            this.lastname = lastname;
            return this;
        }
        @CustomType.Setter
        public Builder managerAdId(Integer managerAdId) {
            if (managerAdId == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "managerAdId");
            }
            this.managerAdId = managerAdId;
            return this;
        }
        @CustomType.Setter
        public Builder managerUserId(Integer managerUserId) {
            if (managerUserId == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "managerUserId");
            }
            this.managerUserId = managerUserId;
            return this;
        }
        @CustomType.Setter
        public Builder memberOf(String memberOf) {
            if (memberOf == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "memberOf");
            }
            this.memberOf = memberOf;
            return this;
        }
        @CustomType.Setter
        public Builder phone(String phone) {
            if (phone == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "phone");
            }
            this.phone = phone;
            return this;
        }
        @CustomType.Setter
        public Builder samaccountname(String samaccountname) {
            if (samaccountname == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "samaccountname");
            }
            this.samaccountname = samaccountname;
            return this;
        }
        @CustomType.Setter
        public Builder state(Integer state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder status(Integer status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder title(String title) {
            if (title == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "title");
            }
            this.title = title;
            return this;
        }
        @CustomType.Setter
        public Builder trustedIdpId(Integer trustedIdpId) {
            if (trustedIdpId == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "trustedIdpId");
            }
            this.trustedIdpId = trustedIdpId;
            return this;
        }
        @CustomType.Setter
        public Builder userId(@Nullable String userId) {

            this.userId = userId;
            return this;
        }
        @CustomType.Setter
        public Builder username(String username) {
            if (username == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "username");
            }
            this.username = username;
            return this;
        }
        @CustomType.Setter
        public Builder userprincipalname(String userprincipalname) {
            if (userprincipalname == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "userprincipalname");
            }
            this.userprincipalname = userprincipalname;
            return this;
        }
        public GetUserResult build() {
            final var _resultValue = new GetUserResult();
            _resultValue.comment = comment;
            _resultValue.company = company;
            _resultValue.customAttributes = customAttributes;
            _resultValue.department = department;
            _resultValue.directoryId = directoryId;
            _resultValue.distinguishedName = distinguishedName;
            _resultValue.email = email;
            _resultValue.externalId = externalId;
            _resultValue.firstname = firstname;
            _resultValue.groupId = groupId;
            _resultValue.id = id;
            _resultValue.lastname = lastname;
            _resultValue.managerAdId = managerAdId;
            _resultValue.managerUserId = managerUserId;
            _resultValue.memberOf = memberOf;
            _resultValue.phone = phone;
            _resultValue.samaccountname = samaccountname;
            _resultValue.state = state;
            _resultValue.status = status;
            _resultValue.title = title;
            _resultValue.trustedIdpId = trustedIdpId;
            _resultValue.userId = userId;
            _resultValue.username = username;
            _resultValue.userprincipalname = userprincipalname;
            return _resultValue;
        }
    }
}
