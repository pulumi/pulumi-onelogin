// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package onelogin

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manage Privilege resources.
//
// This resource allows you to create and configure Privilege.
//
// ## Example Usage
// ### Strict Ordering
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-onelogin/sdk/go/onelogin"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := onelogin.NewPrivilege(ctx, "superAdmin", &onelogin.PrivilegeArgs{
// 			Description: pulumi.String("description"),
// 			Privileges: PrivilegePrivilegeArray{
// 				&PrivilegePrivilegeArgs{
// 					Statements: PrivilegePrivilegeStatementArray{
// 						&PrivilegePrivilegeStatementArgs{
// 							Action: []string{
// 								"apps:List",
// 							},
// 							Effect: pulumi.String("Allow"),
// 							Scope: []string{
// 								"*",
// 							},
// 						},
// 						&PrivilegePrivilegeStatementArgs{
// 							Action: []string{
// 								"users:List",
// 								"users:Update",
// 							},
// 							Effect: pulumi.String("Allow"),
// 							Scope: []string{
// 								"users/123",
// 								"users/345",
// 							},
// 						},
// 					},
// 				},
// 			},
// 			RoleIds: pulumi.IntArray{
// 				pulumi.Int(987),
// 				pulumi.Int(654),
// 			},
// 			UserIds: pulumi.IntArray{
// 				pulumi.Int(123),
// 				pulumi.Int(345),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// A privilege can be imported using the OneLogin Privilege ID.
//
// ```sh
//  $ pulumi import onelogin:index/privilege:Privilege super_admin <privilege id>
// ```
type Privilege struct {
	pulumi.CustomResourceState

	// Description for the Privilege.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the privilege.
	Name pulumi.StringOutput `pulumi:"name"`
	// A list of statements that describe what the privilege grants access to.
	Privileges PrivilegePrivilegeArrayOutput `pulumi:"privileges"`
	// A list of role IDs for whom the role applies.
	RoleIds pulumi.IntArrayOutput `pulumi:"roleIds"`
	// A list of user IDs for whom the privilege applies.
	UserIds pulumi.IntArrayOutput `pulumi:"userIds"`
}

// NewPrivilege registers a new resource with the given unique name, arguments, and options.
func NewPrivilege(ctx *pulumi.Context,
	name string, args *PrivilegeArgs, opts ...pulumi.ResourceOption) (*Privilege, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Privileges == nil {
		return nil, errors.New("invalid value for required argument 'Privileges'")
	}
	var resource Privilege
	err := ctx.RegisterResource("onelogin:index/privilege:Privilege", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPrivilege gets an existing Privilege resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrivilege(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PrivilegeState, opts ...pulumi.ResourceOption) (*Privilege, error) {
	var resource Privilege
	err := ctx.ReadResource("onelogin:index/privilege:Privilege", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Privilege resources.
type privilegeState struct {
	// Description for the Privilege.
	Description *string `pulumi:"description"`
	// The name of the privilege.
	Name *string `pulumi:"name"`
	// A list of statements that describe what the privilege grants access to.
	Privileges []PrivilegePrivilege `pulumi:"privileges"`
	// A list of role IDs for whom the role applies.
	RoleIds []int `pulumi:"roleIds"`
	// A list of user IDs for whom the privilege applies.
	UserIds []int `pulumi:"userIds"`
}

type PrivilegeState struct {
	// Description for the Privilege.
	Description pulumi.StringPtrInput
	// The name of the privilege.
	Name pulumi.StringPtrInput
	// A list of statements that describe what the privilege grants access to.
	Privileges PrivilegePrivilegeArrayInput
	// A list of role IDs for whom the role applies.
	RoleIds pulumi.IntArrayInput
	// A list of user IDs for whom the privilege applies.
	UserIds pulumi.IntArrayInput
}

func (PrivilegeState) ElementType() reflect.Type {
	return reflect.TypeOf((*privilegeState)(nil)).Elem()
}

type privilegeArgs struct {
	// Description for the Privilege.
	Description *string `pulumi:"description"`
	// The name of the privilege.
	Name *string `pulumi:"name"`
	// A list of statements that describe what the privilege grants access to.
	Privileges []PrivilegePrivilege `pulumi:"privileges"`
	// A list of role IDs for whom the role applies.
	RoleIds []int `pulumi:"roleIds"`
	// A list of user IDs for whom the privilege applies.
	UserIds []int `pulumi:"userIds"`
}

// The set of arguments for constructing a Privilege resource.
type PrivilegeArgs struct {
	// Description for the Privilege.
	Description pulumi.StringPtrInput
	// The name of the privilege.
	Name pulumi.StringPtrInput
	// A list of statements that describe what the privilege grants access to.
	Privileges PrivilegePrivilegeArrayInput
	// A list of role IDs for whom the role applies.
	RoleIds pulumi.IntArrayInput
	// A list of user IDs for whom the privilege applies.
	UserIds pulumi.IntArrayInput
}

func (PrivilegeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*privilegeArgs)(nil)).Elem()
}

type PrivilegeInput interface {
	pulumi.Input

	ToPrivilegeOutput() PrivilegeOutput
	ToPrivilegeOutputWithContext(ctx context.Context) PrivilegeOutput
}

func (*Privilege) ElementType() reflect.Type {
	return reflect.TypeOf((**Privilege)(nil)).Elem()
}

func (i *Privilege) ToPrivilegeOutput() PrivilegeOutput {
	return i.ToPrivilegeOutputWithContext(context.Background())
}

func (i *Privilege) ToPrivilegeOutputWithContext(ctx context.Context) PrivilegeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivilegeOutput)
}

// PrivilegeArrayInput is an input type that accepts PrivilegeArray and PrivilegeArrayOutput values.
// You can construct a concrete instance of `PrivilegeArrayInput` via:
//
//          PrivilegeArray{ PrivilegeArgs{...} }
type PrivilegeArrayInput interface {
	pulumi.Input

	ToPrivilegeArrayOutput() PrivilegeArrayOutput
	ToPrivilegeArrayOutputWithContext(context.Context) PrivilegeArrayOutput
}

type PrivilegeArray []PrivilegeInput

func (PrivilegeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Privilege)(nil)).Elem()
}

func (i PrivilegeArray) ToPrivilegeArrayOutput() PrivilegeArrayOutput {
	return i.ToPrivilegeArrayOutputWithContext(context.Background())
}

func (i PrivilegeArray) ToPrivilegeArrayOutputWithContext(ctx context.Context) PrivilegeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivilegeArrayOutput)
}

// PrivilegeMapInput is an input type that accepts PrivilegeMap and PrivilegeMapOutput values.
// You can construct a concrete instance of `PrivilegeMapInput` via:
//
//          PrivilegeMap{ "key": PrivilegeArgs{...} }
type PrivilegeMapInput interface {
	pulumi.Input

	ToPrivilegeMapOutput() PrivilegeMapOutput
	ToPrivilegeMapOutputWithContext(context.Context) PrivilegeMapOutput
}

type PrivilegeMap map[string]PrivilegeInput

func (PrivilegeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Privilege)(nil)).Elem()
}

func (i PrivilegeMap) ToPrivilegeMapOutput() PrivilegeMapOutput {
	return i.ToPrivilegeMapOutputWithContext(context.Background())
}

func (i PrivilegeMap) ToPrivilegeMapOutputWithContext(ctx context.Context) PrivilegeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivilegeMapOutput)
}

type PrivilegeOutput struct{ *pulumi.OutputState }

func (PrivilegeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Privilege)(nil)).Elem()
}

func (o PrivilegeOutput) ToPrivilegeOutput() PrivilegeOutput {
	return o
}

func (o PrivilegeOutput) ToPrivilegeOutputWithContext(ctx context.Context) PrivilegeOutput {
	return o
}

type PrivilegeArrayOutput struct{ *pulumi.OutputState }

func (PrivilegeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Privilege)(nil)).Elem()
}

func (o PrivilegeArrayOutput) ToPrivilegeArrayOutput() PrivilegeArrayOutput {
	return o
}

func (o PrivilegeArrayOutput) ToPrivilegeArrayOutputWithContext(ctx context.Context) PrivilegeArrayOutput {
	return o
}

func (o PrivilegeArrayOutput) Index(i pulumi.IntInput) PrivilegeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Privilege {
		return vs[0].([]*Privilege)[vs[1].(int)]
	}).(PrivilegeOutput)
}

type PrivilegeMapOutput struct{ *pulumi.OutputState }

func (PrivilegeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Privilege)(nil)).Elem()
}

func (o PrivilegeMapOutput) ToPrivilegeMapOutput() PrivilegeMapOutput {
	return o
}

func (o PrivilegeMapOutput) ToPrivilegeMapOutputWithContext(ctx context.Context) PrivilegeMapOutput {
	return o
}

func (o PrivilegeMapOutput) MapIndex(k pulumi.StringInput) PrivilegeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Privilege {
		return vs[0].(map[string]*Privilege)[vs[1].(string)]
	}).(PrivilegeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PrivilegeInput)(nil)).Elem(), &Privilege{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivilegeArrayInput)(nil)).Elem(), PrivilegeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivilegeMapInput)(nil)).Elem(), PrivilegeMap{})
	pulumi.RegisterOutputType(PrivilegeOutput{})
	pulumi.RegisterOutputType(PrivilegeArrayOutput{})
	pulumi.RegisterOutputType(PrivilegeMapOutput{})
}
