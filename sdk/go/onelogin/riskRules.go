// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package onelogin

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-onelogin/sdk/go/onelogin/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type RiskRules struct {
	pulumi.CustomResourceState

	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A list of IP addresses or country codes or names to evaluate against each event.
	Filters pulumi.StringArrayOutput `pulumi:"filters"`
	// The name of this rule
	Name pulumi.StringOutput `pulumi:"name"`
	// Used for targeting custom rules based on a group of people, customers, accounts, or even a single user.
	Source RiskRulesSourcePtrOutput `pulumi:"source"`
	// The target parameter that will be used when evaluating the rule against an incoming event.
	Target pulumi.StringPtrOutput `pulumi:"target"`
	// The type parameter specifies the type of rule that will be created.
	Type pulumi.StringPtrOutput `pulumi:"type"`
}

// NewRiskRules registers a new resource with the given unique name, arguments, and options.
func NewRiskRules(ctx *pulumi.Context,
	name string, args *RiskRulesArgs, opts ...pulumi.ResourceOption) (*RiskRules, error) {
	if args == nil {
		args = &RiskRulesArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RiskRules
	err := ctx.RegisterResource("onelogin:index/riskRules:RiskRules", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRiskRules gets an existing RiskRules resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRiskRules(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RiskRulesState, opts ...pulumi.ResourceOption) (*RiskRules, error) {
	var resource RiskRules
	err := ctx.ReadResource("onelogin:index/riskRules:RiskRules", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RiskRules resources.
type riskRulesState struct {
	Description *string `pulumi:"description"`
	// A list of IP addresses or country codes or names to evaluate against each event.
	Filters []string `pulumi:"filters"`
	// The name of this rule
	Name *string `pulumi:"name"`
	// Used for targeting custom rules based on a group of people, customers, accounts, or even a single user.
	Source *RiskRulesSource `pulumi:"source"`
	// The target parameter that will be used when evaluating the rule against an incoming event.
	Target *string `pulumi:"target"`
	// The type parameter specifies the type of rule that will be created.
	Type *string `pulumi:"type"`
}

type RiskRulesState struct {
	Description pulumi.StringPtrInput
	// A list of IP addresses or country codes or names to evaluate against each event.
	Filters pulumi.StringArrayInput
	// The name of this rule
	Name pulumi.StringPtrInput
	// Used for targeting custom rules based on a group of people, customers, accounts, or even a single user.
	Source RiskRulesSourcePtrInput
	// The target parameter that will be used when evaluating the rule against an incoming event.
	Target pulumi.StringPtrInput
	// The type parameter specifies the type of rule that will be created.
	Type pulumi.StringPtrInput
}

func (RiskRulesState) ElementType() reflect.Type {
	return reflect.TypeOf((*riskRulesState)(nil)).Elem()
}

type riskRulesArgs struct {
	Description *string `pulumi:"description"`
	// A list of IP addresses or country codes or names to evaluate against each event.
	Filters []string `pulumi:"filters"`
	// The name of this rule
	Name *string `pulumi:"name"`
	// Used for targeting custom rules based on a group of people, customers, accounts, or even a single user.
	Source *RiskRulesSource `pulumi:"source"`
	// The target parameter that will be used when evaluating the rule against an incoming event.
	Target *string `pulumi:"target"`
	// The type parameter specifies the type of rule that will be created.
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a RiskRules resource.
type RiskRulesArgs struct {
	Description pulumi.StringPtrInput
	// A list of IP addresses or country codes or names to evaluate against each event.
	Filters pulumi.StringArrayInput
	// The name of this rule
	Name pulumi.StringPtrInput
	// Used for targeting custom rules based on a group of people, customers, accounts, or even a single user.
	Source RiskRulesSourcePtrInput
	// The target parameter that will be used when evaluating the rule against an incoming event.
	Target pulumi.StringPtrInput
	// The type parameter specifies the type of rule that will be created.
	Type pulumi.StringPtrInput
}

func (RiskRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*riskRulesArgs)(nil)).Elem()
}

type RiskRulesInput interface {
	pulumi.Input

	ToRiskRulesOutput() RiskRulesOutput
	ToRiskRulesOutputWithContext(ctx context.Context) RiskRulesOutput
}

func (*RiskRules) ElementType() reflect.Type {
	return reflect.TypeOf((**RiskRules)(nil)).Elem()
}

func (i *RiskRules) ToRiskRulesOutput() RiskRulesOutput {
	return i.ToRiskRulesOutputWithContext(context.Background())
}

func (i *RiskRules) ToRiskRulesOutputWithContext(ctx context.Context) RiskRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RiskRulesOutput)
}

func (i *RiskRules) ToOutput(ctx context.Context) pulumix.Output[*RiskRules] {
	return pulumix.Output[*RiskRules]{
		OutputState: i.ToRiskRulesOutputWithContext(ctx).OutputState,
	}
}

// RiskRulesArrayInput is an input type that accepts RiskRulesArray and RiskRulesArrayOutput values.
// You can construct a concrete instance of `RiskRulesArrayInput` via:
//
//	RiskRulesArray{ RiskRulesArgs{...} }
type RiskRulesArrayInput interface {
	pulumi.Input

	ToRiskRulesArrayOutput() RiskRulesArrayOutput
	ToRiskRulesArrayOutputWithContext(context.Context) RiskRulesArrayOutput
}

type RiskRulesArray []RiskRulesInput

func (RiskRulesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RiskRules)(nil)).Elem()
}

func (i RiskRulesArray) ToRiskRulesArrayOutput() RiskRulesArrayOutput {
	return i.ToRiskRulesArrayOutputWithContext(context.Background())
}

func (i RiskRulesArray) ToRiskRulesArrayOutputWithContext(ctx context.Context) RiskRulesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RiskRulesArrayOutput)
}

func (i RiskRulesArray) ToOutput(ctx context.Context) pulumix.Output[[]*RiskRules] {
	return pulumix.Output[[]*RiskRules]{
		OutputState: i.ToRiskRulesArrayOutputWithContext(ctx).OutputState,
	}
}

// RiskRulesMapInput is an input type that accepts RiskRulesMap and RiskRulesMapOutput values.
// You can construct a concrete instance of `RiskRulesMapInput` via:
//
//	RiskRulesMap{ "key": RiskRulesArgs{...} }
type RiskRulesMapInput interface {
	pulumi.Input

	ToRiskRulesMapOutput() RiskRulesMapOutput
	ToRiskRulesMapOutputWithContext(context.Context) RiskRulesMapOutput
}

type RiskRulesMap map[string]RiskRulesInput

func (RiskRulesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RiskRules)(nil)).Elem()
}

func (i RiskRulesMap) ToRiskRulesMapOutput() RiskRulesMapOutput {
	return i.ToRiskRulesMapOutputWithContext(context.Background())
}

func (i RiskRulesMap) ToRiskRulesMapOutputWithContext(ctx context.Context) RiskRulesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RiskRulesMapOutput)
}

func (i RiskRulesMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*RiskRules] {
	return pulumix.Output[map[string]*RiskRules]{
		OutputState: i.ToRiskRulesMapOutputWithContext(ctx).OutputState,
	}
}

type RiskRulesOutput struct{ *pulumi.OutputState }

func (RiskRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RiskRules)(nil)).Elem()
}

func (o RiskRulesOutput) ToRiskRulesOutput() RiskRulesOutput {
	return o
}

func (o RiskRulesOutput) ToRiskRulesOutputWithContext(ctx context.Context) RiskRulesOutput {
	return o
}

func (o RiskRulesOutput) ToOutput(ctx context.Context) pulumix.Output[*RiskRules] {
	return pulumix.Output[*RiskRules]{
		OutputState: o.OutputState,
	}
}

func (o RiskRulesOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RiskRules) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A list of IP addresses or country codes or names to evaluate against each event.
func (o RiskRulesOutput) Filters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RiskRules) pulumi.StringArrayOutput { return v.Filters }).(pulumi.StringArrayOutput)
}

// The name of this rule
func (o RiskRulesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RiskRules) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Used for targeting custom rules based on a group of people, customers, accounts, or even a single user.
func (o RiskRulesOutput) Source() RiskRulesSourcePtrOutput {
	return o.ApplyT(func(v *RiskRules) RiskRulesSourcePtrOutput { return v.Source }).(RiskRulesSourcePtrOutput)
}

// The target parameter that will be used when evaluating the rule against an incoming event.
func (o RiskRulesOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RiskRules) pulumi.StringPtrOutput { return v.Target }).(pulumi.StringPtrOutput)
}

// The type parameter specifies the type of rule that will be created.
func (o RiskRulesOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RiskRules) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

type RiskRulesArrayOutput struct{ *pulumi.OutputState }

func (RiskRulesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RiskRules)(nil)).Elem()
}

func (o RiskRulesArrayOutput) ToRiskRulesArrayOutput() RiskRulesArrayOutput {
	return o
}

func (o RiskRulesArrayOutput) ToRiskRulesArrayOutputWithContext(ctx context.Context) RiskRulesArrayOutput {
	return o
}

func (o RiskRulesArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*RiskRules] {
	return pulumix.Output[[]*RiskRules]{
		OutputState: o.OutputState,
	}
}

func (o RiskRulesArrayOutput) Index(i pulumi.IntInput) RiskRulesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RiskRules {
		return vs[0].([]*RiskRules)[vs[1].(int)]
	}).(RiskRulesOutput)
}

type RiskRulesMapOutput struct{ *pulumi.OutputState }

func (RiskRulesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RiskRules)(nil)).Elem()
}

func (o RiskRulesMapOutput) ToRiskRulesMapOutput() RiskRulesMapOutput {
	return o
}

func (o RiskRulesMapOutput) ToRiskRulesMapOutputWithContext(ctx context.Context) RiskRulesMapOutput {
	return o
}

func (o RiskRulesMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*RiskRules] {
	return pulumix.Output[map[string]*RiskRules]{
		OutputState: o.OutputState,
	}
}

func (o RiskRulesMapOutput) MapIndex(k pulumi.StringInput) RiskRulesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RiskRules {
		return vs[0].(map[string]*RiskRules)[vs[1].(string)]
	}).(RiskRulesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RiskRulesInput)(nil)).Elem(), &RiskRules{})
	pulumi.RegisterInputType(reflect.TypeOf((*RiskRulesArrayInput)(nil)).Elem(), RiskRulesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RiskRulesMapInput)(nil)).Elem(), RiskRulesMap{})
	pulumi.RegisterOutputType(RiskRulesOutput{})
	pulumi.RegisterOutputType(RiskRulesArrayOutput{})
	pulumi.RegisterOutputType(RiskRulesMapOutput{})
}
