// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package onelogin

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a Basic Application.
//
// This resource allows you to create and configure a Basic (non-SAML non-OIDC) Application.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-onelogin/sdk/go/onelogin"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := onelogin.NewApp(ctx, "myApp", &onelogin.AppArgs{
// 			AllowAssumedSignin: pulumi.Bool(false),
// 			ConnectorId:        pulumi.Int(12345),
// 			Description:        pulumi.String("basic app"),
// 			Notes:              pulumi.String("basic app"),
// 			Parameters: AppParameterArray{
// 				&AppParameterArgs{
// 					AttributesTransformations: pulumi.String(""),
// 					DefaultValues:             pulumi.String(""),
// 					IncludeInSamlAssertion:    pulumi.Bool(false),
// 					Label:                     pulumi.String("username"),
// 					ParamKeyName:              pulumi.String("user name"),
// 					ProvisionedEntitlements:   pulumi.Bool(false),
// 					SafeEntitlementsEnabled:   pulumi.Bool(false),
// 					SkipIfBlank:               pulumi.Bool(false),
// 					UserAttributeMacros:       pulumi.String(""),
// 					UserAttributeMappings:     pulumi.String(""),
// 					Values:                    pulumi.String(""),
// 				},
// 			},
// 			Provisioning: pulumi.BoolMap{
// 				"enabled": pulumi.Bool(false),
// 			},
// 			Visible: pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// An App can be imported via the OneLogin App ID.
//
// ```sh
//  $ pulumi import onelogin:index/app:App my_app <app id>
// ```
type App struct {
	pulumi.CustomResourceState

	// Enable sign in when user has been assumed by the account owner. Defaults to `false`.
	AllowAssumedSignin pulumi.BoolPtrOutput `pulumi:"allowAssumedSignin"`
	// The apps auth method. Refer to the [OneLogin Apps Documentation](https://developers.onelogin.com/api-docs/2/apps/app-resource) for a comprehensive list of available auth methods.
	AuthMethod pulumi.IntOutput    `pulumi:"authMethod"`
	BrandId    pulumi.IntPtrOutput `pulumi:"brandId"`
	// The ID for the app connector, dictates the type of app (e.g. AWS Multi-Role App).
	ConnectorId pulumi.IntOutput `pulumi:"connectorId"`
	// Timestamp for app's creation.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// App description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The url for the app's icon.
	IconUrl pulumi.StringOutput `pulumi:"iconUrl"`
	// The app's name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Notes about the app.
	Notes pulumi.StringPtrOutput `pulumi:"notes"`
	// a list of custom parameters for this app.
	Parameters AppParameterArrayOutput `pulumi:"parameters"`
	// The security policy assigned to the app.
	PolicyId pulumi.IntOutput `pulumi:"policyId"`
	// Settings regarding the app's provisioning ability.
	Provisioning pulumi.BoolMapOutput `pulumi:"provisioning"`
	// The tab in which to display in OneLogin portal.
	TabId pulumi.IntOutput `pulumi:"tabId"`
	// Timestamp for app's last update.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// Determine if app should be visible in OneLogin portal. Defaults to `true`.
	Visible pulumi.BoolPtrOutput `pulumi:"visible"`
}

// NewApp registers a new resource with the given unique name, arguments, and options.
func NewApp(ctx *pulumi.Context,
	name string, args *AppArgs, opts ...pulumi.ResourceOption) (*App, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectorId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectorId'")
	}
	var resource App
	err := ctx.RegisterResource("onelogin:index/app:App", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApp gets an existing App resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppState, opts ...pulumi.ResourceOption) (*App, error) {
	var resource App
	err := ctx.ReadResource("onelogin:index/app:App", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering App resources.
type appState struct {
	// Enable sign in when user has been assumed by the account owner. Defaults to `false`.
	AllowAssumedSignin *bool `pulumi:"allowAssumedSignin"`
	// The apps auth method. Refer to the [OneLogin Apps Documentation](https://developers.onelogin.com/api-docs/2/apps/app-resource) for a comprehensive list of available auth methods.
	AuthMethod *int `pulumi:"authMethod"`
	BrandId    *int `pulumi:"brandId"`
	// The ID for the app connector, dictates the type of app (e.g. AWS Multi-Role App).
	ConnectorId *int `pulumi:"connectorId"`
	// Timestamp for app's creation.
	CreatedAt *string `pulumi:"createdAt"`
	// App description.
	Description *string `pulumi:"description"`
	// The url for the app's icon.
	IconUrl *string `pulumi:"iconUrl"`
	// The app's name.
	Name *string `pulumi:"name"`
	// Notes about the app.
	Notes *string `pulumi:"notes"`
	// a list of custom parameters for this app.
	Parameters []AppParameter `pulumi:"parameters"`
	// The security policy assigned to the app.
	PolicyId *int `pulumi:"policyId"`
	// Settings regarding the app's provisioning ability.
	Provisioning map[string]bool `pulumi:"provisioning"`
	// The tab in which to display in OneLogin portal.
	TabId *int `pulumi:"tabId"`
	// Timestamp for app's last update.
	UpdatedAt *string `pulumi:"updatedAt"`
	// Determine if app should be visible in OneLogin portal. Defaults to `true`.
	Visible *bool `pulumi:"visible"`
}

type AppState struct {
	// Enable sign in when user has been assumed by the account owner. Defaults to `false`.
	AllowAssumedSignin pulumi.BoolPtrInput
	// The apps auth method. Refer to the [OneLogin Apps Documentation](https://developers.onelogin.com/api-docs/2/apps/app-resource) for a comprehensive list of available auth methods.
	AuthMethod pulumi.IntPtrInput
	BrandId    pulumi.IntPtrInput
	// The ID for the app connector, dictates the type of app (e.g. AWS Multi-Role App).
	ConnectorId pulumi.IntPtrInput
	// Timestamp for app's creation.
	CreatedAt pulumi.StringPtrInput
	// App description.
	Description pulumi.StringPtrInput
	// The url for the app's icon.
	IconUrl pulumi.StringPtrInput
	// The app's name.
	Name pulumi.StringPtrInput
	// Notes about the app.
	Notes pulumi.StringPtrInput
	// a list of custom parameters for this app.
	Parameters AppParameterArrayInput
	// The security policy assigned to the app.
	PolicyId pulumi.IntPtrInput
	// Settings regarding the app's provisioning ability.
	Provisioning pulumi.BoolMapInput
	// The tab in which to display in OneLogin portal.
	TabId pulumi.IntPtrInput
	// Timestamp for app's last update.
	UpdatedAt pulumi.StringPtrInput
	// Determine if app should be visible in OneLogin portal. Defaults to `true`.
	Visible pulumi.BoolPtrInput
}

func (AppState) ElementType() reflect.Type {
	return reflect.TypeOf((*appState)(nil)).Elem()
}

type appArgs struct {
	// Enable sign in when user has been assumed by the account owner. Defaults to `false`.
	AllowAssumedSignin *bool `pulumi:"allowAssumedSignin"`
	BrandId            *int  `pulumi:"brandId"`
	// The ID for the app connector, dictates the type of app (e.g. AWS Multi-Role App).
	ConnectorId int `pulumi:"connectorId"`
	// App description.
	Description *string `pulumi:"description"`
	// The app's name.
	Name *string `pulumi:"name"`
	// Notes about the app.
	Notes *string `pulumi:"notes"`
	// a list of custom parameters for this app.
	Parameters []AppParameter `pulumi:"parameters"`
	// Settings regarding the app's provisioning ability.
	Provisioning map[string]bool `pulumi:"provisioning"`
	// Determine if app should be visible in OneLogin portal. Defaults to `true`.
	Visible *bool `pulumi:"visible"`
}

// The set of arguments for constructing a App resource.
type AppArgs struct {
	// Enable sign in when user has been assumed by the account owner. Defaults to `false`.
	AllowAssumedSignin pulumi.BoolPtrInput
	BrandId            pulumi.IntPtrInput
	// The ID for the app connector, dictates the type of app (e.g. AWS Multi-Role App).
	ConnectorId pulumi.IntInput
	// App description.
	Description pulumi.StringPtrInput
	// The app's name.
	Name pulumi.StringPtrInput
	// Notes about the app.
	Notes pulumi.StringPtrInput
	// a list of custom parameters for this app.
	Parameters AppParameterArrayInput
	// Settings regarding the app's provisioning ability.
	Provisioning pulumi.BoolMapInput
	// Determine if app should be visible in OneLogin portal. Defaults to `true`.
	Visible pulumi.BoolPtrInput
}

func (AppArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appArgs)(nil)).Elem()
}

type AppInput interface {
	pulumi.Input

	ToAppOutput() AppOutput
	ToAppOutputWithContext(ctx context.Context) AppOutput
}

func (*App) ElementType() reflect.Type {
	return reflect.TypeOf((**App)(nil)).Elem()
}

func (i *App) ToAppOutput() AppOutput {
	return i.ToAppOutputWithContext(context.Background())
}

func (i *App) ToAppOutputWithContext(ctx context.Context) AppOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppOutput)
}

// AppArrayInput is an input type that accepts AppArray and AppArrayOutput values.
// You can construct a concrete instance of `AppArrayInput` via:
//
//          AppArray{ AppArgs{...} }
type AppArrayInput interface {
	pulumi.Input

	ToAppArrayOutput() AppArrayOutput
	ToAppArrayOutputWithContext(context.Context) AppArrayOutput
}

type AppArray []AppInput

func (AppArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*App)(nil)).Elem()
}

func (i AppArray) ToAppArrayOutput() AppArrayOutput {
	return i.ToAppArrayOutputWithContext(context.Background())
}

func (i AppArray) ToAppArrayOutputWithContext(ctx context.Context) AppArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppArrayOutput)
}

// AppMapInput is an input type that accepts AppMap and AppMapOutput values.
// You can construct a concrete instance of `AppMapInput` via:
//
//          AppMap{ "key": AppArgs{...} }
type AppMapInput interface {
	pulumi.Input

	ToAppMapOutput() AppMapOutput
	ToAppMapOutputWithContext(context.Context) AppMapOutput
}

type AppMap map[string]AppInput

func (AppMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*App)(nil)).Elem()
}

func (i AppMap) ToAppMapOutput() AppMapOutput {
	return i.ToAppMapOutputWithContext(context.Background())
}

func (i AppMap) ToAppMapOutputWithContext(ctx context.Context) AppMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppMapOutput)
}

type AppOutput struct{ *pulumi.OutputState }

func (AppOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**App)(nil)).Elem()
}

func (o AppOutput) ToAppOutput() AppOutput {
	return o
}

func (o AppOutput) ToAppOutputWithContext(ctx context.Context) AppOutput {
	return o
}

type AppArrayOutput struct{ *pulumi.OutputState }

func (AppArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*App)(nil)).Elem()
}

func (o AppArrayOutput) ToAppArrayOutput() AppArrayOutput {
	return o
}

func (o AppArrayOutput) ToAppArrayOutputWithContext(ctx context.Context) AppArrayOutput {
	return o
}

func (o AppArrayOutput) Index(i pulumi.IntInput) AppOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *App {
		return vs[0].([]*App)[vs[1].(int)]
	}).(AppOutput)
}

type AppMapOutput struct{ *pulumi.OutputState }

func (AppMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*App)(nil)).Elem()
}

func (o AppMapOutput) ToAppMapOutput() AppMapOutput {
	return o
}

func (o AppMapOutput) ToAppMapOutputWithContext(ctx context.Context) AppMapOutput {
	return o
}

func (o AppMapOutput) MapIndex(k pulumi.StringInput) AppOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *App {
		return vs[0].(map[string]*App)[vs[1].(string)]
	}).(AppOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppInput)(nil)).Elem(), &App{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppArrayInput)(nil)).Elem(), AppArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppMapInput)(nil)).Elem(), AppMap{})
	pulumi.RegisterOutputType(AppOutput{})
	pulumi.RegisterOutputType(AppArrayOutput{})
	pulumi.RegisterOutputType(AppMapOutput{})
}
