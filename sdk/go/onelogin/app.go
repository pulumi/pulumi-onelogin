// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package onelogin

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type App struct {
	pulumi.CustomResourceState

	// Indicates whether or not administrators can access the app as a user that they have assumed control over.
	AllowAssumedSignin pulumi.BoolPtrOutput `pulumi:"allowAssumedSignin"`
	// An ID indicating the type of app.
	AuthMethod pulumi.IntPtrOutput `pulumi:"authMethod"`
	// The custom login page branding to use for this app. Applies to app initiated logins via OIDC or SAML.
	BrandId pulumi.IntPtrOutput `pulumi:"brandId"`
	// ID of the apps underlying connector.
	ConnectorId pulumi.IntPtrOutput `pulumi:"connectorId"`
	// The date the app was created.
	CreatedAt pulumi.StringPtrOutput `pulumi:"createdAt"`
	// Freeform description of the app.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A link to the apps icon url.
	IconUrl pulumi.StringPtrOutput `pulumi:"iconUrl"`
	// App name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Freeform notes about the app.
	Notes pulumi.StringPtrOutput `pulumi:"notes"`
	// The security policy assigned to the app.
	PolicyId     pulumi.IntPtrOutput      `pulumi:"policyId"`
	Provisioning AppProvisioningPtrOutput `pulumi:"provisioning"`
	// A list of OneLogin Role IDs of the user
	RoleIds pulumi.IntArrayOutput `pulumi:"roleIds"`
	// ID of the OneLogin portal tab that the app is assigned to.
	TabId pulumi.IntPtrOutput `pulumi:"tabId"`
	// The date the app was last updated.
	UpdatedAt pulumi.StringPtrOutput `pulumi:"updatedAt"`
	// Indicates if the app is visible in the OneLogin portal.
	Visible pulumi.BoolPtrOutput `pulumi:"visible"`
}

// NewApp registers a new resource with the given unique name, arguments, and options.
func NewApp(ctx *pulumi.Context,
	name string, args *AppArgs, opts ...pulumi.ResourceOption) (*App, error) {
	if args == nil {
		args = &AppArgs{}
	}

	var resource App
	err := ctx.RegisterResource("onelogin:index/app:App", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApp gets an existing App resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppState, opts ...pulumi.ResourceOption) (*App, error) {
	var resource App
	err := ctx.ReadResource("onelogin:index/app:App", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering App resources.
type appState struct {
	// Indicates whether or not administrators can access the app as a user that they have assumed control over.
	AllowAssumedSignin *bool `pulumi:"allowAssumedSignin"`
	// An ID indicating the type of app.
	AuthMethod *int `pulumi:"authMethod"`
	// The custom login page branding to use for this app. Applies to app initiated logins via OIDC or SAML.
	BrandId *int `pulumi:"brandId"`
	// ID of the apps underlying connector.
	ConnectorId *int `pulumi:"connectorId"`
	// The date the app was created.
	CreatedAt *string `pulumi:"createdAt"`
	// Freeform description of the app.
	Description *string `pulumi:"description"`
	// A link to the apps icon url.
	IconUrl *string `pulumi:"iconUrl"`
	// App name.
	Name *string `pulumi:"name"`
	// Freeform notes about the app.
	Notes *string `pulumi:"notes"`
	// The security policy assigned to the app.
	PolicyId     *int             `pulumi:"policyId"`
	Provisioning *AppProvisioning `pulumi:"provisioning"`
	// A list of OneLogin Role IDs of the user
	RoleIds []int `pulumi:"roleIds"`
	// ID of the OneLogin portal tab that the app is assigned to.
	TabId *int `pulumi:"tabId"`
	// The date the app was last updated.
	UpdatedAt *string `pulumi:"updatedAt"`
	// Indicates if the app is visible in the OneLogin portal.
	Visible *bool `pulumi:"visible"`
}

type AppState struct {
	// Indicates whether or not administrators can access the app as a user that they have assumed control over.
	AllowAssumedSignin pulumi.BoolPtrInput
	// An ID indicating the type of app.
	AuthMethod pulumi.IntPtrInput
	// The custom login page branding to use for this app. Applies to app initiated logins via OIDC or SAML.
	BrandId pulumi.IntPtrInput
	// ID of the apps underlying connector.
	ConnectorId pulumi.IntPtrInput
	// The date the app was created.
	CreatedAt pulumi.StringPtrInput
	// Freeform description of the app.
	Description pulumi.StringPtrInput
	// A link to the apps icon url.
	IconUrl pulumi.StringPtrInput
	// App name.
	Name pulumi.StringPtrInput
	// Freeform notes about the app.
	Notes pulumi.StringPtrInput
	// The security policy assigned to the app.
	PolicyId     pulumi.IntPtrInput
	Provisioning AppProvisioningPtrInput
	// A list of OneLogin Role IDs of the user
	RoleIds pulumi.IntArrayInput
	// ID of the OneLogin portal tab that the app is assigned to.
	TabId pulumi.IntPtrInput
	// The date the app was last updated.
	UpdatedAt pulumi.StringPtrInput
	// Indicates if the app is visible in the OneLogin portal.
	Visible pulumi.BoolPtrInput
}

func (AppState) ElementType() reflect.Type {
	return reflect.TypeOf((*appState)(nil)).Elem()
}

type appArgs struct {
	// Indicates whether or not administrators can access the app as a user that they have assumed control over.
	AllowAssumedSignin *bool `pulumi:"allowAssumedSignin"`
	// An ID indicating the type of app.
	AuthMethod *int `pulumi:"authMethod"`
	// The custom login page branding to use for this app. Applies to app initiated logins via OIDC or SAML.
	BrandId *int `pulumi:"brandId"`
	// ID of the apps underlying connector.
	ConnectorId *int `pulumi:"connectorId"`
	// The date the app was created.
	CreatedAt *string `pulumi:"createdAt"`
	// Freeform description of the app.
	Description *string `pulumi:"description"`
	// A link to the apps icon url.
	IconUrl *string `pulumi:"iconUrl"`
	// App name.
	Name *string `pulumi:"name"`
	// Freeform notes about the app.
	Notes *string `pulumi:"notes"`
	// The security policy assigned to the app.
	PolicyId     *int             `pulumi:"policyId"`
	Provisioning *AppProvisioning `pulumi:"provisioning"`
	// A list of OneLogin Role IDs of the user
	RoleIds []int `pulumi:"roleIds"`
	// ID of the OneLogin portal tab that the app is assigned to.
	TabId *int `pulumi:"tabId"`
	// The date the app was last updated.
	UpdatedAt *string `pulumi:"updatedAt"`
	// Indicates if the app is visible in the OneLogin portal.
	Visible *bool `pulumi:"visible"`
}

// The set of arguments for constructing a App resource.
type AppArgs struct {
	// Indicates whether or not administrators can access the app as a user that they have assumed control over.
	AllowAssumedSignin pulumi.BoolPtrInput
	// An ID indicating the type of app.
	AuthMethod pulumi.IntPtrInput
	// The custom login page branding to use for this app. Applies to app initiated logins via OIDC or SAML.
	BrandId pulumi.IntPtrInput
	// ID of the apps underlying connector.
	ConnectorId pulumi.IntPtrInput
	// The date the app was created.
	CreatedAt pulumi.StringPtrInput
	// Freeform description of the app.
	Description pulumi.StringPtrInput
	// A link to the apps icon url.
	IconUrl pulumi.StringPtrInput
	// App name.
	Name pulumi.StringPtrInput
	// Freeform notes about the app.
	Notes pulumi.StringPtrInput
	// The security policy assigned to the app.
	PolicyId     pulumi.IntPtrInput
	Provisioning AppProvisioningPtrInput
	// A list of OneLogin Role IDs of the user
	RoleIds pulumi.IntArrayInput
	// ID of the OneLogin portal tab that the app is assigned to.
	TabId pulumi.IntPtrInput
	// The date the app was last updated.
	UpdatedAt pulumi.StringPtrInput
	// Indicates if the app is visible in the OneLogin portal.
	Visible pulumi.BoolPtrInput
}

func (AppArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appArgs)(nil)).Elem()
}

type AppInput interface {
	pulumi.Input

	ToAppOutput() AppOutput
	ToAppOutputWithContext(ctx context.Context) AppOutput
}

func (*App) ElementType() reflect.Type {
	return reflect.TypeOf((**App)(nil)).Elem()
}

func (i *App) ToAppOutput() AppOutput {
	return i.ToAppOutputWithContext(context.Background())
}

func (i *App) ToAppOutputWithContext(ctx context.Context) AppOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppOutput)
}

// AppArrayInput is an input type that accepts AppArray and AppArrayOutput values.
// You can construct a concrete instance of `AppArrayInput` via:
//
//	AppArray{ AppArgs{...} }
type AppArrayInput interface {
	pulumi.Input

	ToAppArrayOutput() AppArrayOutput
	ToAppArrayOutputWithContext(context.Context) AppArrayOutput
}

type AppArray []AppInput

func (AppArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*App)(nil)).Elem()
}

func (i AppArray) ToAppArrayOutput() AppArrayOutput {
	return i.ToAppArrayOutputWithContext(context.Background())
}

func (i AppArray) ToAppArrayOutputWithContext(ctx context.Context) AppArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppArrayOutput)
}

// AppMapInput is an input type that accepts AppMap and AppMapOutput values.
// You can construct a concrete instance of `AppMapInput` via:
//
//	AppMap{ "key": AppArgs{...} }
type AppMapInput interface {
	pulumi.Input

	ToAppMapOutput() AppMapOutput
	ToAppMapOutputWithContext(context.Context) AppMapOutput
}

type AppMap map[string]AppInput

func (AppMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*App)(nil)).Elem()
}

func (i AppMap) ToAppMapOutput() AppMapOutput {
	return i.ToAppMapOutputWithContext(context.Background())
}

func (i AppMap) ToAppMapOutputWithContext(ctx context.Context) AppMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppMapOutput)
}

type AppOutput struct{ *pulumi.OutputState }

func (AppOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**App)(nil)).Elem()
}

func (o AppOutput) ToAppOutput() AppOutput {
	return o
}

func (o AppOutput) ToAppOutputWithContext(ctx context.Context) AppOutput {
	return o
}

// Indicates whether or not administrators can access the app as a user that they have assumed control over.
func (o AppOutput) AllowAssumedSignin() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *App) pulumi.BoolPtrOutput { return v.AllowAssumedSignin }).(pulumi.BoolPtrOutput)
}

// An ID indicating the type of app.
func (o AppOutput) AuthMethod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *App) pulumi.IntPtrOutput { return v.AuthMethod }).(pulumi.IntPtrOutput)
}

// The custom login page branding to use for this app. Applies to app initiated logins via OIDC or SAML.
func (o AppOutput) BrandId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *App) pulumi.IntPtrOutput { return v.BrandId }).(pulumi.IntPtrOutput)
}

// ID of the apps underlying connector.
func (o AppOutput) ConnectorId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *App) pulumi.IntPtrOutput { return v.ConnectorId }).(pulumi.IntPtrOutput)
}

// The date the app was created.
func (o AppOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *App) pulumi.StringPtrOutput { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// Freeform description of the app.
func (o AppOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *App) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A link to the apps icon url.
func (o AppOutput) IconUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *App) pulumi.StringPtrOutput { return v.IconUrl }).(pulumi.StringPtrOutput)
}

// App name.
func (o AppOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *App) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Freeform notes about the app.
func (o AppOutput) Notes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *App) pulumi.StringPtrOutput { return v.Notes }).(pulumi.StringPtrOutput)
}

// The security policy assigned to the app.
func (o AppOutput) PolicyId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *App) pulumi.IntPtrOutput { return v.PolicyId }).(pulumi.IntPtrOutput)
}

func (o AppOutput) Provisioning() AppProvisioningPtrOutput {
	return o.ApplyT(func(v *App) AppProvisioningPtrOutput { return v.Provisioning }).(AppProvisioningPtrOutput)
}

// A list of OneLogin Role IDs of the user
func (o AppOutput) RoleIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *App) pulumi.IntArrayOutput { return v.RoleIds }).(pulumi.IntArrayOutput)
}

// ID of the OneLogin portal tab that the app is assigned to.
func (o AppOutput) TabId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *App) pulumi.IntPtrOutput { return v.TabId }).(pulumi.IntPtrOutput)
}

// The date the app was last updated.
func (o AppOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *App) pulumi.StringPtrOutput { return v.UpdatedAt }).(pulumi.StringPtrOutput)
}

// Indicates if the app is visible in the OneLogin portal.
func (o AppOutput) Visible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *App) pulumi.BoolPtrOutput { return v.Visible }).(pulumi.BoolPtrOutput)
}

type AppArrayOutput struct{ *pulumi.OutputState }

func (AppArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*App)(nil)).Elem()
}

func (o AppArrayOutput) ToAppArrayOutput() AppArrayOutput {
	return o
}

func (o AppArrayOutput) ToAppArrayOutputWithContext(ctx context.Context) AppArrayOutput {
	return o
}

func (o AppArrayOutput) Index(i pulumi.IntInput) AppOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *App {
		return vs[0].([]*App)[vs[1].(int)]
	}).(AppOutput)
}

type AppMapOutput struct{ *pulumi.OutputState }

func (AppMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*App)(nil)).Elem()
}

func (o AppMapOutput) ToAppMapOutput() AppMapOutput {
	return o
}

func (o AppMapOutput) ToAppMapOutputWithContext(ctx context.Context) AppMapOutput {
	return o
}

func (o AppMapOutput) MapIndex(k pulumi.StringInput) AppOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *App {
		return vs[0].(map[string]*App)[vs[1].(string)]
	}).(AppOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppInput)(nil)).Elem(), &App{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppArrayInput)(nil)).Elem(), AppArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppMapInput)(nil)).Elem(), AppMap{})
	pulumi.RegisterOutputType(AppOutput{})
	pulumi.RegisterOutputType(AppArrayOutput{})
	pulumi.RegisterOutputType(AppMapOutput{})
}
