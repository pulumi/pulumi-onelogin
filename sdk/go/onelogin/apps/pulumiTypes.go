// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apps

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-onelogin/sdk/go/onelogin/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type RulesAction struct {
	Action     string   `pulumi:"action"`
	Expression *string  `pulumi:"expression"`
	Values     []string `pulumi:"values"`
}

// RulesActionInput is an input type that accepts RulesActionArgs and RulesActionOutput values.
// You can construct a concrete instance of `RulesActionInput` via:
//
//	RulesActionArgs{...}
type RulesActionInput interface {
	pulumi.Input

	ToRulesActionOutput() RulesActionOutput
	ToRulesActionOutputWithContext(context.Context) RulesActionOutput
}

type RulesActionArgs struct {
	Action     pulumi.StringInput      `pulumi:"action"`
	Expression pulumi.StringPtrInput   `pulumi:"expression"`
	Values     pulumi.StringArrayInput `pulumi:"values"`
}

func (RulesActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesAction)(nil)).Elem()
}

func (i RulesActionArgs) ToRulesActionOutput() RulesActionOutput {
	return i.ToRulesActionOutputWithContext(context.Background())
}

func (i RulesActionArgs) ToRulesActionOutputWithContext(ctx context.Context) RulesActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesActionOutput)
}

// RulesActionArrayInput is an input type that accepts RulesActionArray and RulesActionArrayOutput values.
// You can construct a concrete instance of `RulesActionArrayInput` via:
//
//	RulesActionArray{ RulesActionArgs{...} }
type RulesActionArrayInput interface {
	pulumi.Input

	ToRulesActionArrayOutput() RulesActionArrayOutput
	ToRulesActionArrayOutputWithContext(context.Context) RulesActionArrayOutput
}

type RulesActionArray []RulesActionInput

func (RulesActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesAction)(nil)).Elem()
}

func (i RulesActionArray) ToRulesActionArrayOutput() RulesActionArrayOutput {
	return i.ToRulesActionArrayOutputWithContext(context.Background())
}

func (i RulesActionArray) ToRulesActionArrayOutputWithContext(ctx context.Context) RulesActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesActionArrayOutput)
}

type RulesActionOutput struct{ *pulumi.OutputState }

func (RulesActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesAction)(nil)).Elem()
}

func (o RulesActionOutput) ToRulesActionOutput() RulesActionOutput {
	return o
}

func (o RulesActionOutput) ToRulesActionOutputWithContext(ctx context.Context) RulesActionOutput {
	return o
}

func (o RulesActionOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v RulesAction) string { return v.Action }).(pulumi.StringOutput)
}

func (o RulesActionOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RulesAction) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

func (o RulesActionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RulesAction) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type RulesActionArrayOutput struct{ *pulumi.OutputState }

func (RulesActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesAction)(nil)).Elem()
}

func (o RulesActionArrayOutput) ToRulesActionArrayOutput() RulesActionArrayOutput {
	return o
}

func (o RulesActionArrayOutput) ToRulesActionArrayOutputWithContext(ctx context.Context) RulesActionArrayOutput {
	return o
}

func (o RulesActionArrayOutput) Index(i pulumi.IntInput) RulesActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RulesAction {
		return vs[0].([]RulesAction)[vs[1].(int)]
	}).(RulesActionOutput)
}

type RulesCondition struct {
	Operator string `pulumi:"operator"`
	Source   string `pulumi:"source"`
	Value    string `pulumi:"value"`
}

// RulesConditionInput is an input type that accepts RulesConditionArgs and RulesConditionOutput values.
// You can construct a concrete instance of `RulesConditionInput` via:
//
//	RulesConditionArgs{...}
type RulesConditionInput interface {
	pulumi.Input

	ToRulesConditionOutput() RulesConditionOutput
	ToRulesConditionOutputWithContext(context.Context) RulesConditionOutput
}

type RulesConditionArgs struct {
	Operator pulumi.StringInput `pulumi:"operator"`
	Source   pulumi.StringInput `pulumi:"source"`
	Value    pulumi.StringInput `pulumi:"value"`
}

func (RulesConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesCondition)(nil)).Elem()
}

func (i RulesConditionArgs) ToRulesConditionOutput() RulesConditionOutput {
	return i.ToRulesConditionOutputWithContext(context.Background())
}

func (i RulesConditionArgs) ToRulesConditionOutputWithContext(ctx context.Context) RulesConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesConditionOutput)
}

// RulesConditionArrayInput is an input type that accepts RulesConditionArray and RulesConditionArrayOutput values.
// You can construct a concrete instance of `RulesConditionArrayInput` via:
//
//	RulesConditionArray{ RulesConditionArgs{...} }
type RulesConditionArrayInput interface {
	pulumi.Input

	ToRulesConditionArrayOutput() RulesConditionArrayOutput
	ToRulesConditionArrayOutputWithContext(context.Context) RulesConditionArrayOutput
}

type RulesConditionArray []RulesConditionInput

func (RulesConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesCondition)(nil)).Elem()
}

func (i RulesConditionArray) ToRulesConditionArrayOutput() RulesConditionArrayOutput {
	return i.ToRulesConditionArrayOutputWithContext(context.Background())
}

func (i RulesConditionArray) ToRulesConditionArrayOutputWithContext(ctx context.Context) RulesConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesConditionArrayOutput)
}

type RulesConditionOutput struct{ *pulumi.OutputState }

func (RulesConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesCondition)(nil)).Elem()
}

func (o RulesConditionOutput) ToRulesConditionOutput() RulesConditionOutput {
	return o
}

func (o RulesConditionOutput) ToRulesConditionOutputWithContext(ctx context.Context) RulesConditionOutput {
	return o
}

func (o RulesConditionOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v RulesCondition) string { return v.Operator }).(pulumi.StringOutput)
}

func (o RulesConditionOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v RulesCondition) string { return v.Source }).(pulumi.StringOutput)
}

func (o RulesConditionOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v RulesCondition) string { return v.Value }).(pulumi.StringOutput)
}

type RulesConditionArrayOutput struct{ *pulumi.OutputState }

func (RulesConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesCondition)(nil)).Elem()
}

func (o RulesConditionArrayOutput) ToRulesConditionArrayOutput() RulesConditionArrayOutput {
	return o
}

func (o RulesConditionArrayOutput) ToRulesConditionArrayOutputWithContext(ctx context.Context) RulesConditionArrayOutput {
	return o
}

func (o RulesConditionArrayOutput) Index(i pulumi.IntInput) RulesConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RulesCondition {
		return vs[0].([]RulesCondition)[vs[1].(int)]
	}).(RulesConditionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RulesActionInput)(nil)).Elem(), RulesActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesActionArrayInput)(nil)).Elem(), RulesActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesConditionInput)(nil)).Elem(), RulesConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesConditionArrayInput)(nil)).Elem(), RulesConditionArray{})
	pulumi.RegisterOutputType(RulesActionOutput{})
	pulumi.RegisterOutputType(RulesActionArrayOutput{})
	pulumi.RegisterOutputType(RulesConditionOutput{})
	pulumi.RegisterOutputType(RulesConditionArrayOutput{})
}
