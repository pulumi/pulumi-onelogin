// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package onelogin

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-onelogin/sdk/go/onelogin/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type UserMappings struct {
	pulumi.CustomResourceState

	Actions    UserMappingsActionArrayOutput    `pulumi:"actions"`
	Conditions UserMappingsConditionArrayOutput `pulumi:"conditions"`
	Enabled    pulumi.BoolPtrOutput             `pulumi:"enabled"`
	Match      pulumi.StringOutput              `pulumi:"match"`
	Name       pulumi.StringOutput              `pulumi:"name"`
	Position   pulumi.IntOutput                 `pulumi:"position"`
}

// NewUserMappings registers a new resource with the given unique name, arguments, and options.
func NewUserMappings(ctx *pulumi.Context,
	name string, args *UserMappingsArgs, opts ...pulumi.ResourceOption) (*UserMappings, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Match == nil {
		return nil, errors.New("invalid value for required argument 'Match'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserMappings
	err := ctx.RegisterResource("onelogin:index/userMappings:UserMappings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserMappings gets an existing UserMappings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserMappings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserMappingsState, opts ...pulumi.ResourceOption) (*UserMappings, error) {
	var resource UserMappings
	err := ctx.ReadResource("onelogin:index/userMappings:UserMappings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserMappings resources.
type userMappingsState struct {
	Actions    []UserMappingsAction    `pulumi:"actions"`
	Conditions []UserMappingsCondition `pulumi:"conditions"`
	Enabled    *bool                   `pulumi:"enabled"`
	Match      *string                 `pulumi:"match"`
	Name       *string                 `pulumi:"name"`
	Position   *int                    `pulumi:"position"`
}

type UserMappingsState struct {
	Actions    UserMappingsActionArrayInput
	Conditions UserMappingsConditionArrayInput
	Enabled    pulumi.BoolPtrInput
	Match      pulumi.StringPtrInput
	Name       pulumi.StringPtrInput
	Position   pulumi.IntPtrInput
}

func (UserMappingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*userMappingsState)(nil)).Elem()
}

type userMappingsArgs struct {
	Actions    []UserMappingsAction    `pulumi:"actions"`
	Conditions []UserMappingsCondition `pulumi:"conditions"`
	Enabled    *bool                   `pulumi:"enabled"`
	Match      string                  `pulumi:"match"`
	Name       *string                 `pulumi:"name"`
	Position   *int                    `pulumi:"position"`
}

// The set of arguments for constructing a UserMappings resource.
type UserMappingsArgs struct {
	Actions    UserMappingsActionArrayInput
	Conditions UserMappingsConditionArrayInput
	Enabled    pulumi.BoolPtrInput
	Match      pulumi.StringInput
	Name       pulumi.StringPtrInput
	Position   pulumi.IntPtrInput
}

func (UserMappingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userMappingsArgs)(nil)).Elem()
}

type UserMappingsInput interface {
	pulumi.Input

	ToUserMappingsOutput() UserMappingsOutput
	ToUserMappingsOutputWithContext(ctx context.Context) UserMappingsOutput
}

func (*UserMappings) ElementType() reflect.Type {
	return reflect.TypeOf((**UserMappings)(nil)).Elem()
}

func (i *UserMappings) ToUserMappingsOutput() UserMappingsOutput {
	return i.ToUserMappingsOutputWithContext(context.Background())
}

func (i *UserMappings) ToUserMappingsOutputWithContext(ctx context.Context) UserMappingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserMappingsOutput)
}

// UserMappingsArrayInput is an input type that accepts UserMappingsArray and UserMappingsArrayOutput values.
// You can construct a concrete instance of `UserMappingsArrayInput` via:
//
//	UserMappingsArray{ UserMappingsArgs{...} }
type UserMappingsArrayInput interface {
	pulumi.Input

	ToUserMappingsArrayOutput() UserMappingsArrayOutput
	ToUserMappingsArrayOutputWithContext(context.Context) UserMappingsArrayOutput
}

type UserMappingsArray []UserMappingsInput

func (UserMappingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserMappings)(nil)).Elem()
}

func (i UserMappingsArray) ToUserMappingsArrayOutput() UserMappingsArrayOutput {
	return i.ToUserMappingsArrayOutputWithContext(context.Background())
}

func (i UserMappingsArray) ToUserMappingsArrayOutputWithContext(ctx context.Context) UserMappingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserMappingsArrayOutput)
}

// UserMappingsMapInput is an input type that accepts UserMappingsMap and UserMappingsMapOutput values.
// You can construct a concrete instance of `UserMappingsMapInput` via:
//
//	UserMappingsMap{ "key": UserMappingsArgs{...} }
type UserMappingsMapInput interface {
	pulumi.Input

	ToUserMappingsMapOutput() UserMappingsMapOutput
	ToUserMappingsMapOutputWithContext(context.Context) UserMappingsMapOutput
}

type UserMappingsMap map[string]UserMappingsInput

func (UserMappingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserMappings)(nil)).Elem()
}

func (i UserMappingsMap) ToUserMappingsMapOutput() UserMappingsMapOutput {
	return i.ToUserMappingsMapOutputWithContext(context.Background())
}

func (i UserMappingsMap) ToUserMappingsMapOutputWithContext(ctx context.Context) UserMappingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserMappingsMapOutput)
}

type UserMappingsOutput struct{ *pulumi.OutputState }

func (UserMappingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserMappings)(nil)).Elem()
}

func (o UserMappingsOutput) ToUserMappingsOutput() UserMappingsOutput {
	return o
}

func (o UserMappingsOutput) ToUserMappingsOutputWithContext(ctx context.Context) UserMappingsOutput {
	return o
}

func (o UserMappingsOutput) Actions() UserMappingsActionArrayOutput {
	return o.ApplyT(func(v *UserMappings) UserMappingsActionArrayOutput { return v.Actions }).(UserMappingsActionArrayOutput)
}

func (o UserMappingsOutput) Conditions() UserMappingsConditionArrayOutput {
	return o.ApplyT(func(v *UserMappings) UserMappingsConditionArrayOutput { return v.Conditions }).(UserMappingsConditionArrayOutput)
}

func (o UserMappingsOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *UserMappings) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o UserMappingsOutput) Match() pulumi.StringOutput {
	return o.ApplyT(func(v *UserMappings) pulumi.StringOutput { return v.Match }).(pulumi.StringOutput)
}

func (o UserMappingsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *UserMappings) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o UserMappingsOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *UserMappings) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

type UserMappingsArrayOutput struct{ *pulumi.OutputState }

func (UserMappingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserMappings)(nil)).Elem()
}

func (o UserMappingsArrayOutput) ToUserMappingsArrayOutput() UserMappingsArrayOutput {
	return o
}

func (o UserMappingsArrayOutput) ToUserMappingsArrayOutputWithContext(ctx context.Context) UserMappingsArrayOutput {
	return o
}

func (o UserMappingsArrayOutput) Index(i pulumi.IntInput) UserMappingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserMappings {
		return vs[0].([]*UserMappings)[vs[1].(int)]
	}).(UserMappingsOutput)
}

type UserMappingsMapOutput struct{ *pulumi.OutputState }

func (UserMappingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserMappings)(nil)).Elem()
}

func (o UserMappingsMapOutput) ToUserMappingsMapOutput() UserMappingsMapOutput {
	return o
}

func (o UserMappingsMapOutput) ToUserMappingsMapOutputWithContext(ctx context.Context) UserMappingsMapOutput {
	return o
}

func (o UserMappingsMapOutput) MapIndex(k pulumi.StringInput) UserMappingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserMappings {
		return vs[0].(map[string]*UserMappings)[vs[1].(string)]
	}).(UserMappingsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserMappingsInput)(nil)).Elem(), &UserMappings{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserMappingsArrayInput)(nil)).Elem(), UserMappingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserMappingsMapInput)(nil)).Elem(), UserMappingsMap{})
	pulumi.RegisterOutputType(UserMappingsOutput{})
	pulumi.RegisterOutputType(UserMappingsArrayOutput{})
	pulumi.RegisterOutputType(UserMappingsMapOutput{})
}
