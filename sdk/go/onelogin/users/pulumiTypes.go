// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package users

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GetAppsFilter struct {
	Name   string   `pulumi:"name"`
	Values []string `pulumi:"values"`
}

// GetAppsFilterInput is an input type that accepts GetAppsFilterArgs and GetAppsFilterOutput values.
// You can construct a concrete instance of `GetAppsFilterInput` via:
//
//	GetAppsFilterArgs{...}
type GetAppsFilterInput interface {
	pulumi.Input

	ToGetAppsFilterOutput() GetAppsFilterOutput
	ToGetAppsFilterOutputWithContext(context.Context) GetAppsFilterOutput
}

type GetAppsFilterArgs struct {
	Name   pulumi.StringInput      `pulumi:"name"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetAppsFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAppsFilter)(nil)).Elem()
}

func (i GetAppsFilterArgs) ToGetAppsFilterOutput() GetAppsFilterOutput {
	return i.ToGetAppsFilterOutputWithContext(context.Background())
}

func (i GetAppsFilterArgs) ToGetAppsFilterOutputWithContext(ctx context.Context) GetAppsFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAppsFilterOutput)
}

// GetAppsFilterArrayInput is an input type that accepts GetAppsFilterArray and GetAppsFilterArrayOutput values.
// You can construct a concrete instance of `GetAppsFilterArrayInput` via:
//
//	GetAppsFilterArray{ GetAppsFilterArgs{...} }
type GetAppsFilterArrayInput interface {
	pulumi.Input

	ToGetAppsFilterArrayOutput() GetAppsFilterArrayOutput
	ToGetAppsFilterArrayOutputWithContext(context.Context) GetAppsFilterArrayOutput
}

type GetAppsFilterArray []GetAppsFilterInput

func (GetAppsFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAppsFilter)(nil)).Elem()
}

func (i GetAppsFilterArray) ToGetAppsFilterArrayOutput() GetAppsFilterArrayOutput {
	return i.ToGetAppsFilterArrayOutputWithContext(context.Background())
}

func (i GetAppsFilterArray) ToGetAppsFilterArrayOutputWithContext(ctx context.Context) GetAppsFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAppsFilterArrayOutput)
}

type GetAppsFilterOutput struct{ *pulumi.OutputState }

func (GetAppsFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAppsFilter)(nil)).Elem()
}

func (o GetAppsFilterOutput) ToGetAppsFilterOutput() GetAppsFilterOutput {
	return o
}

func (o GetAppsFilterOutput) ToGetAppsFilterOutputWithContext(ctx context.Context) GetAppsFilterOutput {
	return o
}

func (o GetAppsFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetAppsFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetAppsFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAppsFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetAppsFilterArrayOutput struct{ *pulumi.OutputState }

func (GetAppsFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAppsFilter)(nil)).Elem()
}

func (o GetAppsFilterArrayOutput) ToGetAppsFilterArrayOutput() GetAppsFilterArrayOutput {
	return o
}

func (o GetAppsFilterArrayOutput) ToGetAppsFilterArrayOutputWithContext(ctx context.Context) GetAppsFilterArrayOutput {
	return o
}

func (o GetAppsFilterArrayOutput) Index(i pulumi.IntInput) GetAppsFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAppsFilter {
		return vs[0].([]GetAppsFilter)[vs[1].(int)]
	}).(GetAppsFilterOutput)
}

type GetDevicesFilter struct {
	Name   string   `pulumi:"name"`
	Values []string `pulumi:"values"`
}

// GetDevicesFilterInput is an input type that accepts GetDevicesFilterArgs and GetDevicesFilterOutput values.
// You can construct a concrete instance of `GetDevicesFilterInput` via:
//
//	GetDevicesFilterArgs{...}
type GetDevicesFilterInput interface {
	pulumi.Input

	ToGetDevicesFilterOutput() GetDevicesFilterOutput
	ToGetDevicesFilterOutputWithContext(context.Context) GetDevicesFilterOutput
}

type GetDevicesFilterArgs struct {
	Name   pulumi.StringInput      `pulumi:"name"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetDevicesFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDevicesFilter)(nil)).Elem()
}

func (i GetDevicesFilterArgs) ToGetDevicesFilterOutput() GetDevicesFilterOutput {
	return i.ToGetDevicesFilterOutputWithContext(context.Background())
}

func (i GetDevicesFilterArgs) ToGetDevicesFilterOutputWithContext(ctx context.Context) GetDevicesFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDevicesFilterOutput)
}

// GetDevicesFilterArrayInput is an input type that accepts GetDevicesFilterArray and GetDevicesFilterArrayOutput values.
// You can construct a concrete instance of `GetDevicesFilterArrayInput` via:
//
//	GetDevicesFilterArray{ GetDevicesFilterArgs{...} }
type GetDevicesFilterArrayInput interface {
	pulumi.Input

	ToGetDevicesFilterArrayOutput() GetDevicesFilterArrayOutput
	ToGetDevicesFilterArrayOutputWithContext(context.Context) GetDevicesFilterArrayOutput
}

type GetDevicesFilterArray []GetDevicesFilterInput

func (GetDevicesFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDevicesFilter)(nil)).Elem()
}

func (i GetDevicesFilterArray) ToGetDevicesFilterArrayOutput() GetDevicesFilterArrayOutput {
	return i.ToGetDevicesFilterArrayOutputWithContext(context.Background())
}

func (i GetDevicesFilterArray) ToGetDevicesFilterArrayOutputWithContext(ctx context.Context) GetDevicesFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDevicesFilterArrayOutput)
}

type GetDevicesFilterOutput struct{ *pulumi.OutputState }

func (GetDevicesFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDevicesFilter)(nil)).Elem()
}

func (o GetDevicesFilterOutput) ToGetDevicesFilterOutput() GetDevicesFilterOutput {
	return o
}

func (o GetDevicesFilterOutput) ToGetDevicesFilterOutputWithContext(ctx context.Context) GetDevicesFilterOutput {
	return o
}

func (o GetDevicesFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDevicesFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetDevicesFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDevicesFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetDevicesFilterArrayOutput struct{ *pulumi.OutputState }

func (GetDevicesFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDevicesFilter)(nil)).Elem()
}

func (o GetDevicesFilterArrayOutput) ToGetDevicesFilterArrayOutput() GetDevicesFilterArrayOutput {
	return o
}

func (o GetDevicesFilterArrayOutput) ToGetDevicesFilterArrayOutputWithContext(ctx context.Context) GetDevicesFilterArrayOutput {
	return o
}

func (o GetDevicesFilterArrayOutput) Index(i pulumi.IntInput) GetDevicesFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDevicesFilter {
		return vs[0].([]GetDevicesFilter)[vs[1].(int)]
	}).(GetDevicesFilterOutput)
}

type GetUsersFilter struct {
	Name   string   `pulumi:"name"`
	Values []string `pulumi:"values"`
}

// GetUsersFilterInput is an input type that accepts GetUsersFilterArgs and GetUsersFilterOutput values.
// You can construct a concrete instance of `GetUsersFilterInput` via:
//
//	GetUsersFilterArgs{...}
type GetUsersFilterInput interface {
	pulumi.Input

	ToGetUsersFilterOutput() GetUsersFilterOutput
	ToGetUsersFilterOutputWithContext(context.Context) GetUsersFilterOutput
}

type GetUsersFilterArgs struct {
	Name   pulumi.StringInput      `pulumi:"name"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetUsersFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersFilter)(nil)).Elem()
}

func (i GetUsersFilterArgs) ToGetUsersFilterOutput() GetUsersFilterOutput {
	return i.ToGetUsersFilterOutputWithContext(context.Background())
}

func (i GetUsersFilterArgs) ToGetUsersFilterOutputWithContext(ctx context.Context) GetUsersFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersFilterOutput)
}

// GetUsersFilterArrayInput is an input type that accepts GetUsersFilterArray and GetUsersFilterArrayOutput values.
// You can construct a concrete instance of `GetUsersFilterArrayInput` via:
//
//	GetUsersFilterArray{ GetUsersFilterArgs{...} }
type GetUsersFilterArrayInput interface {
	pulumi.Input

	ToGetUsersFilterArrayOutput() GetUsersFilterArrayOutput
	ToGetUsersFilterArrayOutputWithContext(context.Context) GetUsersFilterArrayOutput
}

type GetUsersFilterArray []GetUsersFilterInput

func (GetUsersFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersFilter)(nil)).Elem()
}

func (i GetUsersFilterArray) ToGetUsersFilterArrayOutput() GetUsersFilterArrayOutput {
	return i.ToGetUsersFilterArrayOutputWithContext(context.Background())
}

func (i GetUsersFilterArray) ToGetUsersFilterArrayOutputWithContext(ctx context.Context) GetUsersFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersFilterArrayOutput)
}

type GetUsersFilterOutput struct{ *pulumi.OutputState }

func (GetUsersFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersFilter)(nil)).Elem()
}

func (o GetUsersFilterOutput) ToGetUsersFilterOutput() GetUsersFilterOutput {
	return o
}

func (o GetUsersFilterOutput) ToGetUsersFilterOutputWithContext(ctx context.Context) GetUsersFilterOutput {
	return o
}

func (o GetUsersFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetUsersFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetUsersFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetUsersFilterArrayOutput struct{ *pulumi.OutputState }

func (GetUsersFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersFilter)(nil)).Elem()
}

func (o GetUsersFilterArrayOutput) ToGetUsersFilterArrayOutput() GetUsersFilterArrayOutput {
	return o
}

func (o GetUsersFilterArrayOutput) ToGetUsersFilterArrayOutputWithContext(ctx context.Context) GetUsersFilterArrayOutput {
	return o
}

func (o GetUsersFilterArrayOutput) Index(i pulumi.IntInput) GetUsersFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUsersFilter {
		return vs[0].([]GetUsersFilter)[vs[1].(int)]
	}).(GetUsersFilterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GetAppsFilterInput)(nil)).Elem(), GetAppsFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAppsFilterArrayInput)(nil)).Elem(), GetAppsFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDevicesFilterInput)(nil)).Elem(), GetDevicesFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDevicesFilterArrayInput)(nil)).Elem(), GetDevicesFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersFilterInput)(nil)).Elem(), GetUsersFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersFilterArrayInput)(nil)).Elem(), GetUsersFilterArray{})
	pulumi.RegisterOutputType(GetAppsFilterOutput{})
	pulumi.RegisterOutputType(GetAppsFilterArrayOutput{})
	pulumi.RegisterOutputType(GetDevicesFilterOutput{})
	pulumi.RegisterOutputType(GetDevicesFilterArrayOutput{})
	pulumi.RegisterOutputType(GetUsersFilterOutput{})
	pulumi.RegisterOutputType(GetUsersFilterArrayOutput{})
}
