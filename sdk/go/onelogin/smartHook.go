// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package onelogin

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manage SmartHook resources.
//
// This resource allows you to create and configure SmartHooks.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-onelogin/sdk/go/onelogin"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := onelogin.NewSmartHook(ctx, "basicTest", &onelogin.SmartHookArgs{
// 			Disabled: pulumi.Bool(false),
// 			EnvVars: pulumi.StringArray{
// 				pulumi.String("API_KEY"),
// 			},
// 			Function: pulumi.String("CQlmdW5jdGlvbiBteUZ1bmMoKSB7CgkJCWxldCBhID0gMTsKCQkJbGV0IGIgPSAxOwoJCQlsZXQgYyA9IGEgKyBiOwoJCSAgY29uc29sZS5sb2coIkRpbmcgRG9uZyIsIGEsIGIsIGMpOwoJCX0K"),
// 			Options: SmartHookOptionArray{
// 				&SmartHookOptionArgs{
// 					LocationEnabled: pulumi.Bool(false),
// 					RiskEnabled:     pulumi.Bool(false),
// 				},
// 			},
// 			Packages: pulumi.StringMap{
// 				"mysql": pulumi.String("^2.18.1"),
// 			},
// 			Retries: pulumi.Int(0),
// 			Timeout: pulumi.Int(2),
// 			Type:    pulumi.String("pre-authentication"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// A SmartHook can be imported via the OneLogin SmartHook.
//
// ```sh
//  $ pulumi import onelogin:index/smartHook:SmartHook example <smarthook_id>
// ```
type SmartHook struct {
	pulumi.CustomResourceState

	Conditions     SmartHookConditionArrayOutput `pulumi:"conditions"`
	ContextVersion pulumi.StringOutput           `pulumi:"contextVersion"`
	// Timestamp for smarthook's last update
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Indicates if function is available for execution or not. Default true
	Disabled pulumi.BoolOutput `pulumi:"disabled"`
	// An array of predefined environment variables to be supplied to the function at runtime.
	EnvVars pulumi.StringArrayOutput `pulumi:"envVars"`
	// A base64 encoded blob, or Heredoc string containing the javascript function code.
	Function pulumi.StringOutput `pulumi:"function"`
	// A list of options for the hook
	Options SmartHookOptionArrayOutput `pulumi:"options"`
	// A list of public npm packages than will be installed as part of the function build process. These packages names must be on our allowlist. See Node Modules section of this doc. Packages can be any version and support the semantic versioning syntax used by NPM.
	Packages pulumi.StringMapOutput `pulumi:"packages"`
	// Number of retries if execution fails. Default 0, Max 4
	Retries pulumi.IntOutput    `pulumi:"retries"`
	Runtime pulumi.StringOutput `pulumi:"runtime"`
	// The smarthook's status.
	Status pulumi.StringOutput `pulumi:"status"`
	// The number of milliseconds to allow before timeout. Default 1000, Max 10000
	Timeout pulumi.IntOutput `pulumi:"timeout"`
	// The name of the hook. Must be one of: `user-migration` `pre-authentication` `pre-user-create` `post-user-create` `pre-user-update` `post-user-update`
	Type pulumi.StringOutput `pulumi:"type"`
	// Timestamp for smarthook's last update
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewSmartHook registers a new resource with the given unique name, arguments, and options.
func NewSmartHook(ctx *pulumi.Context,
	name string, args *SmartHookArgs, opts ...pulumi.ResourceOption) (*SmartHook, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Disabled == nil {
		return nil, errors.New("invalid value for required argument 'Disabled'")
	}
	if args.EnvVars == nil {
		return nil, errors.New("invalid value for required argument 'EnvVars'")
	}
	if args.Function == nil {
		return nil, errors.New("invalid value for required argument 'Function'")
	}
	if args.Packages == nil {
		return nil, errors.New("invalid value for required argument 'Packages'")
	}
	if args.Retries == nil {
		return nil, errors.New("invalid value for required argument 'Retries'")
	}
	if args.Runtime == nil {
		return nil, errors.New("invalid value for required argument 'Runtime'")
	}
	if args.Timeout == nil {
		return nil, errors.New("invalid value for required argument 'Timeout'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource SmartHook
	err := ctx.RegisterResource("onelogin:index/smartHook:SmartHook", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSmartHook gets an existing SmartHook resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSmartHook(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SmartHookState, opts ...pulumi.ResourceOption) (*SmartHook, error) {
	var resource SmartHook
	err := ctx.ReadResource("onelogin:index/smartHook:SmartHook", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SmartHook resources.
type smartHookState struct {
	Conditions     []SmartHookCondition `pulumi:"conditions"`
	ContextVersion *string              `pulumi:"contextVersion"`
	// Timestamp for smarthook's last update
	CreatedAt *string `pulumi:"createdAt"`
	// Indicates if function is available for execution or not. Default true
	Disabled *bool `pulumi:"disabled"`
	// An array of predefined environment variables to be supplied to the function at runtime.
	EnvVars []string `pulumi:"envVars"`
	// A base64 encoded blob, or Heredoc string containing the javascript function code.
	Function *string `pulumi:"function"`
	// A list of options for the hook
	Options []SmartHookOption `pulumi:"options"`
	// A list of public npm packages than will be installed as part of the function build process. These packages names must be on our allowlist. See Node Modules section of this doc. Packages can be any version and support the semantic versioning syntax used by NPM.
	Packages map[string]string `pulumi:"packages"`
	// Number of retries if execution fails. Default 0, Max 4
	Retries *int    `pulumi:"retries"`
	Runtime *string `pulumi:"runtime"`
	// The smarthook's status.
	Status *string `pulumi:"status"`
	// The number of milliseconds to allow before timeout. Default 1000, Max 10000
	Timeout *int `pulumi:"timeout"`
	// The name of the hook. Must be one of: `user-migration` `pre-authentication` `pre-user-create` `post-user-create` `pre-user-update` `post-user-update`
	Type *string `pulumi:"type"`
	// Timestamp for smarthook's last update
	UpdatedAt *string `pulumi:"updatedAt"`
}

type SmartHookState struct {
	Conditions     SmartHookConditionArrayInput
	ContextVersion pulumi.StringPtrInput
	// Timestamp for smarthook's last update
	CreatedAt pulumi.StringPtrInput
	// Indicates if function is available for execution or not. Default true
	Disabled pulumi.BoolPtrInput
	// An array of predefined environment variables to be supplied to the function at runtime.
	EnvVars pulumi.StringArrayInput
	// A base64 encoded blob, or Heredoc string containing the javascript function code.
	Function pulumi.StringPtrInput
	// A list of options for the hook
	Options SmartHookOptionArrayInput
	// A list of public npm packages than will be installed as part of the function build process. These packages names must be on our allowlist. See Node Modules section of this doc. Packages can be any version and support the semantic versioning syntax used by NPM.
	Packages pulumi.StringMapInput
	// Number of retries if execution fails. Default 0, Max 4
	Retries pulumi.IntPtrInput
	Runtime pulumi.StringPtrInput
	// The smarthook's status.
	Status pulumi.StringPtrInput
	// The number of milliseconds to allow before timeout. Default 1000, Max 10000
	Timeout pulumi.IntPtrInput
	// The name of the hook. Must be one of: `user-migration` `pre-authentication` `pre-user-create` `post-user-create` `pre-user-update` `post-user-update`
	Type pulumi.StringPtrInput
	// Timestamp for smarthook's last update
	UpdatedAt pulumi.StringPtrInput
}

func (SmartHookState) ElementType() reflect.Type {
	return reflect.TypeOf((*smartHookState)(nil)).Elem()
}

type smartHookArgs struct {
	Conditions     []SmartHookCondition `pulumi:"conditions"`
	ContextVersion *string              `pulumi:"contextVersion"`
	// Indicates if function is available for execution or not. Default true
	Disabled bool `pulumi:"disabled"`
	// An array of predefined environment variables to be supplied to the function at runtime.
	EnvVars []string `pulumi:"envVars"`
	// A base64 encoded blob, or Heredoc string containing the javascript function code.
	Function string `pulumi:"function"`
	// A list of options for the hook
	Options []SmartHookOption `pulumi:"options"`
	// A list of public npm packages than will be installed as part of the function build process. These packages names must be on our allowlist. See Node Modules section of this doc. Packages can be any version and support the semantic versioning syntax used by NPM.
	Packages map[string]string `pulumi:"packages"`
	// Number of retries if execution fails. Default 0, Max 4
	Retries int    `pulumi:"retries"`
	Runtime string `pulumi:"runtime"`
	// The number of milliseconds to allow before timeout. Default 1000, Max 10000
	Timeout int `pulumi:"timeout"`
	// The name of the hook. Must be one of: `user-migration` `pre-authentication` `pre-user-create` `post-user-create` `pre-user-update` `post-user-update`
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a SmartHook resource.
type SmartHookArgs struct {
	Conditions     SmartHookConditionArrayInput
	ContextVersion pulumi.StringPtrInput
	// Indicates if function is available for execution or not. Default true
	Disabled pulumi.BoolInput
	// An array of predefined environment variables to be supplied to the function at runtime.
	EnvVars pulumi.StringArrayInput
	// A base64 encoded blob, or Heredoc string containing the javascript function code.
	Function pulumi.StringInput
	// A list of options for the hook
	Options SmartHookOptionArrayInput
	// A list of public npm packages than will be installed as part of the function build process. These packages names must be on our allowlist. See Node Modules section of this doc. Packages can be any version and support the semantic versioning syntax used by NPM.
	Packages pulumi.StringMapInput
	// Number of retries if execution fails. Default 0, Max 4
	Retries pulumi.IntInput
	Runtime pulumi.StringInput
	// The number of milliseconds to allow before timeout. Default 1000, Max 10000
	Timeout pulumi.IntInput
	// The name of the hook. Must be one of: `user-migration` `pre-authentication` `pre-user-create` `post-user-create` `pre-user-update` `post-user-update`
	Type pulumi.StringInput
}

func (SmartHookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*smartHookArgs)(nil)).Elem()
}

type SmartHookInput interface {
	pulumi.Input

	ToSmartHookOutput() SmartHookOutput
	ToSmartHookOutputWithContext(ctx context.Context) SmartHookOutput
}

func (*SmartHook) ElementType() reflect.Type {
	return reflect.TypeOf((**SmartHook)(nil)).Elem()
}

func (i *SmartHook) ToSmartHookOutput() SmartHookOutput {
	return i.ToSmartHookOutputWithContext(context.Background())
}

func (i *SmartHook) ToSmartHookOutputWithContext(ctx context.Context) SmartHookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmartHookOutput)
}

// SmartHookArrayInput is an input type that accepts SmartHookArray and SmartHookArrayOutput values.
// You can construct a concrete instance of `SmartHookArrayInput` via:
//
//          SmartHookArray{ SmartHookArgs{...} }
type SmartHookArrayInput interface {
	pulumi.Input

	ToSmartHookArrayOutput() SmartHookArrayOutput
	ToSmartHookArrayOutputWithContext(context.Context) SmartHookArrayOutput
}

type SmartHookArray []SmartHookInput

func (SmartHookArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SmartHook)(nil)).Elem()
}

func (i SmartHookArray) ToSmartHookArrayOutput() SmartHookArrayOutput {
	return i.ToSmartHookArrayOutputWithContext(context.Background())
}

func (i SmartHookArray) ToSmartHookArrayOutputWithContext(ctx context.Context) SmartHookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmartHookArrayOutput)
}

// SmartHookMapInput is an input type that accepts SmartHookMap and SmartHookMapOutput values.
// You can construct a concrete instance of `SmartHookMapInput` via:
//
//          SmartHookMap{ "key": SmartHookArgs{...} }
type SmartHookMapInput interface {
	pulumi.Input

	ToSmartHookMapOutput() SmartHookMapOutput
	ToSmartHookMapOutputWithContext(context.Context) SmartHookMapOutput
}

type SmartHookMap map[string]SmartHookInput

func (SmartHookMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SmartHook)(nil)).Elem()
}

func (i SmartHookMap) ToSmartHookMapOutput() SmartHookMapOutput {
	return i.ToSmartHookMapOutputWithContext(context.Background())
}

func (i SmartHookMap) ToSmartHookMapOutputWithContext(ctx context.Context) SmartHookMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmartHookMapOutput)
}

type SmartHookOutput struct{ *pulumi.OutputState }

func (SmartHookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SmartHook)(nil)).Elem()
}

func (o SmartHookOutput) ToSmartHookOutput() SmartHookOutput {
	return o
}

func (o SmartHookOutput) ToSmartHookOutputWithContext(ctx context.Context) SmartHookOutput {
	return o
}

type SmartHookArrayOutput struct{ *pulumi.OutputState }

func (SmartHookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SmartHook)(nil)).Elem()
}

func (o SmartHookArrayOutput) ToSmartHookArrayOutput() SmartHookArrayOutput {
	return o
}

func (o SmartHookArrayOutput) ToSmartHookArrayOutputWithContext(ctx context.Context) SmartHookArrayOutput {
	return o
}

func (o SmartHookArrayOutput) Index(i pulumi.IntInput) SmartHookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SmartHook {
		return vs[0].([]*SmartHook)[vs[1].(int)]
	}).(SmartHookOutput)
}

type SmartHookMapOutput struct{ *pulumi.OutputState }

func (SmartHookMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SmartHook)(nil)).Elem()
}

func (o SmartHookMapOutput) ToSmartHookMapOutput() SmartHookMapOutput {
	return o
}

func (o SmartHookMapOutput) ToSmartHookMapOutputWithContext(ctx context.Context) SmartHookMapOutput {
	return o
}

func (o SmartHookMapOutput) MapIndex(k pulumi.StringInput) SmartHookOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SmartHook {
		return vs[0].(map[string]*SmartHook)[vs[1].(string)]
	}).(SmartHookOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SmartHookInput)(nil)).Elem(), &SmartHook{})
	pulumi.RegisterInputType(reflect.TypeOf((*SmartHookArrayInput)(nil)).Elem(), SmartHookArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SmartHookMapInput)(nil)).Elem(), SmartHookMap{})
	pulumi.RegisterOutputType(SmartHookOutput{})
	pulumi.RegisterOutputType(SmartHookArrayOutput{})
	pulumi.RegisterOutputType(SmartHookMapOutput{})
}
