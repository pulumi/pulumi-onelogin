// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package onelogin

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-onelogin/sdk/go/onelogin/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Deprecated: onelogin.index/apprules.AppRules has been deprecated in favor of onelogin.apps/rules.Rules
type AppRules struct {
	pulumi.CustomResourceState

	Actions    AppRulesActionArrayOutput    `pulumi:"actions"`
	AppId      pulumi.StringOutput          `pulumi:"appId"`
	Conditions AppRulesConditionArrayOutput `pulumi:"conditions"`
	Enabled    pulumi.BoolPtrOutput         `pulumi:"enabled"`
	Match      pulumi.StringOutput          `pulumi:"match"`
	Name       pulumi.StringOutput          `pulumi:"name"`
	Position   pulumi.IntOutput             `pulumi:"position"`
}

// NewAppRules registers a new resource with the given unique name, arguments, and options.
func NewAppRules(ctx *pulumi.Context,
	name string, args *AppRulesArgs, opts ...pulumi.ResourceOption) (*AppRules, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppId == nil {
		return nil, errors.New("invalid value for required argument 'AppId'")
	}
	if args.Match == nil {
		return nil, errors.New("invalid value for required argument 'Match'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AppRules
	err := ctx.RegisterResource("onelogin:index/appRules:AppRules", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppRules gets an existing AppRules resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppRules(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppRulesState, opts ...pulumi.ResourceOption) (*AppRules, error) {
	var resource AppRules
	err := ctx.ReadResource("onelogin:index/appRules:AppRules", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppRules resources.
type appRulesState struct {
	Actions    []AppRulesAction    `pulumi:"actions"`
	AppId      *string             `pulumi:"appId"`
	Conditions []AppRulesCondition `pulumi:"conditions"`
	Enabled    *bool               `pulumi:"enabled"`
	Match      *string             `pulumi:"match"`
	Name       *string             `pulumi:"name"`
	Position   *int                `pulumi:"position"`
}

type AppRulesState struct {
	Actions    AppRulesActionArrayInput
	AppId      pulumi.StringPtrInput
	Conditions AppRulesConditionArrayInput
	Enabled    pulumi.BoolPtrInput
	Match      pulumi.StringPtrInput
	Name       pulumi.StringPtrInput
	Position   pulumi.IntPtrInput
}

func (AppRulesState) ElementType() reflect.Type {
	return reflect.TypeOf((*appRulesState)(nil)).Elem()
}

type appRulesArgs struct {
	Actions    []AppRulesAction    `pulumi:"actions"`
	AppId      string              `pulumi:"appId"`
	Conditions []AppRulesCondition `pulumi:"conditions"`
	Enabled    *bool               `pulumi:"enabled"`
	Match      string              `pulumi:"match"`
	Name       *string             `pulumi:"name"`
	Position   *int                `pulumi:"position"`
}

// The set of arguments for constructing a AppRules resource.
type AppRulesArgs struct {
	Actions    AppRulesActionArrayInput
	AppId      pulumi.StringInput
	Conditions AppRulesConditionArrayInput
	Enabled    pulumi.BoolPtrInput
	Match      pulumi.StringInput
	Name       pulumi.StringPtrInput
	Position   pulumi.IntPtrInput
}

func (AppRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appRulesArgs)(nil)).Elem()
}

type AppRulesInput interface {
	pulumi.Input

	ToAppRulesOutput() AppRulesOutput
	ToAppRulesOutputWithContext(ctx context.Context) AppRulesOutput
}

func (*AppRules) ElementType() reflect.Type {
	return reflect.TypeOf((**AppRules)(nil)).Elem()
}

func (i *AppRules) ToAppRulesOutput() AppRulesOutput {
	return i.ToAppRulesOutputWithContext(context.Background())
}

func (i *AppRules) ToAppRulesOutputWithContext(ctx context.Context) AppRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppRulesOutput)
}

// AppRulesArrayInput is an input type that accepts AppRulesArray and AppRulesArrayOutput values.
// You can construct a concrete instance of `AppRulesArrayInput` via:
//
//	AppRulesArray{ AppRulesArgs{...} }
type AppRulesArrayInput interface {
	pulumi.Input

	ToAppRulesArrayOutput() AppRulesArrayOutput
	ToAppRulesArrayOutputWithContext(context.Context) AppRulesArrayOutput
}

type AppRulesArray []AppRulesInput

func (AppRulesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppRules)(nil)).Elem()
}

func (i AppRulesArray) ToAppRulesArrayOutput() AppRulesArrayOutput {
	return i.ToAppRulesArrayOutputWithContext(context.Background())
}

func (i AppRulesArray) ToAppRulesArrayOutputWithContext(ctx context.Context) AppRulesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppRulesArrayOutput)
}

// AppRulesMapInput is an input type that accepts AppRulesMap and AppRulesMapOutput values.
// You can construct a concrete instance of `AppRulesMapInput` via:
//
//	AppRulesMap{ "key": AppRulesArgs{...} }
type AppRulesMapInput interface {
	pulumi.Input

	ToAppRulesMapOutput() AppRulesMapOutput
	ToAppRulesMapOutputWithContext(context.Context) AppRulesMapOutput
}

type AppRulesMap map[string]AppRulesInput

func (AppRulesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppRules)(nil)).Elem()
}

func (i AppRulesMap) ToAppRulesMapOutput() AppRulesMapOutput {
	return i.ToAppRulesMapOutputWithContext(context.Background())
}

func (i AppRulesMap) ToAppRulesMapOutputWithContext(ctx context.Context) AppRulesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppRulesMapOutput)
}

type AppRulesOutput struct{ *pulumi.OutputState }

func (AppRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppRules)(nil)).Elem()
}

func (o AppRulesOutput) ToAppRulesOutput() AppRulesOutput {
	return o
}

func (o AppRulesOutput) ToAppRulesOutputWithContext(ctx context.Context) AppRulesOutput {
	return o
}

func (o AppRulesOutput) Actions() AppRulesActionArrayOutput {
	return o.ApplyT(func(v *AppRules) AppRulesActionArrayOutput { return v.Actions }).(AppRulesActionArrayOutput)
}

func (o AppRulesOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v *AppRules) pulumi.StringOutput { return v.AppId }).(pulumi.StringOutput)
}

func (o AppRulesOutput) Conditions() AppRulesConditionArrayOutput {
	return o.ApplyT(func(v *AppRules) AppRulesConditionArrayOutput { return v.Conditions }).(AppRulesConditionArrayOutput)
}

func (o AppRulesOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AppRules) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o AppRulesOutput) Match() pulumi.StringOutput {
	return o.ApplyT(func(v *AppRules) pulumi.StringOutput { return v.Match }).(pulumi.StringOutput)
}

func (o AppRulesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AppRules) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o AppRulesOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *AppRules) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

type AppRulesArrayOutput struct{ *pulumi.OutputState }

func (AppRulesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppRules)(nil)).Elem()
}

func (o AppRulesArrayOutput) ToAppRulesArrayOutput() AppRulesArrayOutput {
	return o
}

func (o AppRulesArrayOutput) ToAppRulesArrayOutputWithContext(ctx context.Context) AppRulesArrayOutput {
	return o
}

func (o AppRulesArrayOutput) Index(i pulumi.IntInput) AppRulesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppRules {
		return vs[0].([]*AppRules)[vs[1].(int)]
	}).(AppRulesOutput)
}

type AppRulesMapOutput struct{ *pulumi.OutputState }

func (AppRulesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppRules)(nil)).Elem()
}

func (o AppRulesMapOutput) ToAppRulesMapOutput() AppRulesMapOutput {
	return o
}

func (o AppRulesMapOutput) ToAppRulesMapOutputWithContext(ctx context.Context) AppRulesMapOutput {
	return o
}

func (o AppRulesMapOutput) MapIndex(k pulumi.StringInput) AppRulesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppRules {
		return vs[0].(map[string]*AppRules)[vs[1].(string)]
	}).(AppRulesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppRulesInput)(nil)).Elem(), &AppRules{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppRulesArrayInput)(nil)).Elem(), AppRulesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppRulesMapInput)(nil)).Elem(), AppRulesMap{})
	pulumi.RegisterOutputType(AppRulesOutput{})
	pulumi.RegisterOutputType(AppRulesArrayOutput{})
	pulumi.RegisterOutputType(AppRulesMapOutput{})
}
