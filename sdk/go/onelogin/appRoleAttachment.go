// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package onelogin

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-onelogin/sdk/go/onelogin"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := onelogin.NewAppRoleAttachment(ctx, "example", &onelogin.AppRoleAttachmentArgs{
// 			AppId:  pulumi.Any(onelogin_saml_apps.Saml.Id),
// 			RoleId: pulumi.Int(12345),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// An App Role Attachment cannot be imported at this time.
type AppRoleAttachment struct {
	pulumi.CustomResourceState

	// The id of the App resource to which the role should belong.
	AppId pulumi.IntOutput `pulumi:"appId"`
	// The id of the Role being attached to the App.
	RoleId pulumi.IntOutput `pulumi:"roleId"`
}

// NewAppRoleAttachment registers a new resource with the given unique name, arguments, and options.
func NewAppRoleAttachment(ctx *pulumi.Context,
	name string, args *AppRoleAttachmentArgs, opts ...pulumi.ResourceOption) (*AppRoleAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppId == nil {
		return nil, errors.New("invalid value for required argument 'AppId'")
	}
	if args.RoleId == nil {
		return nil, errors.New("invalid value for required argument 'RoleId'")
	}
	var resource AppRoleAttachment
	err := ctx.RegisterResource("onelogin:index/appRoleAttachment:AppRoleAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppRoleAttachment gets an existing AppRoleAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppRoleAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppRoleAttachmentState, opts ...pulumi.ResourceOption) (*AppRoleAttachment, error) {
	var resource AppRoleAttachment
	err := ctx.ReadResource("onelogin:index/appRoleAttachment:AppRoleAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppRoleAttachment resources.
type appRoleAttachmentState struct {
	// The id of the App resource to which the role should belong.
	AppId *int `pulumi:"appId"`
	// The id of the Role being attached to the App.
	RoleId *int `pulumi:"roleId"`
}

type AppRoleAttachmentState struct {
	// The id of the App resource to which the role should belong.
	AppId pulumi.IntPtrInput
	// The id of the Role being attached to the App.
	RoleId pulumi.IntPtrInput
}

func (AppRoleAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*appRoleAttachmentState)(nil)).Elem()
}

type appRoleAttachmentArgs struct {
	// The id of the App resource to which the role should belong.
	AppId int `pulumi:"appId"`
	// The id of the Role being attached to the App.
	RoleId int `pulumi:"roleId"`
}

// The set of arguments for constructing a AppRoleAttachment resource.
type AppRoleAttachmentArgs struct {
	// The id of the App resource to which the role should belong.
	AppId pulumi.IntInput
	// The id of the Role being attached to the App.
	RoleId pulumi.IntInput
}

func (AppRoleAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appRoleAttachmentArgs)(nil)).Elem()
}

type AppRoleAttachmentInput interface {
	pulumi.Input

	ToAppRoleAttachmentOutput() AppRoleAttachmentOutput
	ToAppRoleAttachmentOutputWithContext(ctx context.Context) AppRoleAttachmentOutput
}

func (*AppRoleAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**AppRoleAttachment)(nil)).Elem()
}

func (i *AppRoleAttachment) ToAppRoleAttachmentOutput() AppRoleAttachmentOutput {
	return i.ToAppRoleAttachmentOutputWithContext(context.Background())
}

func (i *AppRoleAttachment) ToAppRoleAttachmentOutputWithContext(ctx context.Context) AppRoleAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppRoleAttachmentOutput)
}

// AppRoleAttachmentArrayInput is an input type that accepts AppRoleAttachmentArray and AppRoleAttachmentArrayOutput values.
// You can construct a concrete instance of `AppRoleAttachmentArrayInput` via:
//
//          AppRoleAttachmentArray{ AppRoleAttachmentArgs{...} }
type AppRoleAttachmentArrayInput interface {
	pulumi.Input

	ToAppRoleAttachmentArrayOutput() AppRoleAttachmentArrayOutput
	ToAppRoleAttachmentArrayOutputWithContext(context.Context) AppRoleAttachmentArrayOutput
}

type AppRoleAttachmentArray []AppRoleAttachmentInput

func (AppRoleAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppRoleAttachment)(nil)).Elem()
}

func (i AppRoleAttachmentArray) ToAppRoleAttachmentArrayOutput() AppRoleAttachmentArrayOutput {
	return i.ToAppRoleAttachmentArrayOutputWithContext(context.Background())
}

func (i AppRoleAttachmentArray) ToAppRoleAttachmentArrayOutputWithContext(ctx context.Context) AppRoleAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppRoleAttachmentArrayOutput)
}

// AppRoleAttachmentMapInput is an input type that accepts AppRoleAttachmentMap and AppRoleAttachmentMapOutput values.
// You can construct a concrete instance of `AppRoleAttachmentMapInput` via:
//
//          AppRoleAttachmentMap{ "key": AppRoleAttachmentArgs{...} }
type AppRoleAttachmentMapInput interface {
	pulumi.Input

	ToAppRoleAttachmentMapOutput() AppRoleAttachmentMapOutput
	ToAppRoleAttachmentMapOutputWithContext(context.Context) AppRoleAttachmentMapOutput
}

type AppRoleAttachmentMap map[string]AppRoleAttachmentInput

func (AppRoleAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppRoleAttachment)(nil)).Elem()
}

func (i AppRoleAttachmentMap) ToAppRoleAttachmentMapOutput() AppRoleAttachmentMapOutput {
	return i.ToAppRoleAttachmentMapOutputWithContext(context.Background())
}

func (i AppRoleAttachmentMap) ToAppRoleAttachmentMapOutputWithContext(ctx context.Context) AppRoleAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppRoleAttachmentMapOutput)
}

type AppRoleAttachmentOutput struct{ *pulumi.OutputState }

func (AppRoleAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppRoleAttachment)(nil)).Elem()
}

func (o AppRoleAttachmentOutput) ToAppRoleAttachmentOutput() AppRoleAttachmentOutput {
	return o
}

func (o AppRoleAttachmentOutput) ToAppRoleAttachmentOutputWithContext(ctx context.Context) AppRoleAttachmentOutput {
	return o
}

type AppRoleAttachmentArrayOutput struct{ *pulumi.OutputState }

func (AppRoleAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppRoleAttachment)(nil)).Elem()
}

func (o AppRoleAttachmentArrayOutput) ToAppRoleAttachmentArrayOutput() AppRoleAttachmentArrayOutput {
	return o
}

func (o AppRoleAttachmentArrayOutput) ToAppRoleAttachmentArrayOutputWithContext(ctx context.Context) AppRoleAttachmentArrayOutput {
	return o
}

func (o AppRoleAttachmentArrayOutput) Index(i pulumi.IntInput) AppRoleAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppRoleAttachment {
		return vs[0].([]*AppRoleAttachment)[vs[1].(int)]
	}).(AppRoleAttachmentOutput)
}

type AppRoleAttachmentMapOutput struct{ *pulumi.OutputState }

func (AppRoleAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppRoleAttachment)(nil)).Elem()
}

func (o AppRoleAttachmentMapOutput) ToAppRoleAttachmentMapOutput() AppRoleAttachmentMapOutput {
	return o
}

func (o AppRoleAttachmentMapOutput) ToAppRoleAttachmentMapOutputWithContext(ctx context.Context) AppRoleAttachmentMapOutput {
	return o
}

func (o AppRoleAttachmentMapOutput) MapIndex(k pulumi.StringInput) AppRoleAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppRoleAttachment {
		return vs[0].(map[string]*AppRoleAttachment)[vs[1].(string)]
	}).(AppRoleAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppRoleAttachmentInput)(nil)).Elem(), &AppRoleAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppRoleAttachmentArrayInput)(nil)).Elem(), AppRoleAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppRoleAttachmentMapInput)(nil)).Elem(), AppRoleAttachmentMap{})
	pulumi.RegisterOutputType(AppRoleAttachmentOutput{})
	pulumi.RegisterOutputType(AppRoleAttachmentArrayOutput{})
	pulumi.RegisterOutputType(AppRoleAttachmentMapOutput{})
}
